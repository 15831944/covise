MACRO(USE_MPI)
  IF (COVISE_USE_MPI)
    COVISE_FIND_PACKAGE(MPI)
    IF ((NOT MPI_FOUND) AND (${ARGC} LESS 1))
      USING_MESSAGE("Skipping because of missing MPI")
      RETURN()
    ENDIF((NOT MPI_FOUND) AND (${ARGC} LESS 1))
    IF(NOT MPI_USED AND MPI_FOUND)
      SET(MPI_USED TRUE)
      ADD_DEFINITIONS(-DHAS_MPI)
      INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
      SET(EXTRA_LIBS ${EXTRA_LIBS} ${MPI_LIBRARIES})
      SET(CMAKE_C_COMPILE_FLAGS ${CMAKE_C_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
      SET(CMAKE_CXX_COMPILE_FLAGS ${CMAKE_CXX_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
      if(APPLE)
        # otherwise, linker tries to resolve transitively linked CUDA
        set(lflag "-Wl,-flat_namespace")
        STRING(REGEX REPLACE "${lflag}[ ]+|${lflag}$" "" MPI_LINK_FLAGS "${MPI_LINK_FLAGS}")
      endif()
      SET(CMAKE_C_LINK_FLAGS "${CMAKE_C_LINK_FLAGS} ${MPI_LINK_FLAGS}")
      SET(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} ${MPI_LINK_FLAGS}")
    ENDIF()
  ELSE(COVISE_USE_MPI)
    IF (${ARGC} LESS 1)
        RETURN()
    ENDIF()
  ENDIF(COVISE_USE_MPI)
ENDMACRO(USE_MPI)

