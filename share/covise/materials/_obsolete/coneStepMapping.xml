
<parallaxMapping>
  <uniform name="texmap" type="sampler2D" value="0"/>
  <uniform name="stepmap" type="sampler2D" value="1"/>

  <uniform name="csm_gain" type="float" value="0.5"/>
  <uniform name="csm_offset" type="float" value="0.5"/>
  <uniform name="texsize" type="float" value="512.0"/>
  <uniform name="depth" type="float" value="0.03"/>
  
  <attribute name="tangent" type="vec3" value="6"/>
  <attribute name="binormal" type="vec3" value="7"/>

  <vertexProgram>
//  input from the user
uniform float csm_gain;
uniform float csm_offset;
uniform float texsize;

//  interpolate these and pass 
//  them into the fragment shader
varying vec2 texCoord;
varying vec3 vertex_pos;
varying vec3 light_pos;
varying float vertex_dist;
varying float light_dist;

//  distance to the point
varying float dist_val;

//  tangent space attributes
attribute vec3 binormal;
attribute vec3 tangent;

void main(void)
{
   // location of the vertex in eye space
   vec3 eyeSpaceVert = (gl_ModelViewMatrix * gl_Vertex).xyz;
  
   // convert to eyeSpace for programs other than Irrlicht
   //eyeSpaceLight = (gl_ModelViewMatrix * vec4(gl_LightSource[0].position.xyz,1.0)).xyz;
   // gl_LightSource[n].position is already in eyeSpace from Irrlicht!
   vec3 eyeSpaceLight = gl_LightSource[0].position.xyz;
   
   //  the matrix needed to convert to eye space
   //  (this is local, and should already be normalized, I think)
   vec3 eyeSpaceTangent  = normalize(gl_NormalMatrix * tangent);	//tangent;
   vec3 eyeSpaceBinormal = normalize(gl_NormalMatrix * binormal);	//binormal;
   vec3 eyeSpaceNormal   = normalize(gl_NormalMatrix * gl_Normal); //normal
  
   // now convert the light and position, and pass in the texture coordinate
   vertex_pos = vec3 (
        dot (eyeSpaceTangent, eyeSpaceVert),
        dot (eyeSpaceBinormal, eyeSpaceVert),
        dot (eyeSpaceNormal, eyeSpaceVert));
   light_pos = vec3 (
        dot (eyeSpaceTangent, eyeSpaceLight),
        dot (eyeSpaceBinormal, eyeSpaceLight),
        dot (eyeSpaceNormal, eyeSpaceLight))
        - vertex_pos;
   vertex_dist = length (eyeSpaceVert);
   light_dist = length (light_pos);
   //light_pos /= light_dist;
   texCoord   = gl_MultiTexCoord0.xy;
   
   //  for the LOD
   dist_val = (0.00333 * vertex_dist * csm_gain + csm_offset) 
      / texsize;
   
   // done
#ifdef __GLSL_CG_DATA_TYPES
gl_ClipVertex = gl_ModelViewMatrix*gl_Vertex;
#endif
   gl_Position = ftransform();
}  
  </vertexProgram>

  <fragmentProgram>
uniform float depth;
uniform float texsize;

varying vec2 texCoord;
varying vec3 vertex_pos;
varying vec3 light_pos;
varying float vertex_dist;
varying float light_dist;
varying float dist_val;

uniform sampler2D stepmap;
uniform sampler2D texmap;

void intersect_square_cone_exp (inout vec3 dp, in vec3 ds, in float dist_factor);
void intersect_square_cone_10step (inout vec3 dp, in vec3 ds);

void main(void)
{
   vec4 t,c;
   vec3 l,s;
   vec3 pt_eye, pt_light;
   float a;

   // ray intersect in view direction
   a  = -depth / vertex_pos.z;
   s = vertex_pos * a;
   s.z = 1.0;
  
   //	find the distance to the actualy heightfield
   pt_eye = vec3 (texCoord, 0.0);
   //intersect_square_cone_exp (pt_eye, s, dist_val);
   intersect_square_cone_10step (pt_eye, s);
  
   /*
   gl_FragColor = vec4(pt_eye.z, 0, 0, 0);
   return;//*/
  
   // get rm and color texture points
   c=texture2D(texmap,pt_eye.xy);

   // expand normal from normal map in local polygon space
   // blue = df/dx
   // alpha = df/dy (image coords are no longer backward!)
   // note: I _need_ the texture size to scale the normal properly!
   t=texture2D(stepmap, pt_eye.xy);
   t = vec4 ((t.ba-0.5) * (-depth * texsize), 1.0, 0.0);
   t=normalize(t);

   // adjust the hit-position
   // (only useful if the light is near relative
   // to the depth)
   //p -= v*d*a;
   
   // compute attenuation
   float att = gl_LightSource[0].linearAttenuation;
   att = min (1.0, 1.0 / (light_dist*att));
   
   // rescale the light vector
   l = att * normalize(light_pos);

   // compute the final color
   gl_FragColor = vec4(
   			gl_LightSource[0].ambient.xyz*c.xyz
   			+gl_LightSource[0].diffuse.xyz*c.xyz*max(0.0,dot(l,t.xyz)), 
   			1.0);
}

// experimental (distance is taken into account)
void intersect_square_cone_exp (inout vec3 dp, in vec3 ds, in float dist_factor)
{
   // the "not Z" component of the direction vector (for a square cone)
   float iz = max(abs(ds.x),abs(ds.y));
   // my starting location (is at z=0)
   // texture lookup
   vec4 t;
   // and how high above the surface am I?
   float ht, old_ht;
   float CR = 0.0;
  
   //	find the starting location and height
   t=texture2D(stepmap,dp.xy);
   while (t.r > dp.z)
   {
     CR = t.g * t.g;

	   // right, I need to take one step.
	   // I use the current height above the texture,
	   // and the information about the cone-ratio
	   // to size a single step.  So it is fast and 
	   // precise!  (like a coneified version of
	   // "space leaping", but adapted from voxels)
     
     // experimental!!!
     // and take the step
     dp += ds * (dist_factor + (t.r - dp.z)*CR) / (iz + CR);
     
	   //	find the new location and height
	   t=texture2D(stepmap,dp.xy);
   }
   
   // back out to where the cone was (remove the w component)
   //*
   ht = (t.r - dp.z);
   dist_factor /= (iz + CR);
   dp -= ds * dist_factor;
   //*/
   // and sample it
   //*
   t=texture2D(stepmap,dp.xy);
   old_ht = t.r - dp.z;
   // linear interpolation
   dp += ds * dist_factor * (1.0 - clamp (ht / (ht - old_ht), 0.0, 1.0));
   //*/
   
   
   // and a nice cone step
   //*
   t=texture2D(stepmap,dp.xy);
   dp += ds * (t.r - dp.z) / (iz/(t.g*t.g) + 1.0);
   //*/
   
   // all done
   return;
} 

// just take 10 steps!
void intersect_square_cone_10step (inout vec3 dp, in vec3 ds)
{
   // the "not Z" component of the direction vector (for a square cone)
   float iz = max(abs(ds.x),abs(ds.y));
   // SOR
   const float w = 1.2;
   // my starting location (is at z=0)
   // texture lookup
   vec4 t;

   //	find the initial location and height
   t=texture2D(stepmap,dp.xy);
   // right, I need to take one step.
   // I use the current height above the texture,
   // and the information about the cone-ratio
   // to size a single step.  So it is fast and 
   // precise!  (like a coneified version of
   // "space leaping", but adapted from voxels)
   dp += ds * w * (t.r - dp.z) / (iz/(t.g*t.g) + 1.0);
   
   // and repeat a few (4) times 
   t=texture2D(stepmap,dp.xy);
   dp += ds * w * (t.r - dp.z) / (iz/(t.g*t.g) + 1.0);
   t=texture2D(stepmap,dp.xy);
   dp += ds * w * (t.r - dp.z) / (iz/(t.g*t.g) + 1.0);
   t=texture2D(stepmap,dp.xy);
   dp += ds * w * (t.r - dp.z) / (iz/(t.g*t.g) + 1.0);
   t=texture2D(stepmap,dp.xy);
   dp += ds * w * (t.r - dp.z) / (iz/(t.g*t.g) + 1.0);
   
   // and another 5 times 
   t=texture2D(stepmap,dp.xy);
   dp += ds * w * (t.r - dp.z) / (iz/(t.g*t.g) + 1.0);
   t=texture2D(stepmap,dp.xy);
   dp += ds * w * (t.r - dp.z) / (iz/(t.g*t.g) + 1.0);
   t=texture2D(stepmap,dp.xy);
   dp += ds * w * (t.r - dp.z) / (iz/(t.g*t.g) + 1.0);
   t=texture2D(stepmap,dp.xy);
   dp += ds * w * (t.r - dp.z) / (iz/(t.g*t.g) + 1.0);
   t=texture2D(stepmap,dp.xy);
   dp += ds * w * (t.r - dp.z) / (iz/(t.g*t.g) + 1.0);
      
   // all done
   return;
}
   </fragmentProgram>

</parallaxMapping>
