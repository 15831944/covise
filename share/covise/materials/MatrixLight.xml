<MatrixLight>
//<uniform name="AllPhotometricLights" type="sampler3D" value="6"/>
//#<uniform name="targetTex" type="sampler2D" value="7"/>

<vertexProgram>
varying vec3 InLightCoordinates;
uniform gl_MaterialParameters gl_FrontMaterial;  
uniform gl_LightSourceParameters gl_LightSource[gl_MaxLights];
varying vec2 Texcoord;
varying vec4 vColor;   // --------------------------------
uniform mat4 coEnvCorrectMatrix;
uniform mat4 coInvEnvCorrectMatrix;
uniform mat4 photometricLightMatrix[4];

vec4 Ambient;
vec4 Diffuse;
vec4 Specular;


void pointLight(in int i, in vec3 normal, in vec3 eye, in vec3 ecPosition3)
{
   float nDotVP;       // normal . light direction
   float nDotHV;       // normal . light half vector
   float pf;           // power factor
   float attenuation;  // computed attenuation factor
   float d;            // distance from surface to light source
   vec3  VP;           // direction from surface to light position
   vec3  halfVector;   // direction of maximum highlights

   // Compute vector from surface to light position
   VP = vec3 (gl_LightSource[i].position) - ecPosition3;

   // Compute distance between surface and light position
   d = length(VP);

   // Normalize the vector from surface to light position
   VP = normalize(VP);

   // Compute attenuation
   attenuation = 1.0 / (gl_LightSource[i].constantAttenuation +
       gl_LightSource[i].linearAttenuation * d +
       gl_LightSource[i].quadraticAttenuation * d * d);

   halfVector = normalize(VP + eye);
   nDotVP = max(0.0, dot(normal, VP));
   nDotHV = max(0.0, dot(normal, halfVector));

   if (nDotVP == 0.0)
   {
       pf = 0.0;
   }
   else
   {
       pf = pow(nDotHV, gl_FrontMaterial.shininess);
   }
   Ambient  += gl_LightSource[i].ambient * attenuation;
   Diffuse  += gl_LightSource[i].diffuse * nDotVP * attenuation;
   Specular += gl_LightSource[i].specular * pf * attenuation;
}


void directionalLight(in int i, in vec3 normal)
{
   float nDotVP;         // normal . light direction
   float nDotHV;         // normal . light half vector
   float pf;             // power factor

   nDotVP = max(0.0, dot(normal, normalize(vec3 (gl_LightSource[i].position))));
   nDotHV = max(0.0, dot(normal, vec3 (gl_LightSource[i].halfVector)));

   if (nDotVP == 0.0)
   {
       pf = 0.0;
   }
   else
   {
       pf = pow(nDotHV, gl_FrontMaterial.shininess);
   }
   Ambient  += gl_LightSource[i].ambient;
   Diffuse  += gl_LightSource[i].diffuse * nDotVP;
   Specular += gl_LightSource[i].specular * pf;
}


vec3 fnormal(void)
{
    //Compute the normal 
    vec3 normal = gl_NormalMatrix * gl_Normal;
    normal = normalize(normal);
    return normal;
}


void flight(in vec3 normal, in vec4 ecPosition, float alphaFade)
{
    vec4 color;
    vec3 ecPosition3;
    vec3 eye;

    ecPosition3 = (vec3 (ecPosition)) / ecPosition.w;
    eye = vec3 (0.0, 0.0, 1.0);

    // Clear the light intensity accumulators
    Ambient  = vec4 (0.0);
    Diffuse  = vec4 (0.0);
    Specular = vec4 (0.0);

    pointLight(0, normal, eye, ecPosition3);
    //pointLight(1, normal, eye, ecPosition3);
    //directionalLight(2, normal);

    color = gl_FrontLightModelProduct.sceneColor +
          Ambient  * gl_FrontMaterial.ambient +
          Diffuse  * gl_FrontMaterial.diffuse;
    color += Specular * gl_FrontMaterial.specular;
    color = clamp(color, 0.0, 1.0);
    gl_FrontColor = color;

    normal = gl_NormalMatrix * gl_Normal;
    gl_FrontColor.a *= alphaFade;
}

void main(void)
{
    Texcoord = gl_MultiTexCoord0.xy;
    #ifdef __GLSL_CG_DATA_TYPES
    gl_ClipVertex = gl_ModelViewMatrix*gl_Vertex;
    #endif

    vec3  transformedNormal;
    float alphaFade = 1.0;

    // Eye-coordinate position of vertex, needed in various calculations
    vec4 ecPosition = gl_ModelViewMatrix * gl_Vertex;

    // Do fixed functionality vertex transform
    gl_Position = ftransform();
    transformedNormal = fnormal();
    flight(transformedNormal, ecPosition, alphaFade);
    vec4 tmp4 = photometricLightMatrix[0]*coEnvCorrectMatrix*gl_ModelViewMatrix*gl_Vertex;
    InLightCoordinates = tmp4.xyz;
    //gl_FrontColor = gl_FrontMaterial.diffuse;
    vColor = gl_FrontColor; //gl_Color;   // --------------------------------
}
</vertexProgram>
<fragmentProgram>
#version 130
varying vec3 InLightCoordinates;
varying vec2 Texcoord;
varying vec4 vColor;   // --------------------------------
uniform mat4 coEnvCorrectMatrix;
uniform mat4 coInvEnvCorrectMatrix;
uniform mat4 photometricLightMatrix[4];
uniform float left;
uniform float bottom;
uniform float width;
uniform float height;
//uniform int num_lights;
//uniform sampler2D IESMap;
uniform sampler3D AllPhotometricLights;
uniform sampler2D targetTex;


ivec2 texSize;
// Function to get a texel data from a texture with GL_NEAREST property.
// Bi-Linear interpolation is implemented in this function with the 
// help of nearest four data.


float smallestperiod(float theta)
{
    // makes sure value is in between -180° and  + 180°
    // takes a value in radians as argument!
    float pi = 3.141592653589793;
    return mod(theta+pi, 2*pi) - pi;
}


void main(void)
{
    vec2 newtc;
    vec3 newtc3;
    vec4 tmp;
    vec4 DiffuseColor;
    float candela = 0.0;
    int num_lights;
    ivec3 texsize;
    texsize = textureSize(AllPhotometricLights, 0);
    num_lights = texsize[2];

    //texSize = textureSize(IESMap, 0);
    // angular range in ies file: -65 to 65 and -15 to 12
    // angular range in ies file: -25 to 25 and -10 to 10
/*
    float left = radians(-25.); 
    float bottom = radians(-10.);
    float width = radians(50.); // radians
    float height = radians(20.); // radians
*/
    float an_h = smallestperiod(atan(InLightCoordinates[2], InLightCoordinates[0]));  // => arctan2
    float an_v = smallestperiod(atan(InLightCoordinates[1], InLightCoordinates[0]));  // => arctan2

    newtc3[0]= (an_h-left)/width;
    newtc3[1]= (an_v-bottom)/height;
    newtc3[2]= 0.;
    newtc[0] = newtc3[0];
    newtc[1] = newtc3[1];
    //int num_lights = 96;
    float half_bin_width = 1./ float (num_lights*2);
    
    if((0.0 &lt; newtc3[0])&amp;&amp;(newtc3[0] &lt; 1.0))
    {    
        if((0.0 &lt; newtc3[1])&amp;&amp;(newtc3[1] &lt; 1.0))
        {
            /*
            //gl_FragColor += vec4 (.2,.2,0.,0.);
            DiffuseColor *= 0.0;
            for (int i = 0; i &lt; num_lights; i++)
            {
                newtc3[2] = float (i) / float (num_lights) + half_bin_width;
                DiffuseColor += texture3D(AllPhotometricLights, newtc3);
                ivec3 itc3;
                itc3[0] = int(newtc3[0]*texsize[0]);
                itc3[1] = int(newtc3[1]*texsize[1]);
                itc3[2] = int(newtc3[2]*texsize[2]);
                candela += texelFetch(AllPhotometricLights, itc3, 0).r; // works
            }
            if((0.1 &lt; newtc3[0])&amp;&amp;(newtc3[0] &lt; .6))
                DiffuseColor = texture2D(targetTex, newtc);
                //DiffuseColor[1] = candela;
            */
            DiffuseColor = vec4(texture2D(targetTex, newtc3.xy).r); // texelFetch(targetTex, itc3).r;
        }
    }
    
    gl_FragColor = DiffuseColor*0.5+ (vColor*0.5);
    gl_FragColor[3] = 1;
    //gl_FragColor = gl_Color;

    }</fragmentProgram></MatrixLight>
    //<     &lt;     
    //>     &gt;     nur problematisch in Tags und bei ']]>'
    //&     &amp;     
    //&& -> &amp;&amp;
    //"     &quot;     nur problematisch in Attributwerten mit "…"
    //'     &apos; 