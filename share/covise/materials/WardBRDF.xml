
<WardBRDF transparent="false" cullFace="back">

  <uniform name="_Color" type="vec3" value="0.8 0.8 0.8"/>
  <uniform name="_SpecColor" type="vec3" value="1 1 1"/>
  
  <uniform name="_AlphaX" type="float" value="0.5"/>
  <uniform name="_AlphaY" type="float" value="0.5"/>

  <uniform name="diffuseMap" type="sampler2D" value="0"/>
  <uniform name="normalMap" type="sampler2D" value="1"/>
  <uniform name="cubeMap" type="samplerCube" value="2"/>

  <attribute name="aBinormal" type="binormal" value="6"/>
  <attribute name="aTangent" type="tangent" value="7"/>

  <vertexProgram>
         // User-specified properties
         uniform vec4 _Color; 
         uniform vec4 _SpecColor; 
         uniform float _AlphaX;
         uniform float _AlphaY;
         
         varying vec4 position; 
            // position of the vertex (and fragment) in world space 
			
         varying vec3 lightDir, eyeVec;
		 
         varying vec3 varyingNormalDirection; 
            // surface normal vector in world space
         varying vec3 varyingTangentDirection; 
            // brush direction in world space

         attribute vec4 aTangent; // tangent vector provided 
         
         void main()
         {				
            //mat4 modelMatrix = _Object2World;
            //mat4 modelMatrixInverse = _World2Object; // unity_Scale.w 
               // is unnecessary because we normalize vectors
            
            position = gl_ModelViewMatrix * gl_Vertex;
			
     	    eyeVec = -position;
         //   varyingNormalDirection = normalize(vec3(
         //      vec4(gl_Normal, 0.0) * modelMatrixInverse));
         //   varyingTangentDirection = normalize(vec3(
         //      modelMatrix * vec4(vec3(Tangent), 0.0)));
			   
        varyingNormalDirection   = gl_NormalMatrix * gl_Normal;
        varyingTangentDirection  = gl_NormalMatrix * aTangent; 
		
     	lightDir = vec3(gl_LightSource[0].position.xyz - position);

	        gl_Position = ftransform();	
         }
  </vertexProgram>

  <fragmentProgram>
   
    
         void main()
         {
            vec3 normalDirection = normalize(varyingNormalDirection);
            vec3 tangentDirection = normalize(varyingTangentDirection);

            vec3 viewDirection = 
               normalize(eyeVec);
			   
               float distance = length(vertexToLightSource);
               attenuation = 1.0 / distance; // linear attenuation 
            vec3 lightDirection = normalize(lightDir);
            float attenuation;

          //  if (0.0 == _WorldSpaceLightPos0.w) // directional light?
          //  {
          //     attenuation = 1.0; // no attenuation
          //     lightDirection = normalize(vec3(_WorldSpaceLightPos0));
          //  } 
          //  else // point or spot light
          //  {
          //     vec3 vertexToLightSource = 
          //        vec3(_WorldSpaceLightPos0 - position);
          //     float distance = length(vertexToLightSource);
          //     attenuation = 1.0 / distance; // linear attenuation 
          //     lightDirection = normalize(vertexToLightSource);
          //  }
            
            vec3 halfwayVector = 
               normalize(lightDirection + viewDirection);
	    vec3 binormalDirection = 
               cross(normalDirection, tangentDirection);
            float dotLN = dot(lightDirection, normalDirection); 
               // compute this dot product only once
            
            vec3 diffuseReflection = attenuation * vec3(_LightColor0) 
               * vec3(_Color) * max(0.0, dotLN);
            
            vec3 specularReflection;
            if (dotLN &lt; 0.0) // light source on the wrong side?
            {
               specularReflection = vec3(0.0, 0.0, 0.0); 
                  // no specular reflection
            }
            else // light source on the right side
            {
               float dotHN = dot(halfwayVector, normalDirection);
               float dotVN = dot(viewDirection, normalDirection);
               float dotHTAlphaX = 
                  dot(halfwayVector, tangentDirection) / _AlphaX;
               float dotHBAlphaY = 
                  dot(halfwayVector, binormalDirection) / _AlphaY;

               specularReflection = attenuation * vec3(_SpecColor) 
                  * sqrt(max(0.0, dotLN / dotVN)) 
                  * exp(-2.0 * (dotHTAlphaX * dotHTAlphaX 
                  + dotHBAlphaY * dotHBAlphaY) / (1.0 + dotHN));
            }

            gl_FragColor = 
               vec4(diffuseReflection + specularReflection, 1.0);
         }
  </fragmentProgram>

</SimpleMirror>
