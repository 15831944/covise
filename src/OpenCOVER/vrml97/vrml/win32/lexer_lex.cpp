/* This file is part of COVISE.

   You can use it under the terms of the GNU Lesser General Public License
   version 2.1 or later, see lgpl-2.1.txt.

 * License: LGPL 2+ */


#line 3 "lex.lexer.c"

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer lexer_create_buffer
#define yy_delete_buffer lexer_delete_buffer
#define yy_flex_debug lexer_flex_debug
#define yy_init_buffer lexer_init_buffer
#define yy_flush_buffer lexer_flush_buffer
#define yy_load_buffer_state lexer_load_buffer_state
#define yy_switch_to_buffer lexer_switch_to_buffer
#define yyin lexerin
#define yyleng lexerleng
#define yylex lexerlex
#define yylineno lexerlineno
#define yyout lexerout
#define yyrestart lexerrestart
#define yytext lexertext
#define yywrap lexerwrap
#define yyalloc lexeralloc
#define yyrealloc lexerrealloc
#define yyfree lexerfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 34
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
#ifdef MINGW
#include <io.h> // for "isatty"
#endif

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined(__STDC__)

#define YY_USE_CONST

#endif /* defined (__STDC__) */
#endif /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int)(unsigned char)c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start)-1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE lexerrestart(lexerin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int lexerleng;

extern FILE *lexerin, *lexerout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                                               \
    do                                                                                          \
    {                                                                                           \
        /* Undo effects of setting up lexertext. */                                             \
        int yyless_macro_arg = (n);                                                             \
        YY_LESS_LINENO(yyless_macro_arg);                                                       \
        *yy_cp = (yy_hold_char);                                                                \
        YY_RESTORE_YY_MORE_OFFSET(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up lexertext again */                                       \
    } while (0)

#define unput(c) yyunput(c, (yytext_ptr))

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 * Given that the standard has decreed that size_t exists since 1989,
 * I guess we can afford to depend on it. Manoj.
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
    FILE *yy_input_file;

    char *yy_ch_buf; /* input buffer */
    char *yy_buf_pos; /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
    int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

    /* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
    int yy_fill_buffer;

    int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via lexerrestart()), so that the user can continue scanning by
	 * just pointing lexerin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE *yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ((yy_buffer_stack)                              \
                               ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                               : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when lexertext is formed. */
static char yy_hold_char;
static int yy_n_chars; /* number of characters read into yy_ch_buf */
int lexerleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *)0;
static int yy_init = 0; /* whether we need to initialize */
static int yy_start = 0; /* start state number */

/* Flag which is used to allow lexerwrap()'s to do buffer switches
 * instead of setting up a fresh lexerin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void lexerrestart(FILE *input_file);
void lexer_switch_to_buffer(YY_BUFFER_STATE new_buffer);
YY_BUFFER_STATE lexer_create_buffer(FILE *file, int size);
void lexer_delete_buffer(YY_BUFFER_STATE b);
void lexer_flush_buffer(YY_BUFFER_STATE b);
void lexerpush_buffer_state(YY_BUFFER_STATE new_buffer);
void lexerpop_buffer_state(void);

static void lexerensure_buffer_stack(void);
static void lexer_load_buffer_state(void);
static void lexer_init_buffer(YY_BUFFER_STATE b, FILE *file);

#define YY_FLUSH_BUFFER lexer_flush_buffer(YY_CURRENT_BUFFER)

YY_BUFFER_STATE lexer_scan_buffer(char *base, yy_size_t size);
YY_BUFFER_STATE lexer_scan_string(yyconst char *yy_str);
YY_BUFFER_STATE lexer_scan_bytes(yyconst char *bytes, int len);

void *lexeralloc(yy_size_t);
void *lexerrealloc(void *, yy_size_t);
void lexerfree(void *);

#define yy_new_buffer lexer_create_buffer

#define yy_set_interactive(is_interactive)                                        \
    {                                                                             \
        if (!YY_CURRENT_BUFFER)                                                   \
        {                                                                         \
            lexerensure_buffer_stack();                                           \
            YY_CURRENT_BUFFER_LVALUE = lexer_create_buffer(lexerin, YY_BUF_SIZE); \
        }                                                                         \
        YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive;             \
    }

#define yy_set_bol(at_bol)                                                        \
    {                                                                             \
        if (!YY_CURRENT_BUFFER)                                                   \
        {                                                                         \
            lexerensure_buffer_stack();                                           \
            YY_CURRENT_BUFFER_LVALUE = lexer_create_buffer(lexerin, YY_BUF_SIZE); \
        }                                                                         \
        YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;                             \
    }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *lexerin = (FILE *)0, *lexerout = (FILE *)0;

typedef int yy_state_type;

extern int lexerlineno;

int lexerlineno = 1;

extern char *lexertext;
#define yytext_ptr lexertext

static yy_state_type yy_get_previous_state(void);
static yy_state_type yy_try_NUL_trans(yy_state_type current_state);
static int yy_get_next_buffer(void);
static void yy_fatal_error(yyconst char msg[]);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up lexertext.
 */
#define YY_DO_BEFORE_ACTION              \
    (yytext_ptr) = yy_bp;                \
    lexerleng = (size_t)(yy_cp - yy_bp); \
    (yy_hold_char) = *yy_cp;             \
    *yy_cp = '\0';                       \
    (yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 53
#define YY_END_OF_BUFFER 54
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
    flex_int32_t yy_verify;
    flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[1027] = { 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 54, 52, 50, 51, 50, 14,
                                                50, 14, 14, 14, 14, 14, 14, 14, 14, 14,
                                                14, 52, 52, 52, 52, 52, 52, 52, 52, 23,
                                                52, 52, 52, 52, 21, 21, 52, 52, 52, 36,
                                                34, 36, 36, 52, 52, 33, 52, 52, 52, 52,
                                                52, 52, 52, 52, 52, 52, 17, 18, 52, 52,

                                                24, 52, 22, 22, 52, 52, 52, 37, 35, 37,
                                                37, 52, 52, 52, 52, 52, 52, 45, 44, 46,
                                                52, 47, 52, 49, 49, 50, 51, 50, 51, 51,
                                                50, 50, 50, 50, 14, 14, 14, 7, 14, 14,
                                                14, 6, 14, 14, 14, 14, 0, 15, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 23, 23, 23,
                                                0, 0, 0, 0, 0, 21, 21, 0, 0, 0,
                                                0, 0, 0, 0, 36, 36, 36, 15, 0, 33,
                                                33, 33, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

                                                0, 0, 0, 0, 16, 0, 24, 24, 24, 0,
                                                22, 22, 0, 0, 0, 0, 0, 0, 0, 37,
                                                37, 37, 16, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 45, 38, 43,
                                                39, 40, 41, 42, 49, 49, 51, 51, 51, 50,
                                                4, 14, 14, 14, 14, 5, 14, 14, 14, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 21, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 33, 0, 0,

                                                25, 0, 0, 0, 0, 0, 25, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 24, 22, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 26, 0, 0,
                                                0, 0, 0, 26, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 49, 50, 14,
                                                9, 14, 14, 14, 14, 14, 0, 20, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

                                                0, 0, 0, 0, 0, 25, 25, 0, 25, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                26, 26, 0, 26, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 50, 14, 2, 8, 14,
                                                14, 12, 19, 0, 0, 31, 0, 0, 0, 0,
                                                0, 31, 0, 0, 0, 0, 31, 0, 0, 0,
                                                31, 0, 0, 0, 0, 0, 31, 0, 0, 0,
                                                48, 48, 0, 0, 0, 0, 48, 48, 0, 0,

                                                48, 48, 0, 0, 48, 48, 0, 0, 0, 0,
                                                48, 48, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 25, 0, 25, 0, 0, 27, 0, 0,
                                                0, 0, 0, 27, 0, 0, 0, 0, 27, 0,
                                                0, 0, 27, 0, 0, 0, 0, 0, 27, 0,
                                                0, 0, 0, 32, 0, 0, 0, 0, 0, 32,
                                                0, 0, 0, 0, 32, 0, 0, 0, 32, 0,
                                                0, 0, 0, 0, 32, 0, 0, 0, 0, 0,

                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 26, 0, 26, 0, 0, 28,
                                                0, 0, 0, 0, 0, 28, 0, 0, 0, 0,
                                                28, 0, 0, 0, 28, 0, 0, 0, 0, 0,
                                                28, 0, 0, 50, 14, 14, 14, 14, 31, 31,
                                                0, 31, 0, 31, 31, 0, 31, 31, 0, 31,
                                                0, 48, 48, 48, 48, 48, 48, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

                                                0, 27, 27, 0, 27, 0, 27, 27, 0, 27,
                                                27, 0, 27, 0, 32, 32, 0, 32, 0, 32,
                                                32, 0, 32, 32, 0, 32, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                0, 28, 28, 0, 28, 0, 28, 28, 0, 28,
                                                28, 0, 28, 0, 50, 14, 10, 14, 14, 0,
                                                31, 0, 31, 0, 31, 0, 31, 0, 31, 48,
                                                48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
                                                0, 0, 29, 0, 0, 0, 0, 0, 29, 0,

                                                0, 0, 0, 29, 0, 0, 29, 0, 0, 0,
                                                0, 0, 29, 0, 0, 0, 0, 29, 0, 0,
                                                0, 29, 0, 0, 0, 0, 0, 29, 0, 0,
                                                0, 0, 0, 0, 29, 0, 0, 0, 27, 0,
                                                27, 0, 27, 0, 27, 0, 27, 0, 32, 0,
                                                32, 0, 32, 0, 32, 0, 32, 0, 0, 30,
                                                0, 0, 0, 0, 0, 30, 0, 0, 0, 0,
                                                30, 0, 0, 30, 0, 0, 0, 0, 0, 30,
                                                0, 0, 0, 0, 30, 0, 0, 0, 30, 0,
                                                0, 0, 0, 0, 30, 0, 0, 0, 0, 0,

                                                0, 30, 0, 0, 0, 28, 0, 28, 0, 28,
                                                0, 28, 0, 28, 50, 14, 11, 14, 29, 29,
                                                0, 29, 0, 29, 29, 0, 29, 29, 0, 29,
                                                0, 29, 29, 0, 29, 29, 0, 29, 0, 29,
                                                29, 0, 30, 30, 0, 30, 0, 30, 30, 0,
                                                30, 30, 0, 30, 0, 30, 30, 0, 30, 30,
                                                0, 30, 0, 30, 30, 0, 50, 14, 14, 0,
                                                29, 0, 29, 0, 29, 0, 29, 0, 29, 0,
                                                29, 0, 29, 0, 29, 0, 29, 0, 30, 0,
                                                30, 0, 30, 0, 30, 0, 30, 0, 30, 0,

                                                30, 0, 30, 0, 30, 50, 14, 14, 50, 3,
                                                14, 50, 13, 50, 50, 50, 50, 50, 1, 50,
                                                1, 1, 1, 1, 1, 0 };

static yyconst flex_int32_t yy_ec[256] = { 0,
                                           1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
                                           1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
                                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                           1, 4, 5, 6, 7, 5, 5, 5, 8, 5,
                                           5, 5, 9, 2, 9, 10, 5, 11, 12, 13,
                                           12, 12, 12, 12, 12, 14, 12, 5, 5, 5,
                                           5, 5, 5, 5, 15, 16, 16, 17, 18, 19,
                                           5, 5, 20, 5, 5, 21, 22, 23, 24, 25,
                                           5, 26, 27, 28, 29, 30, 5, 31, 5, 5,
                                           32, 33, 34, 5, 5, 5, 16, 16, 16, 35,

                                           36, 37, 5, 5, 38, 5, 5, 39, 5, 40,
                                           41, 42, 5, 43, 44, 45, 46, 47, 5, 48,
                                           5, 5, 1, 5, 1, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5,

                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                           5, 5, 5, 5, 5 };

static yyconst flex_int32_t yy_meta[49] = { 0,
                                            1, 2, 3, 2, 4, 5, 6, 1, 4, 1,
                                            7, 7, 7, 7, 7, 7, 7, 7, 7, 4,
                                            4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                            4, 8, 9, 8, 7, 7, 7, 4, 4, 4,
                                            4, 4, 4, 4, 4, 4, 4, 4 };

static yyconst flex_int16_t yy_base[1189] = { 0,
                                              0, 6, 13, 0, 60, 66, 93, 0, 105, 111,
                                              117, 123, 129, 135, 141, 147, 160, 166, 165, 178,
                                              184, 190, 196, 202, 208, 234, 260, 286, 312, 338,
                                              364, 390, 423, 456, 482, 508, 534, 560, 68, 75,
                                              220, 224, 273, 299, 726, 10105, 80, 227, 234, 0,
                                              248, 707, 687, 688, 681, 678, 666, 660, 654, 18,
                                              642, 660, 647, 646, 79, 98, 593, 171, 247, 317,
                                              264, 628, 201, 277, 349, 290, 326, 303, 675, 0,
                                              10105, 362, 644, 375, 343, 395, 380, 403, 710, 422,
                                              407, 745, 427, 433, 780, 639, 10105, 10105, 438, 453,

                                              461, 469, 493, 473, 498, 487, 815, 0, 10105, 523,
                                              638, 521, 525, 850, 539, 547, 885, 0, 10105, 10105,
                                              569, 10105, 551, 570, 574, 613, 606, 619, 641, 642,
                                              648, 654, 660, 666, 0, 641, 625, 0, 626, 614,
                                              608, 0, 616, 597, 585, 589, 603, 10105, 590, 683,
                                              0, 688, 920, 933, 0, 694, 718, 724, 753, 761,
                                              790, 0, 946, 959, 737, 794, 0, 798, 0, 824,
                                              972, 985, 0, 830, 0, 843, 863, 0, 860, 865,
                                              902, 989, 893, 897, 0, 998, 1024, 1037, 0, 1004,
                                              1008, 0, 1042, 1055, 1068, 0, 1074, 1078, 0, 1083,

                                              1096, 1109, 0, 1115, 10105, 1119, 1124, 1132, 1140, 1150,
                                              1158, 0, 1166, 0, 1171, 1184, 1197, 0, 1203, 0,
                                              1216, 1222, 0, 1219, 0, 1224, 1255, 1268, 0, 1230,
                                              1272, 1285, 1294, 1320, 1333, 0, 1300, 0, 10105, 10105,
                                              10105, 10105, 10105, 10105, 1304, 0, 878, 1245, 1346, 1352,
                                              0, 581, 577, 563, 562, 0, 549, 538, 539, 540,
                                              538, 1350, 1354, 1373, 1408, 1421, 0, 0, 0, 1390,
                                              1358, 1434, 1390, 1438, 1442, 1455, 208, 1502, 1515, 1528,
                                              1541, 1554, 231, 1468, 0, 1466, 1470, 1601, 1636, 1649,
                                              0, 0, 0, 1489, 1476, 1662, 1558, 1562, 1567, 1575,

                                              1580, 1675, 1688, 0, 0, 0, 323, 1609, 1701, 1614,
                                              1618, 1714, 1749, 1762, 0, 0, 0, 1731, 1622, 1775,
                                              1732, 1779, 1792, 1827, 1840, 0, 0, 0, 1809, 1809,
                                              1853, 1857, 1861, 0, 1866, 1870, 1883, 1918, 1931, 0,
                                              0, 0, 1900, 1900, 1944, 1949, 1953, 1958, 1993, 0,
                                              0, 0, 0, 618, 1966, 2006, 1971, 1975, 2019, 2054,
                                              0, 0, 0, 0, 2036, 1979, 2071, 0, 2084, 497,
                                              0, 491, 495, 458, 445, 442, 451, 10105, 2037, 2104,
                                              2117, 0, 2081, 2130, 2143, 2156, 2162, 2197, 2210, 2223,
                                              1593, 2236, 2249, 2262, 2275, 2311, 2346, 2359, 0, 2087,

                                              2372, 2385, 2398, 2411, 2446, 2179, 2284, 2170, 2459, 2494,
                                              2507, 2542, 2555, 0, 2292, 2568, 2581, 2594, 2607, 2642,
                                              2655, 2690, 2703, 0, 2319, 2716, 2729, 2742, 2755, 2790,
                                              2803, 2838, 2851, 0, 2325, 2864, 2877, 2890, 2903, 2938,
                                              2428, 2476, 2331, 2951, 2986, 2999, 3034, 3047, 0, 2419,
                                              3060, 3073, 3086, 3099, 3134, 2472, 445, 0, 0, 52,
                                              420, 0, 10105, 2175, 2423, 2524, 3147, 3160, 0, 0,
                                              0, 673, 2469, 3173, 3186, 3199, 3212, 3247, 2516, 2615,
                                              3260, 3295, 0, 0, 0, 0, 709, 2619, 2624, 2663,
                                              2764, 2667, 3308, 3321, 3334, 3347, 3360, 364, 2680, 3407,

                                              3420, 380, 3467, 2768, 3480, 422, 3527, 3540, 3553, 3566,
                                              3579, 430, 3617, 545, 685, 2773, 2811, 3664, 3699, 3712,
                                              0, 0, 0, 2920, 2815, 3725, 3738, 3751, 3764, 3799,
                                              2820, 2824, 3812, 3847, 0, 0, 0, 0, 2968, 2920,
                                              3860, 2968, 3007, 3895, 3908, 3012, 3016, 3116, 3943, 3956,
                                              0, 0, 0, 733, 3020, 3969, 3982, 3995, 4008, 4043,
                                              3108, 3220, 4056, 4091, 0, 0, 0, 0, 744, 3224,
                                              3229, 3269, 3273, 3365, 4104, 4117, 0, 0, 0, 760,
                                              3277, 4130, 4143, 4156, 4169, 4204, 3374, 3281, 4217, 4252,
                                              0, 0, 0, 0, 822, 3381, 3425, 3386, 3391, 4265,

                                              4300, 4313, 0, 0, 0, 3496, 3433, 4326, 4339, 4352,
                                              4365, 4400, 3442, 3446, 4413, 4448, 0, 0, 0, 0,
                                              3601, 3451, 4461, 3496, 3504, 4496, 4509, 3509, 3513, 3584,
                                              4544, 4557, 0, 0, 0, 996, 3601, 4570, 4583, 4596,
                                              4609, 4644, 3611, 3627, 4657, 4692, 0, 0, 0, 0,
                                              1066, 3631, 3645, 3687, 429, 402, 377, 348, 3781, 3829,
                                              3674, 4705, 4740, 4753, 4788, 4823, 4836, 0, 3684, 4871,
                                              4906, 0, 4919, 4955, 5002, 3777, 5038, 5074, 5109, 5122,
                                              0, 3774, 5135, 5148, 5161, 5174, 5209, 5222, 5257, 5270,
                                              5283, 5289, 5324, 5337, 5372, 0, 3820, 5385, 5398, 5411,

                                              5446, 3877, 3925, 3868, 5459, 5494, 5507, 5542, 5577, 5590,
                                              0, 3916, 5625, 5660, 4025, 4073, 4016, 5673, 5708, 5721,
                                              5756, 5791, 5804, 0, 4064, 5839, 5874, 5887, 5922, 5935,
                                              0, 4177, 5948, 5961, 5974, 5987, 6022, 6035, 6070, 6083,
                                              6096, 6102, 6137, 6150, 6185, 0, 4183, 6198, 6211, 6224,
                                              6259, 4234, 4282, 4189, 6272, 6307, 6320, 6355, 6390, 6403,
                                              0, 4225, 6438, 6473, 4278, 356, 0, 336, 360, 3824,
                                              3872, 6486, 6499, 6534, 6547, 3920, 6582, 6595, 6608, 0,
                                              6643, 6690, 0, 6726, 6773, 0, 4285, 6809, 6856, 0,
                                              4021, 4068, 4382, 6892, 6905, 0, 0, 0, 1129, 4229,

                                              6918, 6931, 6944, 6957, 4374, 4421, 6992, 7027, 7040, 0,
                                              0, 0, 1130, 4425, 4430, 7053, 7066, 7079, 7114, 4470,
                                              4474, 7127, 7162, 0, 0, 0, 0, 1131, 4478, 4526,
                                              4482, 7175, 7188, 7201, 7214, 4517, 4626, 4521, 4617, 7249,
                                              7262, 7297, 7310, 4621, 7345, 7358, 7371, 4665, 4669, 7406,
                                              7419, 7454, 7467, 4673, 7502, 7515, 7528, 4678, 4713, 4722,
                                              7563, 7576, 0, 0, 0, 1283, 4717, 7589, 7602, 7615,
                                              7628, 4762, 4766, 7663, 7698, 7711, 0, 0, 0, 1284,
                                              4770, 4805, 7724, 7737, 7750, 7785, 4797, 4774, 7798, 7833,
                                              0, 0, 0, 0, 1363, 4844, 4850, 4879, 7846, 7859,

                                              7872, 7885, 4883, 4888, 4928, 4932, 7920, 7933, 7968, 7981,
                                              4936, 8016, 8029, 8042, 4968, 347, 0, 329, 4971, 5012,
                                              4979, 8077, 8112, 8125, 8160, 8195, 8208, 0, 4985, 8243,
                                              8278, 8291, 8326, 8361, 8374, 0, 5020, 8409, 8444, 8457,
                                              8492, 8527, 5047, 5091, 5055, 8540, 8575, 5083, 5183, 5189,
                                              8588, 0, 5195, 8623, 8658, 5231, 5236, 5242, 8671, 0,
                                              5297, 245, 5303, 5308, 5346, 5352, 5424, 317, 307, 5087,
                                              5356, 333, 1380, 325, 5428, 5467, 8706, 298, 1701, 296,
                                              5476, 5471, 8719, 258, 1721, 256, 5521, 5515, 5550, 226,
                                              1799, 5554, 5559, 5598, 8732, 224, 1890, 5602, 5642, 5606,

                                              8745, 5610, 5690, 5633, 5735, 4863, 201, 185, 5430, 0,
                                              136, 5691, 0, 5748, 5534, 5773, 5779, 5817, 1493, 5823,
                                              4972, 5736, 5827, 5831, 5852, 10105, 8759, 8768, 8777, 8786,
                                              8795, 8801, 8808, 8817, 8826, 8835, 8844, 8852, 8861, 8870,
                                              8878, 158, 8885, 8894, 8903, 8912, 92, 8921, 8930, 8939,
                                              8948, 91, 8956, 8965, 8971, 8978, 8987, 8995, 70, 9002,
                                              9011, 9020, 9029, 68, 9038, 9047, 9056, 9065, 9073, 9080,
                                              9089, 9098, 9107, 9116, 9125, 9134, 9143, 9152, 9161, 9170,
                                              9179, 9188, 9197, 9206, 9215, 9224, 9233, 9242, 9251, 9257,
                                              9264, 9273, 9282, 9291, 9299, 9306, 9315, 9324, 9333, 9342,

                                              9351, 9360, 9369, 9378, 9387, 9396, 9405, 9414, 9423, 9432,
                                              9441, 9450, 9459, 9468, 9477, 9483, 9490, 9499, 9508, 5,
                                              9517, 9526, 9534, 9541, 9550, 9559, 9568, 9577, 9586, 9595,
                                              9604, 9613, 9622, 9631, 9640, 9649, 9658, 9667, 9676, 9685,
                                              9694, 9703, 9712, 9721, 9730, 9739, 9745, 9752, 9761, 9770,
                                              4, 9779, 9788, 9796, 9803, 9812, 9821, 9830, 9839, 9848,
                                              9857, 9866, 9875, 9884, 9893, 9902, 9911, 9920, 9929, 9938,
                                              9947, 9956, 9965, 9974, 9983, 9992, 10001, 10007, 10014, 10023,
                                              10032, 10041, 10050, 10059, 10068, 10077, 10086, 10095 };

static yyconst flex_int16_t yy_def[1189] = { 0,
                                             1027, 1027, 1026, 3, 1027, 1027, 1027, 7, 7, 7,
                                             7, 7, 7, 7, 7, 7, 1028, 1028, 7, 7,
                                             7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                                             7, 7, 1029, 1029, 7, 7, 7, 7, 1030, 1030,
                                             1030, 1030, 7, 7, 1026, 1026, 1026, 1026, 1031, 1032,
                                             1031, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
                                             1032, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 72, 1026, 1026, 1026, 1026, 1026, 1026, 1033,
                                             1026, 1034, 1033, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1035, 1026, 1036,
                                             1035, 1026, 1026, 1026, 1026, 1026, 1026, 1037, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1031, 1026, 1038,
                                             1031, 1031, 1031, 1031, 1032, 1032, 1032, 1032, 1032, 1032,
                                             1032, 1032, 1032, 1032, 1032, 1032, 1026, 1026, 1026, 1026,
                                             67, 67, 1026, 1039, 152, 1026, 1026, 1026, 1026, 1026,
                                             1026, 73, 1026, 1040, 1041, 1026, 1042, 1026, 79, 79,
                                             1026, 1043, 170, 1026, 1033, 1034, 1034, 1033, 1026, 1026,
                                             1026, 1026, 1026, 1026, 89, 89, 1026, 1044, 186, 1026,
                                             1026, 92, 92, 1026, 1045, 193, 1026, 1026, 95, 95,

                                             1026, 1046, 200, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1047, 1026, 107, 107, 1026, 1048, 215, 1026, 1035,
                                             1036, 1036, 1035, 1026, 114, 114, 1026, 1049, 226, 1026,
                                             1026, 1026, 232, 1026, 1050, 233, 1026, 1051, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1052, 1053, 1053, 1053, 1054,
                                             1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1026,
                                             1026, 1026, 1026, 1026, 1056, 1056, 266, 266, 266, 266,
                                             1026, 1026, 1026, 1026, 1026, 1026, 276, 1057, 1057, 1057,
                                             1057, 1057, 282, 1058, 1059, 1026, 1026, 1026, 1060, 1060,
                                             290, 290, 290, 290, 1026, 1026, 1026, 1026, 1026, 1026,

                                             1026, 1061, 1061, 303, 303, 303, 303, 1026, 1026, 1026,
                                             1026, 1026, 1062, 1062, 314, 314, 314, 314, 1026, 1026,
                                             1026, 1026, 1026, 1063, 1063, 325, 325, 325, 325, 1026,
                                             1026, 1026, 1026, 1064, 1026, 1026, 1026, 1065, 1065, 339,
                                             339, 339, 339, 1026, 1026, 1026, 1026, 1026, 1049, 349,
                                             349, 349, 349, 349, 1026, 1026, 1026, 1026, 1026, 1050,
                                             360, 360, 360, 360, 360, 1026, 1026, 1052, 1054, 1055,
                                             1055, 1055, 1055, 1055, 1055, 1055, 1026, 1026, 264, 1026,
                                             1066, 379, 1026, 266, 1026, 1067, 384, 384, 1026, 1068,
                                             1069, 1070, 1026, 1071, 1070, 1026, 1026, 1072, 396, 1026,

                                             1073, 1026, 1074, 1073, 1073, 1026, 1026, 1026, 1075, 1075,
                                             1026, 1026, 1076, 411, 1026, 1077, 1026, 1078, 1077, 1077,
                                             1026, 1026, 1079, 421, 1026, 1080, 1026, 1081, 1080, 1080,
                                             1026, 1026, 1082, 431, 1026, 1083, 1026, 1084, 1083, 1083,
                                             1026, 1026, 1026, 1085, 1085, 1026, 1026, 1086, 446, 1026,
                                             1087, 1026, 1088, 1087, 1087, 1089, 1090, 1090, 1090, 1090,
                                             1090, 1090, 1026, 1026, 1026, 1026, 1091, 1091, 468, 468,
                                             468, 468, 1026, 1026, 1092, 1092, 476, 1093, 1026, 1026,
                                             1026, 1093, 482, 482, 482, 482, 482, 476, 477, 1026,
                                             1026, 1026, 1094, 1094, 1094, 1094, 1094, 497, 1095, 1096,

                                             1096, 501, 1097, 1026, 1026, 505, 1097, 1097, 1097, 1097,
                                             1097, 511, 501, 513, 513, 1026, 1026, 1026, 1098, 1098,
                                             520, 520, 520, 520, 1026, 1026, 1099, 1099, 528, 1100,
                                             1026, 1026, 1026, 1100, 534, 534, 534, 534, 534, 528,
                                             528, 1026, 1026, 1101, 1101, 1026, 1026, 1026, 1102, 1102,
                                             550, 550, 550, 550, 1026, 1026, 1103, 1103, 558, 1104,
                                             1026, 1026, 1026, 1104, 564, 564, 564, 564, 564, 558,
                                             559, 1026, 1026, 1026, 1105, 1105, 576, 576, 576, 576,
                                             1026, 1026, 1106, 1106, 584, 1107, 1026, 1026, 1026, 1107,
                                             590, 590, 590, 590, 590, 584, 585, 1026, 1026, 1026,

                                             1108, 1108, 602, 602, 602, 602, 1026, 1026, 1109, 1109,
                                             610, 1110, 1026, 1026, 1026, 1110, 616, 616, 616, 616,
                                             616, 610, 610, 1026, 1026, 1111, 1111, 1026, 1026, 1026,
                                             1112, 1112, 632, 632, 632, 632, 1026, 1026, 1113, 1113,
                                             640, 1114, 1026, 1026, 1026, 1114, 646, 646, 646, 646,
                                             646, 640, 641, 1115, 1116, 1116, 1116, 1116, 1026, 1026,
                                             1026, 1117, 1117, 1118, 1118, 1118, 1026, 667, 1026, 1119,
                                             1119, 1120, 1121, 1122, 1122, 1123, 1124, 1026, 1026, 1125,
                                             678, 1026, 1126, 1026, 1127, 1126, 1126, 1128, 1128, 1026,
                                             1129, 689, 689, 1026, 1127, 694, 1026, 1130, 1129, 1130,

                                             1130, 1026, 1026, 1026, 1131, 1131, 1132, 1132, 1132, 1026,
                                             710, 1026, 1133, 1133, 1026, 1026, 1026, 1134, 1134, 1135,
                                             1135, 1135, 1026, 723, 1026, 1136, 1136, 1026, 1026, 1137,
                                             728, 1026, 1138, 1026, 1139, 1138, 1138, 1140, 1140, 1026,
                                             1141, 739, 739, 1026, 1139, 744, 1026, 1142, 1141, 1142,
                                             1142, 1026, 1026, 1026, 1143, 1143, 1144, 1144, 1144, 1026,
                                             760, 1026, 1145, 1145, 1146, 1147, 1147, 1147, 1147, 1026,
                                             1026, 1148, 1148, 1149, 1149, 1026, 1026, 1150, 1150, 1151,
                                             1152, 1152, 782, 1153, 1153, 785, 1154, 1155, 1155, 789,
                                             1026, 1026, 1026, 1156, 1156, 795, 795, 795, 795, 1026,

                                             1026, 1157, 1157, 803, 1026, 1026, 1026, 1158, 1158, 809,
                                             809, 809, 809, 803, 804, 1159, 1159, 817, 1160, 1026,
                                             1026, 1026, 1160, 823, 823, 823, 823, 823, 817, 818,
                                             1026, 1026, 1161, 1161, 834, 834, 835, 1026, 1026, 1162,
                                             1162, 1163, 1163, 1026, 1026, 1164, 1164, 1026, 1026, 1165,
                                             1165, 1166, 1166, 1026, 1026, 1167, 1167, 1026, 1026, 1026,
                                             1168, 1168, 862, 862, 862, 862, 1026, 1026, 1169, 1169,
                                             870, 1026, 1026, 1026, 1170, 1170, 876, 876, 876, 876,
                                             870, 871, 1171, 1171, 884, 1172, 1026, 1026, 1026, 1172,
                                             890, 890, 890, 890, 890, 884, 885, 1026, 1026, 1173,

                                             1173, 901, 901, 902, 1026, 1026, 1174, 1174, 1175, 1175,
                                             1026, 1026, 1176, 1176, 1177, 1178, 1178, 1178, 1026, 1026,
                                             1026, 1179, 1179, 1180, 1180, 1180, 1026, 927, 1026, 1181,
                                             1181, 1182, 1182, 1182, 1026, 935, 1026, 1183, 1183, 1184,
                                             1184, 1184, 1026, 1026, 1026, 1185, 1185, 871, 871, 870,
                                             1026, 951, 1026, 1186, 1186, 885, 885, 884, 1026, 959,
                                             1026, 890, 890, 902, 902, 901, 1177, 1178, 1178, 1026,
                                             1026, 923, 923, 926, 925, 1026, 1026, 931, 931, 934,
                                             933, 1026, 1026, 939, 939, 942, 941, 1026, 1026, 947,
                                             947, 870, 871, 1026, 1026, 955, 955, 884, 885, 1026,

                                             1026, 890, 890, 901, 902, 1177, 1178, 1178, 1177, 1178,
                                             1178, 1177, 1178, 1177, 1177, 1187, 1187, 1187, 1026, 1187,
                                             1026, 1188, 1188, 1188, 1188, 0, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                             1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026 };

static yyconst flex_int16_t yy_nxt[10154] = { 0,
                                              1026, 47, 48, 47, 1026, 1026, 49, 47, 48, 47,
                                              780, 780, 49, 46, 47, 48, 47, 50, 46, 51,
                                              46, 46, 46, 46, 46, 46, 46, 50, 50, 52,
                                              53, 50, 54, 50, 50, 55, 50, 56, 57, 50,
                                              58, 59, 50, 50, 46, 46, 46, 50, 60, 61,
                                              50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
                                              50, 47, 48, 47, 144, 145, 51, 47, 48, 47,
                                              119, 656, 51, 120, 334, 657, 285, 119, 62, 63,
                                              120, 126, 127, 126, 62, 63, 128, 64, 150, 151,
                                              151, 151, 151, 64, 47, 48, 47, 368, 334, 51,

                                              121, 65, 66, 67, 67, 67, 67, 121, 152, 152,
                                              152, 152, 63, 68, 69, 70, 70, 70, 70, 68,
                                              69, 70, 70, 70, 70, 71, 46, 72, 73, 73,
                                              73, 71, 46, 72, 73, 73, 73, 74, 46, 75,
                                              76, 76, 76, 74, 46, 75, 76, 76, 76, 77,
                                              78, 79, 79, 79, 79, 77, 78, 79, 79, 79,
                                              79, 47, 48, 47, 285, 81, 82, 47, 48, 47,
                                              1013, 81, 82, 84, 85, 86, 86, 86, 86, 83,
                                              157, 158, 158, 158, 158, 83, 84, 85, 86, 86,
                                              86, 86, 87, 88, 89, 89, 89, 89, 87, 88,

                                              89, 89, 89, 89, 90, 91, 92, 92, 92, 92,
                                              90, 91, 92, 92, 92, 92, 93, 94, 95, 95,
                                              95, 95, 119, 1011, 1010, 122, 119, 96, 129, 122,
                                              129, 1026, 878, 130, 864, 132, 127, 132, 1026, 97,
                                              133, 98, 93, 94, 95, 95, 95, 95, 1026, 132,
                                              127, 132, 121, 96, 133, 1026, 121, 159, 159, 159,
                                              159, 278, 963, 134, 537, 97, 826, 98, 99, 100,
                                              101, 101, 101, 101, 162, 162, 162, 162, 278, 96,
                                              963, 123, 46, 124, 125, 125, 125, 166, 166, 166,
                                              166, 97, 46, 98, 99, 100, 101, 101, 101, 101,

                                              166, 166, 166, 166, 292, 96, 811, 123, 46, 124,
                                              125, 125, 125, 170, 170, 170, 170, 97, 46, 98,
                                              102, 46, 103, 104, 104, 104, 160, 158, 158, 158,
                                              158, 96, 409, 522, 161, 168, 169, 169, 169, 169,
                                              410, 797, 1008, 97, 1007, 98, 102, 46, 103, 104,
                                              104, 104, 161, 181, 181, 181, 181, 96, 410, 166,
                                              166, 166, 166, 132, 127, 132, 969, 131, 177, 97,
                                              968, 98, 105, 106, 107, 107, 107, 107, 918, 167,
                                              917, 916, 769, 96, 179, 180, 180, 180, 180, 184,
                                              185, 185, 185, 185, 493, 97, 167, 98, 105, 106,

                                              107, 107, 107, 107, 182, 180, 180, 180, 180, 96,
                                              278, 493, 183, 186, 186, 186, 186, 193, 193, 193,
                                              193, 97, 768, 98, 47, 48, 47, 278, 109, 110,
                                              183, 191, 192, 192, 192, 192, 198, 199, 199, 199,
                                              199, 767, 111, 200, 200, 200, 200, 206, 207, 207,
                                              207, 207, 1026, 766, 97, 658, 98, 47, 48, 47,
                                              507, 109, 110, 208, 208, 208, 208, 655, 463, 1026,
                                              209, 207, 207, 207, 207, 111, 462, 507, 210, 211,
                                              211, 211, 211, 211, 211, 211, 211, 97, 461, 98,
                                              112, 113, 114, 114, 114, 114, 210, 215, 215, 215,

                                              215, 96, 460, 211, 211, 211, 211, 213, 214, 214,
                                              214, 214, 459, 97, 458, 98, 112, 113, 114, 114,
                                              114, 114, 457, 212, 132, 127, 132, 96, 131, 222,
                                              224, 225, 225, 225, 225, 226, 226, 226, 226, 97,
                                              212, 98, 115, 116, 117, 117, 117, 117, 231, 232,
                                              232, 232, 232, 96, 131, 378, 131, 233, 233, 233,
                                              233, 245, 245, 245, 245, 97, 377, 98, 115, 116,
                                              117, 117, 117, 117, 239, 278, 240, 376, 375, 96,
                                              245, 245, 245, 245, 245, 245, 245, 245, 374, 373,
                                              372, 97, 278, 98, 153, 153, 153, 371, 370, 154,

                                              246, 241, 155, 151, 151, 151, 151, 129, 242, 129,
                                              156, 243, 130, 244, 126, 127, 126, 246, 261, 128,
                                              132, 127, 132, 260, 259, 133, 258, 444, 156, 163,
                                              163, 163, 257, 256, 164, 445, 255, 254, 162, 162,
                                              162, 162, 129, 248, 129, 248, 253, 130, 249, 132,
                                              127, 132, 252, 445, 133, 132, 127, 132, 165, 251,
                                              133, 132, 127, 132, 223, 205, 133, 132, 127, 132,
                                              178, 149, 133, 148, 147, 165, 171, 171, 171, 146,
                                              143, 172, 662, 142, 173, 169, 169, 169, 169, 141,
                                              663, 250, 174, 152, 152, 152, 152, 1026, 152, 152,

                                              152, 152, 271, 140, 272, 272, 272, 272, 663, 139,
                                              174, 187, 187, 187, 138, 278, 188, 137, 670, 189,
                                              185, 185, 185, 185, 136, 1026, 671, 190, 159, 159,
                                              159, 159, 278, 160, 158, 158, 158, 158, 163, 163,
                                              163, 161, 705, 164, 671, 190, 194, 194, 194, 1026,
                                              706, 195, 1026, 713, 196, 192, 192, 192, 192, 161,
                                              1026, 714, 197, 159, 159, 159, 159, 1026, 706, 718,
                                              161, 159, 159, 159, 159, 1026, 1026, 719, 161, 714,
                                              197, 201, 201, 201, 1026, 1026, 202, 1026, 161, 203,
                                              199, 199, 199, 199, 1026, 719, 161, 204, 273, 1026,

                                              274, 274, 274, 274, 166, 166, 166, 166, 170, 170,
                                              170, 170, 1026, 1026, 1026, 204, 216, 216, 216, 1026,
                                              1026, 217, 1026, 1026, 218, 214, 214, 214, 214, 1026,
                                              1026, 726, 219, 1026, 170, 170, 170, 170, 295, 727,
                                              296, 296, 296, 296, 132, 127, 132, 1026, 131, 177,
                                              219, 227, 227, 227, 1026, 1026, 228, 727, 1026, 229,
                                              225, 225, 225, 225, 132, 127, 132, 230, 131, 177,
                                              181, 181, 181, 181, 182, 180, 180, 180, 180, 248,
                                              1026, 248, 183, 1026, 249, 230, 234, 234, 234, 1026,
                                              1026, 235, 1026, 1026, 236, 232, 232, 232, 232, 1026,

                                              183, 297, 237, 298, 298, 298, 298, 186, 186, 186,
                                              186, 1026, 181, 181, 181, 181, 1026, 1026, 1026, 183,
                                              237, 153, 153, 153, 1026, 1026, 154, 1026, 262, 263,
                                              264, 264, 264, 264, 266, 153, 266, 183, 1026, 267,
                                              1026, 268, 269, 270, 270, 270, 270, 163, 163, 163,
                                              1026, 1026, 164, 1026, 275, 1026, 276, 277, 277, 277,
                                              279, 163, 279, 1026, 1026, 280, 1026, 281, 1026, 282,
                                              283, 283, 283, 171, 171, 171, 1026, 1026, 172, 1026,
                                              286, 287, 288, 288, 288, 288, 290, 171, 290, 1026,
                                              1026, 291, 1026, 292, 293, 294, 294, 294, 294, 181,

                                              181, 181, 181, 1026, 1026, 755, 183, 1026, 186, 186,
                                              186, 186, 308, 756, 309, 309, 309, 309, 193, 193,
                                              193, 193, 1026, 1026, 183, 187, 187, 187, 1026, 1026,
                                              188, 756, 299, 300, 301, 301, 301, 301, 303, 187,
                                              303, 1026, 1026, 304, 1026, 305, 306, 307, 307, 307,
                                              307, 1026, 193, 193, 193, 193, 194, 194, 194, 1026,
                                              1026, 195, 1026, 310, 311, 312, 312, 312, 312, 314,
                                              194, 314, 1026, 1026, 315, 763, 316, 317, 318, 318,
                                              318, 318, 319, 764, 320, 320, 320, 320, 200, 200,
                                              200, 200, 1026, 200, 200, 200, 200, 201, 201, 201,

                                              1026, 764, 202, 1026, 321, 322, 323, 323, 323, 323,
                                              325, 201, 325, 1026, 1026, 326, 1026, 327, 328, 329,
                                              329, 329, 329, 330, 1026, 331, 331, 331, 331, 208,
                                              208, 208, 208, 209, 207, 207, 207, 207, 922, 930,
                                              938, 210, 208, 208, 208, 208, 923, 931, 939, 210,
                                              208, 208, 208, 208, 1026, 1026, 1026, 210, 332, 210,
                                              333, 333, 333, 333, 923, 931, 939, 210, 211, 211,
                                              211, 211, 1026, 1026, 1026, 210, 215, 215, 215, 215,
                                              1026, 215, 215, 215, 215, 216, 216, 216, 1026, 1026,
                                              217, 1026, 335, 336, 337, 337, 337, 337, 339, 216,

                                              339, 1026, 1026, 340, 1026, 341, 342, 343, 343, 343,
                                              343, 344, 1026, 345, 345, 345, 345, 132, 127, 132,
                                              1026, 131, 222, 132, 127, 132, 1026, 131, 222, 226,
                                              226, 226, 226, 1026, 226, 226, 226, 226, 355, 1026,
                                              356, 356, 356, 356, 1026, 1026, 248, 131, 248, 131,
                                              1026, 249, 1026, 131, 1026, 131, 227, 227, 227, 1026,
                                              1026, 228, 1026, 346, 347, 348, 348, 348, 348, 350,
                                              227, 350, 1026, 1026, 351, 1026, 352, 353, 354, 354,
                                              354, 354, 233, 233, 233, 233, 234, 234, 234, 1026,
                                              1026, 235, 946, 954, 236, 232, 232, 232, 232, 1026,

                                              947, 955, 237, 1026, 233, 233, 233, 233, 366, 1026,
                                              367, 367, 367, 367, 245, 245, 245, 245, 947, 955,
                                              237, 234, 234, 234, 1026, 1026, 235, 1026, 357, 358,
                                              359, 359, 359, 359, 361, 234, 361, 1026, 1026, 362,
                                              1026, 363, 364, 365, 365, 365, 365, 248, 1026, 248,
                                              1026, 1026, 249, 132, 127, 132, 1026, 1026, 133, 263,
                                              264, 264, 264, 264, 379, 379, 379, 379, 272, 272,
                                              272, 272, 962, 369, 380, 380, 380, 1026, 1026, 381,
                                              963, 1026, 382, 264, 264, 264, 264, 1026, 797, 922,
                                              383, 384, 385, 384, 1026, 1026, 386, 923, 963, 387,

                                              274, 274, 274, 274, 1026, 1026, 1026, 388, 383, 266,
                                              153, 266, 1026, 1026, 267, 923, 268, 269, 270, 270,
                                              270, 270, 266, 153, 266, 388, 1026, 267, 1026, 268,
                                              269, 270, 270, 270, 270, 153, 153, 153, 1026, 1026,
                                              154, 1026, 1026, 1026, 272, 272, 272, 272, 274, 274,
                                              274, 274, 277, 277, 277, 277, 389, 389, 389, 1026,
                                              1026, 390, 1026, 1026, 1026, 277, 277, 277, 277, 163,
                                              163, 163, 1026, 1026, 164, 287, 288, 288, 288, 288,
                                              396, 396, 396, 396, 1026, 391, 296, 296, 296, 296,
                                              401, 402, 401, 1026, 1021, 403, 1021, 1026, 404, 1022,

                                              1026, 1026, 391, 279, 163, 279, 405, 1026, 280, 1026,
                                              281, 1026, 282, 283, 283, 283, 279, 163, 279, 1026,
                                              1026, 280, 1026, 281, 405, 282, 283, 283, 283, 279,
                                              163, 279, 1026, 1026, 280, 1026, 281, 1026, 282, 283,
                                              283, 283, 279, 163, 279, 1026, 1026, 280, 1026, 281,
                                              1026, 282, 283, 283, 283, 392, 393, 392, 1026, 1026,
                                              394, 1026, 281, 1026, 282, 283, 283, 283, 298, 298,
                                              298, 298, 298, 298, 298, 298, 300, 301, 301, 301,
                                              301, 1026, 1026, 1026, 395, 406, 406, 406, 406, 407,
                                              301, 301, 301, 301, 389, 389, 389, 408, 1026, 390,

                                              1026, 395, 397, 397, 397, 1026, 1026, 398, 1026, 1026,
                                              399, 288, 288, 288, 288, 408, 1026, 1026, 400, 309,
                                              309, 309, 309, 311, 312, 312, 312, 312, 411, 411,
                                              411, 411, 320, 320, 320, 320, 400, 290, 171, 290,
                                              1026, 1026, 291, 1026, 292, 293, 294, 294, 294, 294,
                                              290, 171, 290, 1026, 1026, 291, 1026, 292, 293, 294,
                                              294, 294, 294, 171, 171, 171, 1026, 1026, 172, 1026,
                                              1026, 1026, 296, 296, 296, 296, 303, 187, 303, 1026,
                                              1026, 304, 1026, 305, 306, 307, 307, 307, 307, 303,
                                              187, 303, 1026, 1026, 304, 1026, 305, 306, 307, 307,

                                              307, 307, 187, 187, 187, 1026, 1026, 188, 1026, 811,
                                              930, 309, 309, 309, 309, 412, 412, 412, 931, 1026,
                                              413, 1026, 1026, 414, 312, 312, 312, 312, 1026, 826,
                                              938, 415, 416, 417, 416, 1026, 931, 418, 939, 1026,
                                              419, 322, 323, 323, 323, 323, 1026, 1026, 420, 415,
                                              314, 194, 314, 1026, 1026, 315, 939, 316, 317, 318,
                                              318, 318, 318, 314, 194, 314, 420, 1026, 315, 1026,
                                              316, 317, 318, 318, 318, 318, 194, 194, 194, 1026,
                                              1026, 195, 1026, 1026, 1026, 320, 320, 320, 320, 421,
                                              421, 421, 421, 422, 422, 422, 1026, 1026, 423, 1026,

                                              1026, 424, 323, 323, 323, 323, 1026, 864, 946, 425,
                                              426, 427, 426, 1026, 1026, 428, 947, 1026, 429, 331,
                                              331, 331, 331, 1026, 1026, 1026, 430, 425, 325, 201,
                                              325, 1026, 1026, 326, 947, 327, 328, 329, 329, 329,
                                              329, 325, 201, 325, 430, 1026, 326, 1026, 327, 328,
                                              329, 329, 329, 329, 201, 201, 201, 1026, 1026, 202,
                                              1026, 1026, 1026, 331, 331, 331, 331, 333, 333, 333,
                                              333, 333, 333, 333, 333, 336, 337, 337, 337, 337,
                                              431, 431, 431, 431, 432, 432, 432, 1026, 1026, 433,
                                              1026, 1026, 434, 337, 337, 337, 337, 1026, 878, 954,

                                              435, 436, 437, 436, 1026, 1026, 438, 955, 1026, 439,
                                              345, 345, 345, 345, 1026, 1026, 1026, 440, 435, 339,
                                              216, 339, 1026, 1026, 340, 955, 341, 342, 343, 343,
                                              343, 343, 339, 216, 339, 440, 1026, 340, 1026, 341,
                                              342, 343, 343, 343, 343, 216, 216, 216, 1026, 1026,
                                              217, 1026, 1026, 1026, 345, 345, 345, 345, 347, 348,
                                              348, 348, 348, 441, 441, 441, 441, 442, 348, 348,
                                              348, 348, 1026, 1026, 1026, 443, 356, 356, 356, 356,
                                              358, 359, 359, 359, 359, 446, 446, 446, 446, 367,
                                              367, 367, 367, 443, 350, 227, 350, 1026, 1026, 351,

                                              1026, 352, 353, 354, 354, 354, 354, 227, 227, 227,
                                              1026, 1026, 228, 1026, 1026, 1026, 356, 356, 356, 356,
                                              447, 447, 447, 1026, 1026, 448, 1026, 1026, 449, 359,
                                              359, 359, 359, 1026, 1026, 1026, 450, 451, 452, 451,
                                              1026, 1026, 453, 1026, 1026, 454, 1026, 379, 379, 379,
                                              379, 1026, 1026, 455, 450, 361, 234, 361, 1026, 1026,
                                              362, 1026, 363, 364, 365, 365, 365, 365, 1026, 1026,
                                              1026, 455, 234, 234, 234, 1026, 1026, 235, 1026, 1026,
                                              1026, 367, 367, 367, 367, 132, 127, 132, 1026, 473,
                                              133, 474, 474, 474, 474, 525, 1026, 526, 526, 526,

                                              526, 1026, 1026, 1026, 456, 380, 380, 380, 1026, 1026,
                                              381, 1026, 464, 465, 466, 466, 466, 466, 468, 380,
                                              468, 1026, 1026, 469, 1026, 470, 471, 472, 472, 472,
                                              472, 384, 385, 384, 1026, 1026, 386, 1026, 475, 476,
                                              477, 477, 477, 477, 385, 385, 385, 1026, 1026, 478,
                                              1026, 479, 480, 481, 481, 481, 481, 483, 385, 483,
                                              1026, 1026, 484, 1026, 485, 486, 487, 487, 487, 487,
                                              268, 269, 270, 270, 270, 270, 1026, 1026, 542, 388,
                                              543, 543, 543, 543, 465, 466, 466, 466, 466, 406,
                                              406, 406, 406, 1026, 1026, 1026, 408, 388, 266, 153,

                                              266, 1026, 1026, 267, 1026, 488, 269, 489, 489, 489,
                                              489, 389, 389, 389, 408, 1026, 390, 1026, 490, 1026,
                                              491, 492, 492, 492, 494, 389, 494, 1026, 1026, 495,
                                              1026, 496, 1026, 497, 498, 498, 498, 392, 393, 392,
                                              1026, 1026, 394, 1026, 500, 1026, 501, 502, 502, 502,
                                              393, 393, 393, 1026, 1026, 503, 1026, 504, 1026, 505,
                                              506, 506, 506, 508, 393, 508, 1026, 1026, 509, 1026,
                                              510, 1026, 511, 512, 512, 512, 392, 393, 392, 1026,
                                              1026, 394, 1026, 281, 1026, 513, 514, 514, 514, 515,
                                              515, 515, 515, 515, 406, 406, 406, 406, 1026, 1026,

                                              555, 408, 556, 556, 556, 556, 1026, 1026, 1026, 515,
                                              515, 515, 397, 397, 397, 1026, 1026, 398, 1026, 408,
                                              1026, 396, 396, 396, 396, 1026, 1026, 581, 400, 582,
                                              582, 582, 582, 607, 1026, 608, 608, 608, 608, 624,
                                              1026, 625, 625, 625, 625, 1026, 400, 397, 397, 397,
                                              1026, 1026, 398, 1026, 516, 517, 518, 518, 518, 518,
                                              520, 397, 520, 1026, 1026, 521, 1026, 522, 523, 524,
                                              524, 524, 524, 401, 402, 401, 1026, 1026, 403, 1026,
                                              527, 528, 529, 529, 529, 529, 402, 402, 402, 1026,
                                              1026, 530, 1026, 531, 532, 533, 533, 533, 533, 535,

                                              402, 535, 1026, 1026, 536, 1026, 537, 538, 539, 539,
                                              539, 539, 401, 402, 401, 1026, 1026, 403, 1026, 292,
                                              293, 294, 294, 294, 294, 1026, 1026, 637, 405, 638,
                                              638, 638, 638, 659, 659, 659, 659, 1026, 441, 441,
                                              441, 441, 1026, 1026, 1026, 443, 405, 290, 171, 290,
                                              1026, 1026, 291, 1026, 540, 293, 541, 541, 541, 541,
                                              303, 187, 303, 443, 1026, 304, 1026, 305, 306, 307,
                                              307, 307, 307, 132, 127, 654, 410, 1026, 133, 474,
                                              474, 474, 474, 1026, 1026, 1026, 441, 441, 441, 441,
                                              1026, 1026, 1026, 443, 410, 303, 187, 303, 1026, 1026,

                                              304, 1026, 544, 306, 545, 545, 545, 545, 412, 412,
                                              412, 443, 1026, 413, 1026, 1026, 1026, 411, 411, 411,
                                              411, 1026, 1026, 1026, 415, 480, 481, 481, 481, 481,
                                              1026, 1026, 1026, 660, 466, 466, 466, 466, 1026, 1026,
                                              1026, 661, 415, 412, 412, 412, 1026, 1026, 413, 1026,
                                              546, 547, 548, 548, 548, 548, 550, 412, 550, 661,
                                              1026, 551, 1026, 552, 553, 554, 554, 554, 554, 416,
                                              417, 416, 1026, 1026, 418, 1026, 557, 558, 559, 559,
                                              559, 559, 417, 417, 417, 1026, 1026, 560, 1026, 561,
                                              562, 563, 563, 563, 563, 565, 417, 565, 1026, 1026,

                                              566, 1026, 567, 568, 569, 569, 569, 569, 416, 417,
                                              416, 1026, 1026, 418, 1026, 316, 317, 318, 318, 318,
                                              318, 1026, 1026, 1026, 420, 667, 667, 667, 667, 489,
                                              489, 489, 489, 387, 489, 489, 489, 489, 1026, 1026,
                                              1026, 388, 420, 314, 194, 314, 1026, 1026, 315, 1026,
                                              570, 317, 571, 571, 571, 571, 422, 422, 422, 388,
                                              1026, 423, 1026, 1026, 1026, 421, 421, 421, 421, 1026,
                                              1026, 1026, 425, 492, 492, 492, 492, 492, 492, 492,
                                              492, 389, 389, 389, 1026, 1026, 390, 1026, 1026, 1026,
                                              425, 422, 422, 422, 1026, 1026, 423, 1026, 572, 573,

                                              574, 574, 574, 574, 576, 422, 576, 1026, 1026, 577,
                                              1026, 578, 579, 580, 580, 580, 580, 426, 427, 426,
                                              1026, 1026, 428, 1026, 583, 584, 585, 585, 585, 585,
                                              427, 427, 427, 1026, 1026, 586, 1026, 587, 588, 589,
                                              589, 589, 589, 591, 427, 591, 1026, 1026, 592, 1026,
                                              593, 594, 595, 595, 595, 595, 426, 427, 426, 1026,
                                              1026, 428, 1026, 327, 328, 329, 329, 329, 329, 1026,
                                              1026, 1026, 430, 1026, 492, 492, 492, 492, 506, 506,
                                              506, 506, 517, 518, 518, 518, 518, 1026, 1026, 1026,
                                              430, 325, 201, 325, 672, 1026, 326, 1026, 596, 328,

                                              597, 597, 597, 597, 432, 432, 432, 1026, 1026, 433,
                                              1026, 672, 1026, 431, 431, 431, 431, 1026, 1026, 1026,
                                              435, 678, 678, 678, 678, 526, 526, 526, 526, 532,
                                              533, 533, 533, 533, 694, 694, 694, 694, 435, 432,
                                              432, 432, 1026, 1026, 433, 1026, 598, 599, 600, 600,
                                              600, 600, 602, 432, 602, 1026, 1026, 603, 1026, 604,
                                              605, 606, 606, 606, 606, 436, 437, 436, 1026, 1026,
                                              438, 1026, 609, 610, 611, 611, 611, 611, 437, 437,
                                              437, 1026, 1026, 612, 1026, 613, 614, 615, 615, 615,
                                              615, 617, 437, 617, 1026, 1026, 618, 1026, 619, 620,

                                              621, 621, 621, 621, 436, 437, 436, 1026, 1026, 438,
                                              1026, 341, 342, 343, 343, 343, 343, 1026, 1026, 1026,
                                              440, 683, 684, 683, 1026, 1026, 685, 1026, 1026, 686,
                                              541, 541, 541, 541, 1026, 1026, 1026, 687, 440, 339,
                                              216, 339, 1026, 1026, 340, 1026, 622, 342, 623, 623,
                                              623, 623, 350, 227, 350, 687, 1026, 351, 1026, 352,
                                              353, 354, 354, 354, 354, 1026, 1026, 1026, 445, 698,
                                              690, 698, 1026, 1026, 699, 1026, 1026, 700, 543, 543,
                                              543, 543, 1026, 1026, 1026, 701, 445, 350, 227, 350,
                                              1026, 1026, 351, 1026, 626, 353, 627, 627, 627, 627,

                                              447, 447, 447, 701, 1026, 448, 1026, 1026, 1026, 446,
                                              446, 446, 446, 1026, 1026, 1026, 450, 543, 543, 543,
                                              543, 547, 548, 548, 548, 548, 702, 702, 702, 702,
                                              556, 556, 556, 556, 450, 447, 447, 447, 1026, 1026,
                                              448, 1026, 628, 629, 630, 630, 630, 630, 632, 447,
                                              632, 1026, 1026, 633, 1026, 634, 635, 636, 636, 636,
                                              636, 451, 452, 451, 1026, 1026, 453, 1026, 639, 640,
                                              641, 641, 641, 641, 452, 452, 452, 1026, 1026, 642,
                                              1026, 643, 644, 645, 645, 645, 645, 647, 452, 647,
                                              1026, 1026, 648, 1026, 649, 650, 651, 651, 651, 651,

                                              451, 452, 451, 1026, 1026, 453, 1026, 363, 364, 365,
                                              365, 365, 365, 1026, 1026, 1026, 455, 562, 563, 563,
                                              563, 563, 1026, 1026, 1026, 703, 548, 548, 548, 548,
                                              1026, 1026, 1026, 704, 455, 361, 234, 361, 1026, 1026,
                                              362, 1026, 652, 364, 653, 653, 653, 653, 468, 380,
                                              468, 704, 1026, 469, 1026, 470, 471, 472, 472, 472,
                                              472, 468, 380, 468, 1026, 1026, 469, 1026, 470, 471,
                                              472, 472, 472, 472, 380, 380, 380, 1026, 1026, 381,
                                              1026, 1026, 1026, 474, 474, 474, 474, 266, 153, 266,
                                              1026, 1026, 267, 1026, 268, 476, 477, 477, 477, 477,

                                              266, 153, 266, 1026, 1026, 267, 1026, 268, 269, 664,
                                              664, 664, 664, 384, 385, 384, 1026, 1026, 386, 1026,
                                              1026, 665, 477, 477, 477, 477, 1026, 1026, 1026, 666,
                                              710, 710, 710, 710, 571, 571, 571, 571, 419, 571,
                                              571, 571, 571, 1026, 1026, 1026, 420, 666, 483, 385,
                                              483, 1026, 1026, 484, 1026, 485, 486, 487, 487, 487,
                                              487, 380, 380, 380, 420, 1026, 381, 1026, 1026, 668,
                                              481, 481, 481, 481, 1026, 1026, 1026, 669, 573, 574,
                                              574, 574, 574, 715, 715, 715, 715, 582, 582, 582,
                                              582, 723, 723, 723, 723, 669, 483, 385, 483, 1026,

                                              1026, 484, 1026, 485, 486, 487, 487, 487, 487, 494,
                                              389, 494, 1026, 1026, 495, 1026, 496, 1026, 497, 498,
                                              498, 498, 494, 389, 494, 1026, 1026, 495, 1026, 496,
                                              1026, 497, 498, 498, 498, 494, 389, 494, 1026, 1026,
                                              495, 1026, 496, 1026, 497, 498, 498, 498, 494, 389,
                                              494, 1026, 1026, 495, 1026, 496, 1026, 497, 498, 498,
                                              498, 494, 389, 494, 1026, 1026, 495, 1026, 496, 1026,
                                              497, 498, 498, 498, 716, 574, 574, 574, 574, 1026,
                                              1026, 1026, 717, 588, 589, 589, 589, 589, 1026, 1026,
                                              673, 597, 597, 597, 597, 599, 600, 600, 600, 600,

                                              717, 728, 728, 728, 728, 1026, 1026, 673, 279, 163,
                                              279, 1026, 1026, 280, 1026, 281, 1026, 674, 502, 502,
                                              502, 392, 393, 392, 1026, 1026, 394, 1026, 281, 1026,
                                              674, 502, 502, 502, 429, 597, 597, 597, 597, 1026,
                                              1026, 1026, 430, 608, 608, 608, 608, 1026, 1026, 1026,
                                              675, 614, 615, 615, 615, 615, 744, 744, 744, 744,
                                              430, 623, 623, 623, 623, 1026, 1026, 675, 508, 393,
                                              508, 1026, 1026, 509, 1026, 510, 1026, 511, 512, 512,
                                              512, 389, 389, 389, 1026, 1026, 390, 1026, 1026, 1026,
                                              506, 506, 506, 506, 1026, 1026, 1026, 733, 734, 733,

                                              1026, 1026, 735, 1026, 1026, 736, 625, 625, 625, 625,
                                              676, 1026, 1026, 737, 625, 625, 625, 625, 629, 630,
                                              630, 630, 630, 752, 752, 752, 752, 676, 508, 393,
                                              508, 737, 1026, 509, 1026, 510, 1026, 511, 512, 512,
                                              512, 508, 393, 508, 1026, 1026, 509, 1026, 510, 1026,
                                              511, 512, 512, 512, 508, 393, 508, 1026, 1026, 509,
                                              1026, 510, 1026, 511, 512, 512, 512, 508, 393, 508,
                                              1026, 1026, 509, 1026, 510, 1026, 511, 512, 512, 512,
                                              508, 393, 508, 1026, 1026, 509, 1026, 510, 1026, 511,
                                              512, 512, 512, 753, 630, 630, 630, 630, 1026, 1026,

                                              1026, 754, 748, 740, 748, 1026, 1026, 749, 1026, 677,
                                              750, 638, 638, 638, 638, 1026, 1026, 1026, 751, 754,
                                              644, 645, 645, 645, 645, 1026, 677, 513, 514, 514,
                                              514, 515, 515, 515, 515, 515, 751, 760, 760, 760,
                                              760, 653, 653, 653, 653, 1026, 1026, 395, 1026, 1026,
                                              1026, 515, 515, 515, 454, 653, 653, 653, 653, 1026,
                                              1026, 1026, 455, 1026, 395, 679, 679, 679, 1026, 1026,
                                              680, 1026, 1026, 681, 518, 518, 518, 518, 1026, 1026,
                                              455, 682, 770, 1026, 771, 771, 771, 771, 132, 127,
                                              132, 1026, 776, 133, 777, 777, 777, 777, 1026, 682,

                                              520, 397, 520, 1026, 1026, 521, 1026, 522, 523, 524,
                                              524, 524, 524, 520, 397, 520, 765, 1026, 521, 1026,
                                              522, 523, 524, 524, 524, 524, 397, 397, 397, 1026,
                                              1026, 398, 1026, 1026, 1026, 526, 526, 526, 526, 290,
                                              171, 290, 1026, 1026, 291, 1026, 292, 528, 529, 529,
                                              529, 529, 290, 171, 290, 1026, 1026, 291, 1026, 292,
                                              293, 688, 688, 688, 688, 689, 690, 689, 1026, 1026,
                                              691, 1026, 1026, 692, 529, 529, 529, 529, 389, 389,
                                              389, 693, 800, 390, 801, 801, 801, 801, 1026, 1026,
                                              1026, 659, 659, 659, 659, 1026, 1026, 1026, 661, 693,

                                              535, 402, 535, 1026, 1026, 536, 1026, 537, 538, 539,
                                              539, 539, 539, 684, 684, 684, 661, 1026, 695, 1026,
                                              1026, 696, 533, 533, 533, 533, 1026, 1026, 831, 697,
                                              832, 832, 832, 832, 771, 771, 771, 771, 1026, 659,
                                              659, 659, 659, 1026, 1026, 1026, 661, 697, 535, 402,
                                              535, 1026, 1026, 536, 1026, 537, 538, 539, 539, 539,
                                              539, 401, 402, 401, 661, 1026, 403, 1026, 1026, 404,
                                              541, 541, 541, 541, 1026, 1026, 838, 405, 839, 839,
                                              839, 839, 771, 771, 771, 771, 1026, 702, 702, 702,
                                              702, 1026, 1026, 1026, 704, 405, 303, 187, 303, 1026,

                                              1026, 304, 1026, 305, 306, 545, 545, 545, 545, 303,
                                              187, 303, 704, 1026, 304, 1026, 305, 409, 545, 545,
                                              545, 545, 1026, 1026, 844, 410, 845, 845, 845, 845,
                                              777, 777, 777, 777, 1026, 702, 702, 702, 702, 1026,
                                              1026, 1026, 704, 410, 550, 412, 550, 1026, 1026, 551,
                                              1026, 552, 553, 554, 554, 554, 554, 550, 412, 550,
                                              704, 1026, 551, 1026, 552, 553, 554, 554, 554, 554,
                                              412, 412, 412, 1026, 1026, 413, 1026, 1026, 1026, 556,
                                              556, 556, 556, 314, 194, 314, 1026, 1026, 315, 1026,
                                              316, 558, 559, 559, 559, 559, 314, 194, 314, 1026,

                                              1026, 315, 1026, 316, 317, 707, 707, 707, 707, 416,
                                              417, 416, 1026, 1026, 418, 1026, 1026, 708, 559, 559,
                                              559, 559, 1026, 1026, 848, 709, 849, 849, 849, 849,
                                              792, 793, 793, 793, 793, 715, 715, 715, 715, 1026,
                                              1026, 1026, 717, 709, 565, 417, 565, 1026, 1026, 566,
                                              1026, 567, 568, 569, 569, 569, 569, 412, 412, 412,
                                              717, 1026, 413, 1026, 1026, 711, 563, 563, 563, 563,
                                              1026, 1026, 854, 712, 855, 855, 855, 855, 919, 919,
                                              919, 919, 1026, 715, 715, 715, 715, 1026, 1026, 1026,
                                              717, 712, 565, 417, 565, 1026, 1026, 566, 1026, 567,

                                              568, 569, 569, 569, 569, 576, 422, 576, 717, 1026,
                                              577, 1026, 578, 579, 580, 580, 580, 580, 576, 422,
                                              576, 1026, 1026, 577, 1026, 578, 579, 580, 580, 580,
                                              580, 422, 422, 422, 1026, 1026, 423, 1026, 1026, 1026,
                                              582, 582, 582, 582, 325, 201, 325, 1026, 1026, 326,
                                              1026, 327, 584, 585, 585, 585, 585, 325, 201, 325,
                                              1026, 1026, 326, 1026, 327, 328, 720, 720, 720, 720,
                                              426, 427, 426, 1026, 1026, 428, 1026, 1026, 721, 585,
                                              585, 585, 585, 1026, 1026, 867, 722, 868, 868, 868,
                                              868, 898, 1026, 899, 899, 899, 899, 905, 1026, 906,

                                              906, 906, 906, 1026, 722, 591, 427, 591, 1026, 1026,
                                              592, 1026, 593, 594, 595, 595, 595, 595, 422, 422,
                                              422, 1026, 1026, 423, 1026, 1026, 724, 589, 589, 589,
                                              589, 1026, 1026, 911, 725, 912, 912, 912, 912, 801,
                                              801, 801, 801, 1026, 752, 752, 752, 752, 1026, 1026,
                                              1026, 754, 725, 591, 427, 591, 1026, 1026, 592, 1026,
                                              593, 594, 595, 595, 595, 595, 729, 729, 729, 754,
                                              1026, 730, 1026, 1026, 731, 600, 600, 600, 600, 132,
                                              127, 132, 732, 1026, 133, 1026, 389, 389, 389, 1026,
                                              915, 390, 752, 752, 752, 752, 1026, 1026, 1026, 754,

                                              732, 602, 432, 602, 1026, 1026, 603, 1026, 604, 605,
                                              606, 606, 606, 606, 602, 432, 602, 754, 1026, 603,
                                              1026, 604, 605, 606, 606, 606, 606, 432, 432, 432,
                                              1026, 1026, 433, 1026, 1026, 1026, 608, 608, 608, 608,
                                              339, 216, 339, 1026, 1026, 340, 1026, 341, 610, 611,
                                              611, 611, 611, 339, 216, 339, 1026, 1026, 340, 1026,
                                              341, 342, 738, 738, 738, 738, 739, 740, 739, 1026,
                                              1026, 741, 1026, 1026, 742, 611, 611, 611, 611, 1026,
                                              1026, 1026, 743, 806, 807, 807, 807, 807, 1026, 1026,
                                              1026, 920, 793, 793, 793, 793, 1026, 1026, 1026, 921,

                                              743, 617, 437, 617, 1026, 1026, 618, 1026, 619, 620,
                                              621, 621, 621, 621, 734, 734, 734, 921, 1026, 745,
                                              1026, 1026, 746, 615, 615, 615, 615, 1026, 1026, 1026,
                                              747, 927, 927, 927, 927, 815, 815, 815, 815, 686,
                                              815, 815, 815, 815, 1026, 1026, 1026, 687, 747, 617,
                                              437, 617, 1026, 1026, 618, 1026, 619, 620, 621, 621,
                                              621, 621, 436, 437, 436, 687, 1026, 438, 1026, 1026,
                                              439, 623, 623, 623, 623, 1026, 1026, 1026, 440, 821,
                                              822, 822, 822, 822, 935, 935, 935, 935, 830, 830,
                                              830, 830, 832, 832, 832, 832, 440, 350, 227, 350,

                                              1026, 1026, 351, 1026, 352, 353, 627, 627, 627, 627,
                                              350, 227, 350, 1026, 1026, 351, 1026, 352, 444, 627,
                                              627, 627, 627, 1026, 1026, 1026, 445, 837, 837, 837,
                                              837, 839, 839, 839, 839, 404, 830, 830, 830, 830,
                                              1026, 1026, 1026, 405, 445, 632, 447, 632, 1026, 1026,
                                              633, 1026, 634, 635, 636, 636, 636, 636, 632, 447,
                                              632, 405, 1026, 633, 1026, 634, 635, 636, 636, 636,
                                              636, 447, 447, 447, 1026, 1026, 448, 1026, 1026, 1026,
                                              638, 638, 638, 638, 361, 234, 361, 1026, 1026, 362,
                                              1026, 363, 640, 641, 641, 641, 641, 361, 234, 361,

                                              1026, 1026, 362, 1026, 363, 364, 757, 757, 757, 757,
                                              451, 452, 451, 1026, 1026, 453, 1026, 1026, 758, 641,
                                              641, 641, 641, 1026, 1026, 1026, 759, 839, 839, 839,
                                              839, 845, 845, 845, 845, 700, 837, 837, 837, 837,
                                              1026, 1026, 1026, 701, 759, 647, 452, 647, 1026, 1026,
                                              648, 1026, 649, 650, 651, 651, 651, 651, 447, 447,
                                              447, 701, 1026, 448, 1026, 1026, 761, 645, 645, 645,
                                              645, 1026, 1026, 1026, 762, 849, 849, 849, 849, 849,
                                              849, 849, 849, 855, 855, 855, 855, 859, 860, 860,
                                              860, 860, 762, 647, 452, 647, 1026, 1026, 648, 1026,

                                              649, 650, 651, 651, 651, 651, 468, 380, 468, 1026,
                                              1026, 469, 1026, 470, 471, 472, 472, 472, 472, 1026,
                                              1026, 1026, 663, 943, 943, 943, 943, 868, 868, 868,
                                              868, 944, 860, 860, 860, 860, 1026, 1026, 1026, 945,
                                              663, 468, 380, 468, 1026, 1026, 469, 1026, 772, 471,
                                              773, 773, 773, 773, 384, 385, 384, 945, 1026, 386,
                                              1026, 268, 387, 664, 664, 664, 664, 1026, 1026, 1026,
                                              666, 873, 874, 874, 874, 874, 951, 951, 951, 951,
                                              882, 882, 882, 882, 959, 959, 959, 959, 666, 384,
                                              385, 384, 1026, 1026, 386, 1026, 268, 269, 664, 664,

                                              664, 664, 1026, 1026, 1026, 666, 888, 889, 889, 889,
                                              889, 1026, 1026, 1026, 736, 882, 882, 882, 882, 1026,
                                              1026, 1026, 737, 666, 266, 153, 266, 1026, 1026, 267,
                                              1026, 774, 269, 775, 775, 775, 775, 380, 380, 380,
                                              737, 1026, 381, 1026, 1026, 1026, 667, 667, 667, 667,
                                              1026, 1026, 1026, 669, 897, 897, 897, 897, 1026, 439,
                                              897, 897, 897, 897, 132, 127, 1009, 440, 1026, 133,
                                              1026, 669, 483, 385, 483, 1026, 1026, 484, 1026, 485,
                                              486, 487, 487, 487, 487, 440, 1026, 1026, 671, 899,
                                              899, 899, 899, 904, 904, 904, 904, 750, 904, 904,

                                              904, 904, 1026, 1026, 1026, 751, 671, 483, 385, 483,
                                              1026, 1026, 484, 1026, 778, 486, 779, 779, 779, 779,
                                              494, 389, 494, 751, 1026, 495, 1026, 496, 1026, 781,
                                              782, 782, 782, 783, 783, 783, 783, 783, 906, 906,
                                              906, 906, 906, 906, 906, 906, 912, 912, 912, 912,
                                              1026, 1026, 1026, 783, 783, 783, 392, 393, 392, 1026,
                                              1026, 394, 1026, 281, 1026, 674, 502, 502, 502, 132,
                                              127, 132, 1026, 1021, 133, 1021, 1026, 967, 1022, 1026,
                                              1026, 919, 919, 919, 919, 395, 1026, 970, 921, 971,
                                              971, 971, 971, 976, 1026, 977, 977, 977, 977, 1026,

                                              1026, 1026, 395, 392, 393, 392, 921, 1026, 394, 1026,
                                              281, 1026, 784, 785, 785, 785, 786, 786, 786, 786,
                                              786, 1026, 919, 919, 919, 919, 1026, 1026, 982, 921,
                                              983, 983, 983, 983, 1026, 1026, 786, 786, 786, 508,
                                              393, 508, 1026, 1026, 509, 1026, 510, 921, 788, 789,
                                              789, 789, 790, 790, 790, 790, 790, 943, 943, 943,
                                              943, 1026, 1026, 988, 945, 989, 989, 989, 989, 1026,
                                              1026, 1026, 790, 790, 790, 679, 679, 679, 1026, 1026,
                                              680, 1026, 945, 1026, 678, 678, 678, 678, 1026, 1026,
                                              1026, 682, 736, 948, 948, 948, 948, 971, 971, 971,

                                              971, 943, 943, 943, 943, 1026, 1026, 1026, 945, 682,
                                              679, 679, 679, 1026, 1026, 680, 1026, 791, 792, 793,
                                              793, 793, 793, 795, 679, 795, 945, 1026, 796, 1026,
                                              797, 798, 799, 799, 799, 799, 683, 684, 683, 1026,
                                              1026, 685, 1026, 802, 803, 804, 804, 804, 804, 684,
                                              684, 684, 1026, 1026, 695, 1026, 805, 806, 807, 807,
                                              807, 807, 809, 684, 809, 1026, 1026, 810, 1026, 811,
                                              812, 813, 813, 813, 813, 683, 684, 683, 1026, 1026,
                                              685, 1026, 522, 523, 524, 524, 524, 524, 1026, 1026,
                                              1026, 687, 605, 948, 948, 948, 948, 992, 1026, 993,

                                              993, 993, 993, 994, 1026, 995, 995, 995, 995, 687,
                                              520, 397, 520, 1026, 1026, 521, 1026, 814, 523, 815,
                                              815, 815, 815, 689, 690, 689, 1026, 1026, 691, 1026,
                                              292, 404, 688, 688, 688, 688, 1026, 1026, 1026, 693,
                                              439, 956, 956, 956, 956, 342, 956, 956, 956, 956,
                                              998, 1026, 999, 999, 999, 999, 1026, 693, 689, 690,
                                              689, 1026, 1026, 691, 1026, 816, 817, 818, 818, 818,
                                              818, 690, 690, 690, 1026, 1026, 819, 1026, 820, 821,
                                              822, 822, 822, 822, 824, 690, 824, 1026, 1026, 825,
                                              1026, 826, 827, 828, 828, 828, 828, 292, 293, 688,

                                              688, 688, 688, 1026, 1026, 1000, 693, 1001, 1001, 1001,
                                              1001, 1002, 1026, 1003, 1003, 1003, 1003, 750, 964, 964,
                                              964, 964, 1026, 1026, 693, 290, 171, 290, 1026, 1026,
                                              291, 1026, 829, 293, 830, 830, 830, 830, 684, 684,
                                              684, 1026, 1026, 695, 1026, 1026, 1026, 694, 694, 694,
                                              694, 1026, 1026, 1026, 697, 620, 964, 964, 964, 964,
                                              1004, 1026, 1005, 1005, 1005, 1005, 971, 971, 971, 971,
                                              1026, 1026, 697, 809, 684, 809, 1026, 1026, 810, 1026,
                                              811, 812, 813, 813, 813, 813, 698, 690, 698, 1026,
                                              1026, 699, 1026, 833, 834, 835, 835, 835, 835, 824,

                                              690, 824, 1026, 1026, 825, 1026, 826, 827, 828, 828,
                                              828, 828, 698, 690, 698, 1026, 1026, 699, 1026, 537,
                                              538, 539, 539, 539, 539, 132, 127, 132, 701, 1026,
                                              133, 132, 127, 132, 1006, 1026, 133, 686, 975, 975,
                                              975, 975, 1026, 1026, 1026, 687, 701, 535, 402, 535,
                                              1026, 1026, 536, 1026, 836, 538, 837, 837, 837, 837,
                                              550, 412, 550, 687, 1026, 551, 1026, 552, 553, 554,
                                              554, 554, 554, 1026, 1026, 1012, 706, 977, 977, 977,
                                              977, 983, 983, 983, 983, 404, 981, 981, 981, 981,
                                              1026, 1026, 1026, 405, 706, 550, 412, 550, 1026, 1026,

                                              551, 1026, 840, 553, 841, 841, 841, 841, 416, 417,
                                              416, 405, 1026, 418, 1026, 316, 419, 707, 707, 707,
                                              707, 1026, 1026, 1026, 709, 989, 989, 989, 989, 1026,
                                              700, 987, 987, 987, 987, 132, 127, 132, 701, 1026,
                                              133, 1026, 709, 416, 417, 416, 1026, 1016, 418, 1026,
                                              316, 317, 707, 707, 707, 707, 701, 1026, 1026, 709,
                                              989, 989, 989, 989, 993, 993, 993, 993, 736, 993,
                                              993, 993, 993, 1026, 1026, 1026, 737, 709, 314, 194,
                                              314, 1026, 1026, 315, 1026, 842, 317, 843, 843, 843,
                                              843, 412, 412, 412, 737, 1026, 413, 1026, 1026, 1026,

                                              710, 710, 710, 710, 1026, 1026, 1026, 712, 995, 995,
                                              995, 995, 999, 999, 999, 999, 1001, 1001, 1001, 1001,
                                              1003, 1003, 1003, 1003, 1026, 712, 565, 417, 565, 1026,
                                              1026, 566, 1026, 567, 568, 569, 569, 569, 569, 1026,
                                              1026, 1026, 714, 1005, 1005, 1005, 1005, 1026, 1026, 1026,
                                              1026, 439, 999, 999, 999, 999, 1026, 1026, 1026, 440,
                                              714, 565, 417, 565, 1026, 1026, 566, 1026, 846, 568,
                                              847, 847, 847, 847, 576, 422, 576, 440, 1026, 577,
                                              1026, 578, 579, 580, 580, 580, 580, 1026, 1026, 1026,
                                              719, 1026, 132, 127, 132, 1026, 1026, 133, 1026, 962,

                                              1003, 1003, 1003, 1003, 1026, 1026, 1026, 963, 719, 576,
                                              422, 576, 1026, 1026, 577, 1026, 850, 579, 851, 851,
                                              851, 851, 426, 427, 426, 963, 1026, 428, 1026, 327,
                                              429, 720, 720, 720, 720, 1014, 1026, 1024, 722, 1024,
                                              1026, 1026, 1025, 1026, 750, 1005, 1005, 1005, 1005, 132,
                                              127, 132, 751, 1026, 133, 1026, 722, 426, 427, 426,
                                              1026, 1026, 428, 1026, 327, 328, 720, 720, 720, 720,
                                              751, 1026, 1026, 722, 1018, 1019, 1018, 1026, 1026, 1020,
                                              1018, 1019, 1018, 1026, 1015, 1020, 1026, 1026, 1026, 1026,
                                              1026, 722, 325, 201, 325, 1026, 1026, 326, 1026, 852,

                                              328, 853, 853, 853, 853, 422, 422, 422, 1026, 1026,
                                              423, 1026, 1026, 1026, 723, 723, 723, 723, 1018, 1019,
                                              1018, 725, 1026, 1020, 1018, 1019, 1018, 1026, 1024, 1020,
                                              1024, 1026, 1024, 1025, 1024, 1026, 1026, 1025, 1026, 725,
                                              591, 427, 591, 1026, 1026, 592, 1026, 593, 594, 595,
                                              595, 595, 595, 1024, 1026, 1024, 727, 1026, 1025, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 727, 591, 427, 591, 1026, 1026,
                                              592, 1026, 856, 594, 857, 857, 857, 857, 729, 729,
                                              729, 1026, 1026, 730, 1026, 1026, 1026, 728, 728, 728,

                                              728, 1026, 1026, 1026, 732, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 732, 729, 729, 729, 1026, 1026, 730, 1026,
                                              858, 859, 860, 860, 860, 860, 862, 729, 862, 1026,
                                              1026, 863, 1026, 864, 865, 866, 866, 866, 866, 733,
                                              734, 733, 1026, 1026, 735, 1026, 869, 870, 871, 871,
                                              871, 871, 734, 734, 734, 1026, 1026, 745, 1026, 872,
                                              873, 874, 874, 874, 874, 876, 734, 876, 1026, 1026,
                                              877, 1026, 878, 879, 880, 880, 880, 880, 733, 734,
                                              733, 1026, 1026, 735, 1026, 604, 605, 606, 606, 606,

                                              606, 1026, 1026, 1026, 737, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 737, 602, 432, 602, 1026, 1026, 603, 1026,
                                              881, 605, 882, 882, 882, 882, 739, 740, 739, 1026,
                                              1026, 741, 1026, 341, 439, 738, 738, 738, 738, 1026,
                                              1026, 1026, 743, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              743, 739, 740, 739, 1026, 1026, 741, 1026, 883, 884,
                                              885, 885, 885, 885, 740, 740, 740, 1026, 1026, 886,
                                              1026, 887, 888, 889, 889, 889, 889, 891, 740, 891,

                                              1026, 1026, 892, 1026, 893, 894, 895, 895, 895, 895,
                                              341, 342, 738, 738, 738, 738, 1026, 1026, 1026, 743,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 743, 339, 216,
                                              339, 1026, 1026, 340, 1026, 896, 342, 897, 897, 897,
                                              897, 734, 734, 734, 1026, 1026, 745, 1026, 1026, 1026,
                                              744, 744, 744, 744, 1026, 1026, 1026, 747, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 747, 876, 734, 876, 1026,
                                              1026, 877, 1026, 878, 879, 880, 880, 880, 880, 748,

                                              740, 748, 1026, 1026, 749, 1026, 900, 901, 902, 902,
                                              902, 902, 891, 740, 891, 1026, 1026, 892, 1026, 893,
                                              894, 895, 895, 895, 895, 748, 740, 748, 1026, 1026,
                                              749, 1026, 619, 620, 621, 621, 621, 621, 1026, 1026,
                                              1026, 751, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 751,
                                              617, 437, 617, 1026, 1026, 618, 1026, 903, 620, 904,
                                              904, 904, 904, 632, 447, 632, 1026, 1026, 633, 1026,
                                              634, 635, 636, 636, 636, 636, 1026, 1026, 1026, 756,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 756, 632, 447,
                                              632, 1026, 1026, 633, 1026, 907, 635, 908, 908, 908,
                                              908, 451, 452, 451, 1026, 1026, 453, 1026, 363, 454,
                                              757, 757, 757, 757, 1026, 1026, 1026, 759, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 759, 451, 452, 451, 1026,
                                              1026, 453, 1026, 363, 364, 757, 757, 757, 757, 1026,
                                              1026, 1026, 759, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              759, 361, 234, 361, 1026, 1026, 362, 1026, 909, 364,

                                              910, 910, 910, 910, 447, 447, 447, 1026, 1026, 448,
                                              1026, 1026, 1026, 760, 760, 760, 760, 1026, 1026, 1026,
                                              762, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 762, 647,
                                              452, 647, 1026, 1026, 648, 1026, 649, 650, 651, 651,
                                              651, 651, 1026, 1026, 1026, 764, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 764, 647, 452, 647, 1026, 1026, 648,
                                              1026, 913, 650, 914, 914, 914, 914, 468, 380, 468,
                                              1026, 1026, 469, 1026, 470, 471, 773, 773, 773, 773,

                                              468, 380, 468, 1026, 1026, 469, 1026, 470, 662, 773,
                                              773, 773, 773, 1026, 1026, 1026, 663, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 663, 266, 153, 266, 1026, 1026,
                                              267, 1026, 268, 269, 775, 775, 775, 775, 384, 385,
                                              384, 1026, 1026, 386, 1026, 268, 387, 775, 775, 775,
                                              775, 1026, 1026, 1026, 388, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 388, 380, 380, 380, 1026, 1026, 381, 1026,
                                              1026, 1026, 777, 777, 777, 777, 483, 385, 483, 1026,

                                              1026, 484, 1026, 485, 486, 779, 779, 779, 779, 483,
                                              385, 483, 1026, 1026, 484, 1026, 485, 670, 779, 779,
                                              779, 779, 1026, 1026, 1026, 671, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 671, 494, 389, 494, 1026, 1026, 495,
                                              1026, 496, 1026, 781, 782, 782, 782, 783, 783, 783,
                                              783, 783, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 673, 1026, 1026, 1026, 783, 783, 783,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              673, 494, 389, 494, 1026, 1026, 495, 1026, 496, 1026,

                                              781, 782, 782, 782, 783, 783, 783, 783, 783, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 783, 783, 783, 392, 393, 392,
                                              1026, 1026, 394, 1026, 281, 1026, 784, 785, 785, 785,
                                              786, 786, 786, 786, 786, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 395, 1026, 1026, 1026,
                                              786, 786, 786, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 395, 392, 393, 392, 1026, 1026, 394,
                                              1026, 281, 1026, 784, 785, 785, 785, 786, 786, 786,
                                              786, 786, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 786, 786, 786,
                                              508, 393, 508, 1026, 1026, 509, 1026, 510, 1026, 788,
                                              789, 789, 789, 790, 790, 790, 790, 790, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 677,
                                              1026, 1026, 1026, 790, 790, 790, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 677, 508, 393, 508,
                                              1026, 1026, 509, 1026, 510, 1026, 788, 789, 789, 789,
                                              790, 790, 790, 790, 790, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              790, 790, 790, 795, 679, 795, 1026, 1026, 796, 1026,

                                              797, 798, 799, 799, 799, 799, 795, 679, 795, 1026,
                                              1026, 796, 1026, 797, 798, 799, 799, 799, 799, 679,
                                              679, 679, 1026, 1026, 680, 1026, 1026, 1026, 801, 801,
                                              801, 801, 520, 397, 520, 1026, 1026, 521, 1026, 522,
                                              803, 804, 804, 804, 804, 520, 397, 520, 1026, 1026,
                                              521, 1026, 522, 523, 924, 924, 924, 924, 683, 684,
                                              683, 1026, 1026, 685, 1026, 1026, 925, 804, 804, 804,
                                              804, 1026, 1026, 1026, 926, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 926, 679, 679, 679, 1026, 1026, 680, 1026,

                                              1026, 928, 807, 807, 807, 807, 1026, 1026, 1026, 929,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 929, 809, 684,
                                              809, 1026, 1026, 810, 1026, 811, 812, 813, 813, 813,
                                              813, 809, 684, 809, 1026, 1026, 810, 1026, 811, 812,
                                              813, 813, 813, 813, 290, 171, 290, 1026, 1026, 291,
                                              1026, 292, 817, 818, 818, 818, 818, 290, 171, 290,
                                              1026, 1026, 291, 1026, 292, 293, 932, 932, 932, 932,
                                              689, 690, 689, 1026, 1026, 691, 1026, 1026, 933, 818,
                                              818, 818, 818, 1026, 1026, 1026, 934, 1026, 1026, 1026,

                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 934, 824, 690, 824, 1026, 1026,
                                              825, 1026, 826, 827, 828, 828, 828, 828, 684, 684,
                                              684, 1026, 1026, 695, 1026, 1026, 936, 822, 822, 822,
                                              822, 1026, 1026, 1026, 937, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 937, 824, 690, 824, 1026, 1026, 825, 1026,
                                              826, 827, 828, 828, 828, 828, 684, 684, 684, 1026,
                                              1026, 695, 1026, 1026, 1026, 832, 832, 832, 832, 535,
                                              402, 535, 1026, 1026, 536, 1026, 537, 834, 835, 835,

                                              835, 835, 535, 402, 535, 1026, 1026, 536, 1026, 537,
                                              538, 940, 940, 940, 940, 698, 690, 698, 1026, 1026,
                                              699, 1026, 1026, 941, 835, 835, 835, 835, 1026, 1026,
                                              1026, 942, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 942,
                                              550, 412, 550, 1026, 1026, 551, 1026, 552, 553, 841,
                                              841, 841, 841, 550, 412, 550, 1026, 1026, 551, 1026,
                                              552, 705, 841, 841, 841, 841, 1026, 1026, 1026, 706,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 706, 314, 194,

                                              314, 1026, 1026, 315, 1026, 316, 317, 843, 843, 843,
                                              843, 416, 417, 416, 1026, 1026, 418, 1026, 316, 419,
                                              843, 843, 843, 843, 1026, 1026, 1026, 420, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 420, 412, 412, 412, 1026,
                                              1026, 413, 1026, 1026, 1026, 845, 845, 845, 845, 565,
                                              417, 565, 1026, 1026, 566, 1026, 567, 568, 847, 847,
                                              847, 847, 565, 417, 565, 1026, 1026, 566, 1026, 567,
                                              713, 847, 847, 847, 847, 1026, 1026, 1026, 714, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

                                              1026, 1026, 1026, 1026, 1026, 1026, 714, 576, 422, 576,
                                              1026, 1026, 577, 1026, 578, 579, 851, 851, 851, 851,
                                              576, 422, 576, 1026, 1026, 577, 1026, 578, 718, 851,
                                              851, 851, 851, 1026, 1026, 1026, 719, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 719, 325, 201, 325, 1026, 1026,
                                              326, 1026, 327, 328, 853, 853, 853, 853, 426, 427,
                                              426, 1026, 1026, 428, 1026, 327, 429, 853, 853, 853,
                                              853, 1026, 1026, 1026, 430, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

                                              1026, 1026, 430, 422, 422, 422, 1026, 1026, 423, 1026,
                                              1026, 1026, 855, 855, 855, 855, 591, 427, 591, 1026,
                                              1026, 592, 1026, 593, 594, 857, 857, 857, 857, 591,
                                              427, 591, 1026, 1026, 592, 1026, 593, 726, 857, 857,
                                              857, 857, 1026, 1026, 1026, 727, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 727, 862, 729, 862, 1026, 1026, 863,
                                              1026, 864, 865, 866, 866, 866, 866, 862, 729, 862,
                                              1026, 1026, 863, 1026, 864, 865, 866, 866, 866, 866,
                                              729, 729, 729, 1026, 1026, 730, 1026, 1026, 1026, 868,

                                              868, 868, 868, 602, 432, 602, 1026, 1026, 603, 1026,
                                              604, 870, 871, 871, 871, 871, 602, 432, 602, 1026,
                                              1026, 603, 1026, 604, 605, 948, 948, 948, 948, 733,
                                              734, 733, 1026, 1026, 735, 1026, 1026, 949, 871, 871,
                                              871, 871, 1026, 1026, 1026, 950, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 950, 729, 729, 729, 1026, 1026, 730,
                                              1026, 1026, 952, 874, 874, 874, 874, 1026, 1026, 1026,
                                              953, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 953, 876,

                                              734, 876, 1026, 1026, 877, 1026, 878, 879, 880, 880,
                                              880, 880, 876, 734, 876, 1026, 1026, 877, 1026, 878,
                                              879, 880, 880, 880, 880, 339, 216, 339, 1026, 1026,
                                              340, 1026, 341, 884, 885, 885, 885, 885, 339, 216,
                                              339, 1026, 1026, 340, 1026, 341, 342, 956, 956, 956,
                                              956, 739, 740, 739, 1026, 1026, 741, 1026, 1026, 957,
                                              885, 885, 885, 885, 1026, 1026, 1026, 958, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 958, 891, 740, 891, 1026,
                                              1026, 892, 1026, 893, 894, 895, 895, 895, 895, 734,

                                              734, 734, 1026, 1026, 745, 1026, 1026, 960, 889, 889,
                                              889, 889, 1026, 1026, 1026, 961, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 961, 891, 740, 891, 1026, 1026, 892,
                                              1026, 893, 894, 895, 895, 895, 895, 734, 734, 734,
                                              1026, 1026, 745, 1026, 1026, 1026, 899, 899, 899, 899,
                                              617, 437, 617, 1026, 1026, 618, 1026, 619, 901, 902,
                                              902, 902, 902, 617, 437, 617, 1026, 1026, 618, 1026,
                                              619, 620, 964, 964, 964, 964, 748, 740, 748, 1026,
                                              1026, 749, 1026, 1026, 965, 902, 902, 902, 902, 1026,

                                              1026, 1026, 966, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              966, 632, 447, 632, 1026, 1026, 633, 1026, 634, 635,
                                              908, 908, 908, 908, 632, 447, 632, 1026, 1026, 633,
                                              1026, 634, 755, 908, 908, 908, 908, 1026, 1026, 1026,
                                              756, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 756, 361,
                                              234, 361, 1026, 1026, 362, 1026, 363, 364, 910, 910,
                                              910, 910, 451, 452, 451, 1026, 1026, 453, 1026, 363,
                                              454, 910, 910, 910, 910, 1026, 1026, 1026, 455, 1026,

                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 455, 447, 447, 447,
                                              1026, 1026, 448, 1026, 1026, 1026, 912, 912, 912, 912,
                                              647, 452, 647, 1026, 1026, 648, 1026, 649, 650, 914,
                                              914, 914, 914, 647, 452, 647, 1026, 1026, 648, 1026,
                                              649, 763, 914, 914, 914, 914, 1026, 1026, 1026, 764,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 764, 795, 679,
                                              795, 1026, 1026, 796, 1026, 797, 798, 799, 799, 799,
                                              799, 1026, 1026, 1026, 923, 1026, 1026, 1026, 1026, 1026,

                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 923, 795, 679, 795, 1026, 1026, 796, 1026,
                                              972, 798, 973, 973, 973, 973, 683, 684, 683, 1026,
                                              1026, 685, 1026, 522, 686, 924, 924, 924, 924, 1026,
                                              1026, 1026, 926, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              926, 683, 684, 683, 1026, 1026, 685, 1026, 522, 523,
                                              924, 924, 924, 924, 1026, 1026, 1026, 926, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 926, 520, 397, 520, 1026,

                                              1026, 521, 1026, 974, 523, 975, 975, 975, 975, 679,
                                              679, 679, 1026, 1026, 680, 1026, 1026, 1026, 927, 927,
                                              927, 927, 1026, 1026, 1026, 929, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 929, 809, 684, 809, 1026, 1026, 810,
                                              1026, 811, 812, 813, 813, 813, 813, 1026, 1026, 1026,
                                              931, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 931, 809,
                                              684, 809, 1026, 1026, 810, 1026, 978, 812, 979, 979,
                                              979, 979, 689, 690, 689, 1026, 1026, 691, 1026, 292,

                                              404, 932, 932, 932, 932, 1026, 1026, 1026, 934, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 934, 689, 690, 689,
                                              1026, 1026, 691, 1026, 292, 293, 932, 932, 932, 932,
                                              1026, 1026, 1026, 934, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 934, 290, 171, 290, 1026, 1026, 291, 1026, 980,
                                              293, 981, 981, 981, 981, 684, 684, 684, 1026, 1026,
                                              695, 1026, 1026, 1026, 935, 935, 935, 935, 1026, 1026,
                                              1026, 937, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 937,
                                              824, 690, 824, 1026, 1026, 825, 1026, 826, 827, 828,
                                              828, 828, 828, 1026, 1026, 1026, 939, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 939, 824, 690, 824, 1026, 1026,
                                              825, 1026, 984, 827, 985, 985, 985, 985, 698, 690,
                                              698, 1026, 1026, 699, 1026, 537, 700, 940, 940, 940,
                                              940, 1026, 1026, 1026, 942, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 942, 698, 690, 698, 1026, 1026, 699, 1026,

                                              537, 538, 940, 940, 940, 940, 1026, 1026, 1026, 942,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 942, 535, 402,
                                              535, 1026, 1026, 536, 1026, 986, 538, 987, 987, 987,
                                              987, 862, 729, 862, 1026, 1026, 863, 1026, 864, 865,
                                              866, 866, 866, 866, 1026, 1026, 1026, 947, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 947, 862, 729, 862, 1026,
                                              1026, 863, 1026, 990, 865, 991, 991, 991, 991, 729,
                                              729, 729, 1026, 1026, 730, 1026, 1026, 1026, 951, 951,

                                              951, 951, 1026, 1026, 1026, 953, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 953, 876, 734, 876, 1026, 1026, 877,
                                              1026, 878, 879, 880, 880, 880, 880, 1026, 1026, 1026,
                                              955, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 955, 876,
                                              734, 876, 1026, 1026, 877, 1026, 996, 879, 997, 997,
                                              997, 997, 734, 734, 734, 1026, 1026, 745, 1026, 1026,
                                              1026, 959, 959, 959, 959, 1026, 1026, 1026, 961, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

                                              1026, 1026, 1026, 1026, 1026, 1026, 961, 679, 679, 679,
                                              1026, 1026, 680, 1026, 1026, 1026, 977, 977, 977, 977,
                                              684, 684, 684, 1026, 1026, 695, 1026, 1026, 1026, 983,
                                              983, 983, 983, 729, 729, 729, 1026, 1026, 730, 1026,
                                              1026, 1026, 995, 995, 995, 995, 734, 734, 734, 1026,
                                              1026, 745, 1026, 1026, 1026, 1001, 1001, 1001, 1001, 46,
                                              46, 46, 46, 46, 46, 46, 46, 46, 80, 80,
                                              80, 80, 80, 80, 80, 80, 80, 108, 108, 108,
                                              108, 108, 108, 108, 108, 108, 118, 118, 118, 118,
                                              118, 118, 118, 118, 118, 131, 131, 131, 131, 131,

                                              131, 131, 131, 131, 135, 1026, 1026, 135, 175, 1026,
                                              1026, 175, 1026, 175, 175, 175, 175, 176, 176, 176,
                                              176, 176, 176, 176, 176, 176, 220, 1026, 1026, 220,
                                              1026, 220, 220, 1026, 220, 221, 221, 221, 221, 221,
                                              221, 221, 221, 221, 238, 238, 1026, 238, 1026, 238,
                                              238, 238, 247, 247, 1026, 247, 247, 247, 247, 247,
                                              247, 265, 265, 265, 265, 265, 265, 265, 265, 265,
                                              278, 278, 278, 278, 278, 278, 278, 278, 278, 284,
                                              284, 1026, 1026, 284, 284, 289, 289, 289, 289, 289,
                                              289, 289, 289, 289, 302, 302, 302, 302, 302, 302,

                                              302, 302, 302, 313, 313, 313, 313, 313, 313, 313,
                                              313, 313, 324, 324, 324, 324, 324, 324, 324, 324,
                                              324, 338, 338, 338, 338, 338, 338, 338, 338, 338,
                                              349, 349, 349, 349, 349, 349, 349, 349, 349, 360,
                                              360, 360, 360, 360, 360, 360, 360, 360, 238, 238,
                                              1026, 238, 1026, 238, 238, 238, 247, 247, 1026, 247,
                                              247, 247, 247, 247, 247, 131, 131, 131, 131, 131,
                                              131, 131, 131, 131, 135, 1026, 1026, 135, 265, 265,
                                              265, 265, 265, 265, 265, 265, 265, 278, 278, 278,
                                              278, 278, 278, 278, 278, 278, 284, 284, 1026, 1026,

                                              284, 284, 289, 289, 289, 289, 289, 289, 289, 289,
                                              289, 302, 302, 302, 302, 302, 302, 302, 302, 302,
                                              313, 313, 313, 313, 313, 313, 313, 313, 313, 324,
                                              324, 324, 324, 324, 324, 324, 324, 324, 338, 338,
                                              338, 338, 338, 338, 338, 338, 338, 467, 467, 467,
                                              467, 467, 467, 467, 467, 467, 482, 482, 482, 482,
                                              482, 482, 482, 482, 482, 493, 493, 493, 493, 493,
                                              493, 493, 493, 493, 499, 499, 1026, 1026, 499, 499,
                                              278, 278, 278, 278, 278, 278, 278, 278, 278, 507,
                                              507, 507, 507, 507, 507, 507, 507, 507, 519, 519,

                                              519, 519, 519, 519, 519, 519, 519, 289, 289, 289,
                                              289, 289, 289, 289, 289, 289, 534, 534, 534, 534,
                                              534, 534, 534, 534, 534, 302, 302, 302, 302, 302,
                                              302, 302, 302, 302, 549, 549, 549, 549, 549, 549,
                                              549, 549, 549, 313, 313, 313, 313, 313, 313, 313,
                                              313, 313, 564, 564, 564, 564, 564, 564, 564, 564,
                                              564, 575, 575, 575, 575, 575, 575, 575, 575, 575,
                                              324, 324, 324, 324, 324, 324, 324, 324, 324, 590,
                                              590, 590, 590, 590, 590, 590, 590, 590, 601, 601,
                                              601, 601, 601, 601, 601, 601, 601, 338, 338, 338,

                                              338, 338, 338, 338, 338, 338, 616, 616, 616, 616,
                                              616, 616, 616, 616, 616, 349, 349, 349, 349, 349,
                                              349, 349, 349, 349, 631, 631, 631, 631, 631, 631,
                                              631, 631, 631, 360, 360, 360, 360, 360, 360, 360,
                                              360, 360, 646, 646, 646, 646, 646, 646, 646, 646,
                                              646, 131, 131, 131, 131, 131, 131, 131, 131, 131,
                                              135, 1026, 1026, 135, 467, 467, 467, 467, 467, 467,
                                              467, 467, 467, 265, 265, 265, 265, 265, 265, 265,
                                              265, 265, 482, 482, 482, 482, 482, 482, 482, 482,
                                              482, 493, 493, 493, 493, 493, 493, 493, 493, 493,

                                              499, 499, 1026, 1026, 499, 499, 278, 278, 278, 278,
                                              278, 278, 278, 278, 278, 507, 507, 507, 507, 507,
                                              507, 507, 507, 507, 519, 519, 519, 519, 519, 519,
                                              519, 519, 519, 289, 289, 289, 289, 289, 289, 289,
                                              289, 289, 534, 534, 534, 534, 534, 534, 534, 534,
                                              534, 302, 302, 302, 302, 302, 302, 302, 302, 302,
                                              549, 549, 549, 549, 549, 549, 549, 549, 549, 313,
                                              313, 313, 313, 313, 313, 313, 313, 313, 564, 564,
                                              564, 564, 564, 564, 564, 564, 564, 575, 575, 575,
                                              575, 575, 575, 575, 575, 575, 324, 324, 324, 324,

                                              324, 324, 324, 324, 324, 590, 590, 590, 590, 590,
                                              590, 590, 590, 590, 601, 601, 601, 601, 601, 601,
                                              601, 601, 601, 338, 338, 338, 338, 338, 338, 338,
                                              338, 338, 616, 616, 616, 616, 616, 616, 616, 616,
                                              616, 349, 349, 349, 349, 349, 349, 349, 349, 349,
                                              631, 631, 631, 631, 631, 631, 631, 631, 631, 360,
                                              360, 360, 360, 360, 360, 360, 360, 360, 646, 646,
                                              646, 646, 646, 646, 646, 646, 646, 131, 131, 131,
                                              131, 131, 131, 131, 131, 131, 135, 1026, 1026, 135,
                                              467, 467, 467, 467, 467, 467, 467, 467, 467, 265,

                                              265, 265, 265, 265, 265, 265, 265, 265, 482, 482,
                                              482, 482, 482, 482, 482, 482, 482, 493, 493, 493,
                                              493, 493, 493, 493, 493, 493, 278, 278, 278, 278,
                                              278, 278, 278, 278, 278, 787, 787, 1026, 1026, 787,
                                              787, 507, 507, 507, 507, 507, 507, 507, 507, 507,
                                              794, 794, 794, 794, 794, 794, 794, 794, 794, 519,
                                              519, 519, 519, 519, 519, 519, 519, 519, 808, 808,
                                              808, 808, 808, 808, 808, 808, 808, 289, 289, 289,
                                              289, 289, 289, 289, 289, 289, 823, 823, 823, 823,
                                              823, 823, 823, 823, 823, 534, 534, 534, 534, 534,

                                              534, 534, 534, 534, 549, 549, 549, 549, 549, 549,
                                              549, 549, 549, 313, 313, 313, 313, 313, 313, 313,
                                              313, 313, 564, 564, 564, 564, 564, 564, 564, 564,
                                              564, 575, 575, 575, 575, 575, 575, 575, 575, 575,
                                              324, 324, 324, 324, 324, 324, 324, 324, 324, 590,
                                              590, 590, 590, 590, 590, 590, 590, 590, 861, 861,
                                              861, 861, 861, 861, 861, 861, 861, 601, 601, 601,
                                              601, 601, 601, 601, 601, 601, 875, 875, 875, 875,
                                              875, 875, 875, 875, 875, 338, 338, 338, 338, 338,
                                              338, 338, 338, 338, 890, 890, 890, 890, 890, 890,

                                              890, 890, 890, 616, 616, 616, 616, 616, 616, 616,
                                              616, 616, 631, 631, 631, 631, 631, 631, 631, 631,
                                              631, 360, 360, 360, 360, 360, 360, 360, 360, 360,
                                              646, 646, 646, 646, 646, 646, 646, 646, 646, 131,
                                              131, 131, 131, 131, 131, 131, 131, 131, 135, 1026,
                                              1026, 135, 467, 467, 467, 467, 467, 467, 467, 467,
                                              467, 265, 265, 265, 265, 265, 265, 265, 265, 265,
                                              482, 482, 482, 482, 482, 482, 482, 482, 482, 493,
                                              493, 493, 493, 493, 493, 493, 493, 493, 278, 278,
                                              278, 278, 278, 278, 278, 278, 278, 787, 787, 1026,

                                              1026, 787, 787, 507, 507, 507, 507, 507, 507, 507,
                                              507, 507, 794, 794, 794, 794, 794, 794, 794, 794,
                                              794, 519, 519, 519, 519, 519, 519, 519, 519, 519,
                                              808, 808, 808, 808, 808, 808, 808, 808, 808, 289,
                                              289, 289, 289, 289, 289, 289, 289, 289, 823, 823,
                                              823, 823, 823, 823, 823, 823, 823, 534, 534, 534,
                                              534, 534, 534, 534, 534, 534, 549, 549, 549, 549,
                                              549, 549, 549, 549, 549, 313, 313, 313, 313, 313,
                                              313, 313, 313, 313, 564, 564, 564, 564, 564, 564,
                                              564, 564, 564, 575, 575, 575, 575, 575, 575, 575,

                                              575, 575, 324, 324, 324, 324, 324, 324, 324, 324,
                                              324, 590, 590, 590, 590, 590, 590, 590, 590, 590,
                                              861, 861, 861, 861, 861, 861, 861, 861, 861, 601,
                                              601, 601, 601, 601, 601, 601, 601, 601, 875, 875,
                                              875, 875, 875, 875, 875, 875, 875, 338, 338, 338,
                                              338, 338, 338, 338, 338, 338, 890, 890, 890, 890,
                                              890, 890, 890, 890, 890, 616, 616, 616, 616, 616,
                                              616, 616, 616, 616, 631, 631, 631, 631, 631, 631,
                                              631, 631, 631, 360, 360, 360, 360, 360, 360, 360,
                                              360, 360, 646, 646, 646, 646, 646, 646, 646, 646,

                                              646, 131, 131, 131, 131, 131, 131, 131, 131, 131,
                                              135, 1026, 1026, 135, 794, 794, 794, 794, 794, 794,
                                              794, 794, 794, 519, 519, 519, 519, 519, 519, 519,
                                              519, 519, 808, 808, 808, 808, 808, 808, 808, 808,
                                              808, 289, 289, 289, 289, 289, 289, 289, 289, 289,
                                              823, 823, 823, 823, 823, 823, 823, 823, 823, 534,
                                              534, 534, 534, 534, 534, 534, 534, 534, 861, 861,
                                              861, 861, 861, 861, 861, 861, 861, 875, 875, 875,
                                              875, 875, 875, 875, 875, 875, 1017, 1017, 1017, 1017,
                                              1017, 1017, 1017, 1017, 1017, 1023, 1023, 1026, 1023, 1023,

                                              1023, 1023, 1023, 1023, 45, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026 };

static yyconst flex_int16_t yy_chk[10154] = { 0,
                                              0, 1, 1, 1, 0, 0, 1, 2, 2, 2,
                                              1151, 1120, 2, 3, 3, 3, 3, 3, 3, 3,
                                              3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                                              3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                                              3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                                              3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                                              3, 5, 5, 5, 60, 60, 5, 6, 6, 6,
                                              39, 460, 6, 39, 1064, 460, 1059, 40, 5, 5,
                                              40, 47, 47, 47, 6, 6, 47, 5, 65, 65,
                                              65, 65, 65, 6, 7, 7, 7, 1052, 1047, 7,

                                              39, 7, 7, 7, 7, 7, 7, 40, 66, 66,
                                              66, 66, 7, 9, 9, 9, 9, 9, 9, 10,
                                              10, 10, 10, 10, 10, 11, 11, 11, 11, 11,
                                              11, 12, 12, 12, 12, 12, 12, 13, 13, 13,
                                              13, 13, 13, 14, 14, 14, 14, 14, 14, 15,
                                              15, 15, 15, 15, 15, 16, 16, 16, 16, 16,
                                              16, 17, 17, 17, 1042, 17, 17, 18, 18, 18,
                                              1011, 18, 18, 19, 19, 19, 19, 19, 19, 17,
                                              68, 68, 68, 68, 68, 18, 20, 20, 20, 20,
                                              20, 20, 21, 21, 21, 21, 21, 21, 22, 22,

                                              22, 22, 22, 22, 23, 23, 23, 23, 23, 23,
                                              24, 24, 24, 24, 24, 24, 25, 25, 25, 25,
                                              25, 25, 41, 1008, 1007, 41, 42, 25, 48, 42,
                                              48, 73, 996, 48, 990, 49, 49, 49, 277, 25,
                                              49, 25, 26, 26, 26, 26, 26, 26, 73, 51,
                                              51, 51, 41, 26, 51, 277, 42, 69, 69, 69,
                                              69, 283, 962, 49, 986, 26, 984, 26, 27, 27,
                                              27, 27, 27, 27, 71, 71, 71, 71, 283, 27,
                                              962, 43, 43, 43, 43, 43, 43, 74, 74, 74,
                                              74, 27, 43, 27, 28, 28, 28, 28, 28, 28,

                                              76, 76, 76, 76, 980, 28, 978, 44, 44, 44,
                                              44, 44, 44, 78, 78, 78, 78, 28, 44, 28,
                                              29, 29, 29, 29, 29, 29, 70, 70, 70, 70,
                                              70, 29, 307, 974, 70, 77, 77, 77, 77, 77,
                                              307, 972, 969, 29, 968, 29, 30, 30, 30, 30,
                                              30, 30, 70, 85, 85, 85, 85, 30, 307, 75,
                                              75, 75, 75, 82, 82, 82, 918, 82, 82, 30,
                                              916, 30, 31, 31, 31, 31, 31, 31, 769, 75,
                                              768, 766, 658, 31, 84, 84, 84, 84, 84, 87,
                                              87, 87, 87, 87, 498, 31, 75, 31, 32, 32,

                                              32, 32, 32, 32, 86, 86, 86, 86, 86, 32,
                                              502, 498, 86, 88, 88, 88, 88, 91, 91, 91,
                                              91, 32, 657, 32, 33, 33, 33, 502, 33, 33,
                                              86, 90, 90, 90, 90, 90, 93, 93, 93, 93,
                                              93, 656, 33, 94, 94, 94, 94, 99, 99, 99,
                                              99, 99, 506, 655, 33, 461, 33, 34, 34, 34,
                                              512, 34, 34, 100, 100, 100, 100, 457, 377, 506,
                                              101, 101, 101, 101, 101, 34, 376, 512, 101, 102,
                                              102, 102, 102, 104, 104, 104, 104, 34, 375, 34,
                                              35, 35, 35, 35, 35, 35, 101, 106, 106, 106,

                                              106, 35, 374, 103, 103, 103, 103, 105, 105, 105,
                                              105, 105, 373, 35, 372, 35, 36, 36, 36, 36,
                                              36, 36, 370, 103, 110, 110, 110, 36, 110, 110,
                                              112, 112, 112, 112, 112, 113, 113, 113, 113, 36,
                                              103, 36, 37, 37, 37, 37, 37, 37, 115, 115,
                                              115, 115, 115, 37, 110, 261, 110, 116, 116, 116,
                                              116, 123, 123, 123, 123, 37, 260, 37, 38, 38,
                                              38, 38, 38, 38, 121, 514, 121, 259, 258, 38,
                                              124, 124, 124, 124, 125, 125, 125, 125, 257, 255,
                                              254, 38, 514, 38, 67, 67, 67, 253, 252, 67,

                                              124, 121, 67, 67, 67, 67, 67, 127, 121, 127,
                                              67, 121, 127, 121, 126, 126, 126, 124, 149, 126,
                                              128, 128, 128, 147, 146, 128, 145, 354, 67, 72,
                                              72, 72, 144, 143, 72, 354, 141, 140, 72, 72,
                                              72, 72, 129, 130, 129, 130, 139, 129, 130, 131,
                                              131, 131, 137, 354, 131, 132, 132, 132, 72, 136,
                                              132, 133, 133, 133, 111, 96, 133, 134, 134, 134,
                                              83, 64, 134, 63, 62, 72, 79, 79, 79, 61,
                                              59, 79, 472, 58, 79, 79, 79, 79, 79, 57,
                                              472, 134, 79, 150, 150, 150, 150, 152, 152, 152,

                                              152, 152, 156, 56, 156, 156, 156, 156, 472, 55,
                                              79, 89, 89, 89, 54, 515, 89, 53, 487, 89,
                                              89, 89, 89, 89, 52, 45, 487, 89, 157, 157,
                                              157, 157, 515, 158, 158, 158, 158, 158, 165, 165,
                                              165, 158, 554, 165, 487, 89, 92, 92, 92, 0,
                                              554, 92, 0, 569, 92, 92, 92, 92, 92, 158,
                                              0, 569, 92, 159, 159, 159, 159, 0, 554, 580,
                                              159, 160, 160, 160, 160, 0, 0, 580, 160, 569,
                                              92, 95, 95, 95, 0, 0, 95, 0, 159, 95,
                                              95, 95, 95, 95, 0, 580, 160, 95, 161, 0,

                                              161, 161, 161, 161, 166, 166, 166, 166, 168, 168,
                                              168, 168, 0, 0, 0, 95, 107, 107, 107, 0,
                                              0, 107, 0, 0, 107, 107, 107, 107, 107, 0,
                                              0, 595, 107, 170, 170, 170, 170, 170, 174, 595,
                                              174, 174, 174, 174, 176, 176, 176, 0, 176, 176,
                                              107, 114, 114, 114, 0, 0, 114, 595, 0, 114,
                                              114, 114, 114, 114, 177, 177, 177, 114, 177, 177,
                                              179, 179, 179, 179, 180, 180, 180, 180, 180, 247,
                                              0, 247, 180, 0, 247, 114, 117, 117, 117, 0,
                                              0, 117, 0, 0, 117, 117, 117, 117, 117, 0,

                                              180, 183, 117, 183, 183, 183, 183, 184, 184, 184,
                                              184, 0, 181, 181, 181, 181, 0, 0, 0, 181,
                                              117, 153, 153, 153, 0, 0, 153, 0, 153, 153,
                                              153, 153, 153, 153, 154, 154, 154, 181, 0, 154,
                                              0, 154, 154, 154, 154, 154, 154, 163, 163, 163,
                                              0, 0, 163, 0, 163, 0, 163, 163, 163, 163,
                                              164, 164, 164, 0, 0, 164, 0, 164, 0, 164,
                                              164, 164, 164, 171, 171, 171, 0, 0, 171, 0,
                                              171, 171, 171, 171, 171, 171, 172, 172, 172, 0,
                                              0, 172, 0, 172, 172, 172, 172, 172, 172, 182,

                                              182, 182, 182, 0, 0, 636, 182, 186, 186, 186,
                                              186, 186, 190, 636, 190, 190, 190, 190, 191, 191,
                                              191, 191, 0, 0, 182, 187, 187, 187, 0, 0,
                                              187, 636, 187, 187, 187, 187, 187, 187, 188, 188,
                                              188, 0, 0, 188, 0, 188, 188, 188, 188, 188,
                                              188, 193, 193, 193, 193, 193, 194, 194, 194, 0,
                                              0, 194, 0, 194, 194, 194, 194, 194, 194, 195,
                                              195, 195, 0, 0, 195, 651, 195, 195, 195, 195,
                                              195, 195, 197, 651, 197, 197, 197, 197, 198, 198,
                                              198, 198, 200, 200, 200, 200, 200, 201, 201, 201,

                                              0, 651, 201, 0, 201, 201, 201, 201, 201, 201,
                                              202, 202, 202, 0, 0, 202, 0, 202, 202, 202,
                                              202, 202, 202, 204, 0, 204, 204, 204, 204, 206,
                                              206, 206, 206, 207, 207, 207, 207, 207, 799, 813,
                                              828, 207, 208, 208, 208, 208, 799, 813, 828, 208,
                                              209, 209, 209, 209, 0, 0, 0, 209, 210, 207,
                                              210, 210, 210, 210, 799, 813, 828, 208, 211, 211,
                                              211, 211, 0, 0, 0, 209, 213, 213, 213, 213,
                                              215, 215, 215, 215, 215, 216, 216, 216, 0, 0,
                                              216, 0, 216, 216, 216, 216, 216, 216, 217, 217,

                                              217, 0, 0, 217, 0, 217, 217, 217, 217, 217,
                                              217, 219, 0, 219, 219, 219, 219, 221, 221, 221,
                                              0, 221, 221, 222, 222, 222, 0, 222, 222, 224,
                                              224, 224, 224, 226, 226, 226, 226, 226, 230, 0,
                                              230, 230, 230, 230, 0, 0, 248, 221, 248, 221,
                                              0, 248, 0, 222, 0, 222, 227, 227, 227, 0,
                                              0, 227, 0, 227, 227, 227, 227, 227, 227, 228,
                                              228, 228, 0, 0, 228, 0, 228, 228, 228, 228,
                                              228, 228, 231, 231, 231, 231, 232, 232, 232, 0,
                                              0, 232, 866, 880, 232, 232, 232, 232, 232, 0,

                                              866, 880, 232, 233, 233, 233, 233, 233, 237, 0,
                                              237, 237, 237, 237, 245, 245, 245, 245, 866, 880,
                                              232, 234, 234, 234, 0, 0, 234, 0, 234, 234,
                                              234, 234, 234, 234, 235, 235, 235, 0, 0, 235,
                                              0, 235, 235, 235, 235, 235, 235, 249, 0, 249,
                                              0, 0, 249, 250, 250, 250, 0, 0, 250, 262,
                                              262, 262, 262, 262, 263, 263, 263, 263, 271, 271,
                                              271, 271, 895, 250, 264, 264, 264, 0, 0, 264,
                                              895, 0, 264, 264, 264, 264, 264, 0, 973, 973,
                                              264, 270, 270, 270, 0, 0, 270, 973, 895, 270,

                                              273, 273, 273, 273, 0, 0, 0, 270, 264, 265,
                                              265, 265, 0, 0, 265, 973, 265, 265, 265, 265,
                                              265, 265, 266, 266, 266, 270, 0, 266, 0, 266,
                                              266, 266, 266, 266, 266, 272, 272, 272, 0, 0,
                                              272, 0, 0, 0, 272, 272, 272, 272, 274, 274,
                                              274, 274, 275, 275, 275, 275, 276, 276, 276, 0,
                                              0, 276, 0, 0, 0, 276, 276, 276, 276, 284,
                                              284, 284, 0, 0, 284, 286, 286, 286, 286, 286,
                                              287, 287, 287, 287, 0, 276, 295, 295, 295, 295,
                                              294, 294, 294, 0, 1019, 294, 1019, 0, 294, 1019,

                                              0, 0, 276, 278, 278, 278, 294, 0, 278, 0,
                                              278, 0, 278, 278, 278, 278, 279, 279, 279, 0,
                                              0, 279, 0, 279, 294, 279, 279, 279, 279, 280,
                                              280, 280, 0, 0, 280, 0, 280, 0, 280, 280,
                                              280, 280, 281, 281, 281, 0, 0, 281, 0, 281,
                                              0, 281, 281, 281, 281, 282, 282, 282, 0, 0,
                                              282, 0, 282, 0, 282, 282, 282, 282, 297, 297,
                                              297, 297, 298, 298, 298, 298, 299, 299, 299, 299,
                                              299, 0, 0, 0, 282, 300, 300, 300, 300, 301,
                                              301, 301, 301, 301, 391, 391, 391, 301, 0, 391,

                                              0, 282, 288, 288, 288, 0, 0, 288, 0, 0,
                                              288, 288, 288, 288, 288, 301, 0, 0, 288, 308,
                                              308, 308, 308, 310, 310, 310, 310, 310, 311, 311,
                                              311, 311, 319, 319, 319, 319, 288, 289, 289, 289,
                                              0, 0, 289, 0, 289, 289, 289, 289, 289, 289,
                                              290, 290, 290, 0, 0, 290, 0, 290, 290, 290,
                                              290, 290, 290, 296, 296, 296, 0, 0, 296, 0,
                                              0, 0, 296, 296, 296, 296, 302, 302, 302, 0,
                                              0, 302, 0, 302, 302, 302, 302, 302, 302, 303,
                                              303, 303, 0, 0, 303, 0, 303, 303, 303, 303,

                                              303, 303, 309, 309, 309, 0, 0, 309, 0, 979,
                                              979, 309, 309, 309, 309, 312, 312, 312, 979, 0,
                                              312, 0, 0, 312, 312, 312, 312, 312, 0, 985,
                                              985, 312, 318, 318, 318, 0, 979, 318, 985, 0,
                                              318, 321, 321, 321, 321, 321, 0, 0, 318, 312,
                                              313, 313, 313, 0, 0, 313, 985, 313, 313, 313,
                                              313, 313, 313, 314, 314, 314, 318, 0, 314, 0,
                                              314, 314, 314, 314, 314, 314, 320, 320, 320, 0,
                                              0, 320, 0, 0, 0, 320, 320, 320, 320, 322,
                                              322, 322, 322, 323, 323, 323, 0, 0, 323, 0,

                                              0, 323, 323, 323, 323, 323, 0, 991, 991, 323,
                                              329, 329, 329, 0, 0, 329, 991, 0, 329, 330,
                                              330, 330, 330, 0, 0, 0, 329, 323, 324, 324,
                                              324, 0, 0, 324, 991, 324, 324, 324, 324, 324,
                                              324, 325, 325, 325, 329, 0, 325, 0, 325, 325,
                                              325, 325, 325, 325, 331, 331, 331, 0, 0, 331,
                                              0, 0, 0, 331, 331, 331, 331, 332, 332, 332,
                                              332, 333, 333, 333, 333, 335, 335, 335, 335, 335,
                                              336, 336, 336, 336, 337, 337, 337, 0, 0, 337,
                                              0, 0, 337, 337, 337, 337, 337, 0, 997, 997,

                                              337, 343, 343, 343, 0, 0, 343, 997, 0, 343,
                                              344, 344, 344, 344, 0, 0, 0, 343, 337, 338,
                                              338, 338, 0, 0, 338, 997, 338, 338, 338, 338,
                                              338, 338, 339, 339, 339, 343, 0, 339, 0, 339,
                                              339, 339, 339, 339, 339, 345, 345, 345, 0, 0,
                                              345, 0, 0, 0, 345, 345, 345, 345, 346, 346,
                                              346, 346, 346, 347, 347, 347, 347, 348, 348, 348,
                                              348, 348, 0, 0, 0, 348, 355, 355, 355, 355,
                                              357, 357, 357, 357, 357, 358, 358, 358, 358, 366,
                                              366, 366, 366, 348, 349, 349, 349, 0, 0, 349,

                                              0, 349, 349, 349, 349, 349, 349, 356, 356, 356,
                                              0, 0, 356, 0, 0, 0, 356, 356, 356, 356,
                                              359, 359, 359, 0, 0, 359, 0, 0, 359, 359,
                                              359, 359, 359, 0, 0, 0, 359, 365, 365, 365,
                                              0, 0, 365, 0, 0, 365, 379, 379, 379, 379,
                                              379, 0, 0, 365, 359, 360, 360, 360, 0, 0,
                                              360, 0, 360, 360, 360, 360, 360, 360, 0, 0,
                                              0, 365, 367, 367, 367, 0, 0, 367, 0, 0,
                                              0, 367, 367, 367, 367, 369, 369, 369, 0, 383,
                                              369, 383, 383, 383, 383, 400, 0, 400, 400, 400,

                                              400, 0, 0, 0, 369, 380, 380, 380, 0, 0,
                                              380, 0, 380, 380, 380, 380, 380, 380, 381, 381,
                                              381, 0, 0, 381, 0, 381, 381, 381, 381, 381,
                                              381, 384, 384, 384, 0, 0, 384, 0, 384, 384,
                                              384, 384, 384, 384, 385, 385, 385, 0, 0, 385,
                                              0, 385, 385, 385, 385, 385, 385, 386, 386, 386,
                                              0, 0, 386, 0, 386, 386, 386, 386, 386, 386,
                                              387, 387, 387, 387, 387, 387, 0, 0, 408, 387,
                                              408, 408, 408, 408, 464, 464, 464, 464, 464, 406,
                                              406, 406, 406, 0, 0, 0, 406, 387, 388, 388,

                                              388, 0, 0, 388, 0, 388, 388, 388, 388, 388,
                                              388, 389, 389, 389, 406, 0, 389, 0, 389, 0,
                                              389, 389, 389, 389, 390, 390, 390, 0, 0, 390,
                                              0, 390, 0, 390, 390, 390, 390, 392, 392, 392,
                                              0, 0, 392, 0, 392, 0, 392, 392, 392, 392,
                                              393, 393, 393, 0, 0, 393, 0, 393, 0, 393,
                                              393, 393, 393, 394, 394, 394, 0, 0, 394, 0,
                                              394, 0, 394, 394, 394, 394, 395, 395, 395, 0,
                                              0, 395, 0, 395, 0, 395, 395, 395, 395, 395,
                                              395, 395, 395, 395, 407, 407, 407, 407, 0, 0,

                                              415, 407, 415, 415, 415, 415, 0, 0, 0, 395,
                                              395, 395, 396, 396, 396, 0, 0, 396, 0, 407,
                                              0, 396, 396, 396, 396, 0, 0, 425, 396, 425,
                                              425, 425, 425, 435, 0, 435, 435, 435, 435, 443,
                                              0, 443, 443, 443, 443, 0, 396, 397, 397, 397,
                                              0, 0, 397, 0, 397, 397, 397, 397, 397, 397,
                                              398, 398, 398, 0, 0, 398, 0, 398, 398, 398,
                                              398, 398, 398, 401, 401, 401, 0, 0, 401, 0,
                                              401, 401, 401, 401, 401, 401, 402, 402, 402, 0,
                                              0, 402, 0, 402, 402, 402, 402, 402, 402, 403,

                                              403, 403, 0, 0, 403, 0, 403, 403, 403, 403,
                                              403, 403, 404, 404, 404, 0, 0, 404, 0, 404,
                                              404, 404, 404, 404, 404, 0, 0, 450, 404, 450,
                                              450, 450, 450, 465, 465, 465, 465, 0, 441, 441,
                                              441, 441, 0, 0, 0, 441, 404, 405, 405, 405,
                                              0, 0, 405, 0, 405, 405, 405, 405, 405, 405,
                                              409, 409, 409, 441, 0, 409, 0, 409, 409, 409,
                                              409, 409, 409, 456, 456, 456, 409, 0, 456, 473,
                                              473, 473, 473, 0, 0, 0, 442, 442, 442, 442,
                                              0, 0, 0, 442, 409, 410, 410, 410, 0, 0,

                                              410, 0, 410, 410, 410, 410, 410, 410, 411, 411,
                                              411, 442, 0, 411, 0, 0, 0, 411, 411, 411,
                                              411, 0, 0, 0, 411, 479, 479, 479, 479, 479,
                                              0, 0, 0, 466, 466, 466, 466, 466, 0, 0,
                                              0, 466, 411, 412, 412, 412, 0, 0, 412, 0,
                                              412, 412, 412, 412, 412, 412, 413, 413, 413, 466,
                                              0, 413, 0, 413, 413, 413, 413, 413, 413, 416,
                                              416, 416, 0, 0, 416, 0, 416, 416, 416, 416,
                                              416, 416, 417, 417, 417, 0, 0, 417, 0, 417,
                                              417, 417, 417, 417, 417, 418, 418, 418, 0, 0,

                                              418, 0, 418, 418, 418, 418, 418, 418, 419, 419,
                                              419, 0, 0, 419, 0, 419, 419, 419, 419, 419,
                                              419, 0, 0, 0, 419, 480, 480, 480, 480, 488,
                                              488, 488, 488, 489, 489, 489, 489, 489, 0, 0,
                                              0, 489, 419, 420, 420, 420, 0, 0, 420, 0,
                                              420, 420, 420, 420, 420, 420, 421, 421, 421, 489,
                                              0, 421, 0, 0, 0, 421, 421, 421, 421, 0,
                                              0, 0, 421, 490, 490, 490, 490, 492, 492, 492,
                                              492, 499, 499, 499, 0, 0, 499, 0, 0, 0,
                                              421, 422, 422, 422, 0, 0, 422, 0, 422, 422,

                                              422, 422, 422, 422, 423, 423, 423, 0, 0, 423,
                                              0, 423, 423, 423, 423, 423, 423, 426, 426, 426,
                                              0, 0, 426, 0, 426, 426, 426, 426, 426, 426,
                                              427, 427, 427, 0, 0, 427, 0, 427, 427, 427,
                                              427, 427, 427, 428, 428, 428, 0, 0, 428, 0,
                                              428, 428, 428, 428, 428, 428, 429, 429, 429, 0,
                                              0, 429, 0, 429, 429, 429, 429, 429, 429, 0,
                                              0, 0, 429, 0, 491, 491, 491, 491, 504, 504,
                                              504, 504, 516, 516, 516, 516, 516, 0, 0, 0,
                                              429, 430, 430, 430, 491, 0, 430, 0, 430, 430,

                                              430, 430, 430, 430, 431, 431, 431, 0, 0, 431,
                                              0, 491, 0, 431, 431, 431, 431, 0, 0, 0,
                                              431, 517, 517, 517, 517, 525, 525, 525, 525, 531,
                                              531, 531, 531, 531, 532, 532, 532, 532, 431, 432,
                                              432, 432, 0, 0, 432, 0, 432, 432, 432, 432,
                                              432, 432, 433, 433, 433, 0, 0, 433, 0, 433,
                                              433, 433, 433, 433, 433, 436, 436, 436, 0, 0,
                                              436, 0, 436, 436, 436, 436, 436, 436, 437, 437,
                                              437, 0, 0, 437, 0, 437, 437, 437, 437, 437,
                                              437, 438, 438, 438, 0, 0, 438, 0, 438, 438,

                                              438, 438, 438, 438, 439, 439, 439, 0, 0, 439,
                                              0, 439, 439, 439, 439, 439, 439, 0, 0, 0,
                                              439, 524, 524, 524, 0, 0, 524, 0, 0, 524,
                                              540, 540, 540, 540, 0, 0, 0, 524, 439, 440,
                                              440, 440, 0, 0, 440, 0, 440, 440, 440, 440,
                                              440, 440, 444, 444, 444, 524, 0, 444, 0, 444,
                                              444, 444, 444, 444, 444, 0, 0, 0, 444, 539,
                                              539, 539, 0, 0, 539, 0, 0, 539, 542, 542,
                                              542, 542, 0, 0, 0, 539, 444, 445, 445, 445,
                                              0, 0, 445, 0, 445, 445, 445, 445, 445, 445,

                                              446, 446, 446, 539, 0, 446, 0, 0, 0, 446,
                                              446, 446, 446, 0, 0, 0, 446, 543, 543, 543,
                                              543, 546, 546, 546, 546, 546, 547, 547, 547, 547,
                                              555, 555, 555, 555, 446, 447, 447, 447, 0, 0,
                                              447, 0, 447, 447, 447, 447, 447, 447, 448, 448,
                                              448, 0, 0, 448, 0, 448, 448, 448, 448, 448,
                                              448, 451, 451, 451, 0, 0, 451, 0, 451, 451,
                                              451, 451, 451, 451, 452, 452, 452, 0, 0, 452,
                                              0, 452, 452, 452, 452, 452, 452, 453, 453, 453,
                                              0, 0, 453, 0, 453, 453, 453, 453, 453, 453,

                                              454, 454, 454, 0, 0, 454, 0, 454, 454, 454,
                                              454, 454, 454, 0, 0, 0, 454, 561, 561, 561,
                                              561, 561, 0, 0, 0, 548, 548, 548, 548, 548,
                                              0, 0, 0, 548, 454, 455, 455, 455, 0, 0,
                                              455, 0, 455, 455, 455, 455, 455, 455, 467, 467,
                                              467, 548, 0, 467, 0, 467, 467, 467, 467, 467,
                                              467, 468, 468, 468, 0, 0, 468, 0, 468, 468,
                                              468, 468, 468, 468, 474, 474, 474, 0, 0, 474,
                                              0, 0, 0, 474, 474, 474, 474, 475, 475, 475,
                                              0, 0, 475, 0, 475, 475, 475, 475, 475, 475,

                                              476, 476, 476, 0, 0, 476, 0, 476, 476, 476,
                                              476, 476, 476, 477, 477, 477, 0, 0, 477, 0,
                                              0, 477, 477, 477, 477, 477, 0, 0, 0, 477,
                                              562, 562, 562, 562, 570, 570, 570, 570, 571, 571,
                                              571, 571, 571, 0, 0, 0, 571, 477, 478, 478,
                                              478, 0, 0, 478, 0, 478, 478, 478, 478, 478,
                                              478, 481, 481, 481, 571, 0, 481, 0, 0, 481,
                                              481, 481, 481, 481, 0, 0, 0, 481, 572, 572,
                                              572, 572, 572, 573, 573, 573, 573, 581, 581, 581,
                                              581, 588, 588, 588, 588, 481, 482, 482, 482, 0,

                                              0, 482, 0, 482, 482, 482, 482, 482, 482, 493,
                                              493, 493, 0, 0, 493, 0, 493, 0, 493, 493,
                                              493, 493, 494, 494, 494, 0, 0, 494, 0, 494,
                                              0, 494, 494, 494, 494, 495, 495, 495, 0, 0,
                                              495, 0, 495, 0, 495, 495, 495, 495, 496, 496,
                                              496, 0, 0, 496, 0, 496, 0, 496, 496, 496,
                                              496, 497, 497, 497, 0, 0, 497, 0, 497, 0,
                                              497, 497, 497, 497, 574, 574, 574, 574, 574, 0,
                                              0, 0, 574, 587, 587, 587, 587, 587, 0, 0,
                                              497, 596, 596, 596, 596, 598, 598, 598, 598, 598,

                                              574, 599, 599, 599, 599, 0, 0, 497, 500, 500,
                                              500, 0, 0, 500, 0, 500, 0, 500, 500, 500,
                                              500, 501, 501, 501, 0, 0, 501, 0, 501, 0,
                                              501, 501, 501, 501, 597, 597, 597, 597, 597, 0,
                                              0, 0, 597, 607, 607, 607, 607, 0, 0, 0,
                                              501, 613, 613, 613, 613, 613, 614, 614, 614, 614,
                                              597, 622, 622, 622, 622, 0, 0, 501, 503, 503,
                                              503, 0, 0, 503, 0, 503, 0, 503, 503, 503,
                                              503, 505, 505, 505, 0, 0, 505, 0, 0, 0,
                                              505, 505, 505, 505, 0, 0, 0, 606, 606, 606,

                                              0, 0, 606, 0, 0, 606, 624, 624, 624, 624,
                                              505, 0, 0, 606, 625, 625, 625, 625, 628, 628,
                                              628, 628, 628, 629, 629, 629, 629, 505, 507, 507,
                                              507, 606, 0, 507, 0, 507, 0, 507, 507, 507,
                                              507, 508, 508, 508, 0, 0, 508, 0, 508, 0,
                                              508, 508, 508, 508, 509, 509, 509, 0, 0, 509,
                                              0, 509, 0, 509, 509, 509, 509, 510, 510, 510,
                                              0, 0, 510, 0, 510, 0, 510, 510, 510, 510,
                                              511, 511, 511, 0, 0, 511, 0, 511, 0, 511,
                                              511, 511, 511, 630, 630, 630, 630, 630, 0, 0,

                                              0, 630, 621, 621, 621, 0, 0, 621, 0, 511,
                                              621, 637, 637, 637, 637, 0, 0, 0, 621, 630,
                                              643, 643, 643, 643, 643, 0, 511, 513, 513, 513,
                                              513, 513, 513, 513, 513, 513, 621, 644, 644, 644,
                                              644, 652, 652, 652, 652, 0, 0, 513, 0, 0,
                                              0, 513, 513, 513, 653, 653, 653, 653, 653, 0,
                                              0, 0, 653, 0, 513, 518, 518, 518, 0, 0,
                                              518, 0, 0, 518, 518, 518, 518, 518, 0, 0,
                                              653, 518, 661, 0, 661, 661, 661, 661, 654, 654,
                                              654, 0, 669, 654, 669, 669, 669, 669, 0, 518,

                                              519, 519, 519, 0, 0, 519, 0, 519, 519, 519,
                                              519, 519, 519, 520, 520, 520, 654, 0, 520, 0,
                                              520, 520, 520, 520, 520, 520, 526, 526, 526, 0,
                                              0, 526, 0, 0, 0, 526, 526, 526, 526, 527,
                                              527, 527, 0, 0, 527, 0, 527, 527, 527, 527,
                                              527, 527, 528, 528, 528, 0, 0, 528, 0, 528,
                                              528, 528, 528, 528, 528, 529, 529, 529, 0, 0,
                                              529, 0, 0, 529, 529, 529, 529, 529, 676, 676,
                                              676, 529, 682, 676, 682, 682, 682, 682, 0, 0,
                                              0, 659, 659, 659, 659, 0, 0, 0, 659, 529,

                                              530, 530, 530, 0, 0, 530, 0, 530, 530, 530,
                                              530, 530, 530, 533, 533, 533, 659, 0, 533, 0,
                                              0, 533, 533, 533, 533, 533, 0, 0, 697, 533,
                                              697, 697, 697, 697, 770, 770, 770, 770, 0, 660,
                                              660, 660, 660, 0, 0, 0, 660, 533, 534, 534,
                                              534, 0, 0, 534, 0, 534, 534, 534, 534, 534,
                                              534, 541, 541, 541, 660, 0, 541, 0, 0, 541,
                                              541, 541, 541, 541, 0, 0, 704, 541, 704, 704,
                                              704, 704, 771, 771, 771, 771, 0, 702, 702, 702,
                                              702, 0, 0, 0, 702, 541, 544, 544, 544, 0,

                                              0, 544, 0, 544, 544, 544, 544, 544, 544, 545,
                                              545, 545, 702, 0, 545, 0, 545, 545, 545, 545,
                                              545, 545, 0, 0, 712, 545, 712, 712, 712, 712,
                                              776, 776, 776, 776, 0, 703, 703, 703, 703, 0,
                                              0, 0, 703, 545, 549, 549, 549, 0, 0, 549,
                                              0, 549, 549, 549, 549, 549, 549, 550, 550, 550,
                                              703, 0, 550, 0, 550, 550, 550, 550, 550, 550,
                                              556, 556, 556, 0, 0, 556, 0, 0, 0, 556,
                                              556, 556, 556, 557, 557, 557, 0, 0, 557, 0,
                                              557, 557, 557, 557, 557, 557, 558, 558, 558, 0,

                                              0, 558, 0, 558, 558, 558, 558, 558, 558, 559,
                                              559, 559, 0, 0, 559, 0, 0, 559, 559, 559,
                                              559, 559, 0, 0, 717, 559, 717, 717, 717, 717,
                                              791, 791, 791, 791, 791, 715, 715, 715, 715, 0,
                                              0, 0, 715, 559, 560, 560, 560, 0, 0, 560,
                                              0, 560, 560, 560, 560, 560, 560, 563, 563, 563,
                                              715, 0, 563, 0, 0, 563, 563, 563, 563, 563,
                                              0, 0, 725, 563, 725, 725, 725, 725, 792, 792,
                                              792, 792, 0, 716, 716, 716, 716, 0, 0, 0,
                                              716, 563, 564, 564, 564, 0, 0, 564, 0, 564,

                                              564, 564, 564, 564, 564, 575, 575, 575, 716, 0,
                                              575, 0, 575, 575, 575, 575, 575, 575, 576, 576,
                                              576, 0, 0, 576, 0, 576, 576, 576, 576, 576,
                                              576, 582, 582, 582, 0, 0, 582, 0, 0, 0,
                                              582, 582, 582, 582, 583, 583, 583, 0, 0, 583,
                                              0, 583, 583, 583, 583, 583, 583, 584, 584, 584,
                                              0, 0, 584, 0, 584, 584, 584, 584, 584, 584,
                                              585, 585, 585, 0, 0, 585, 0, 0, 585, 585,
                                              585, 585, 585, 0, 0, 732, 585, 732, 732, 732,
                                              732, 747, 0, 747, 747, 747, 747, 754, 0, 754,

                                              754, 754, 754, 0, 585, 586, 586, 586, 0, 0,
                                              586, 0, 586, 586, 586, 586, 586, 586, 589, 589,
                                              589, 0, 0, 589, 0, 0, 589, 589, 589, 589,
                                              589, 0, 0, 762, 589, 762, 762, 762, 762, 800,
                                              800, 800, 800, 0, 752, 752, 752, 752, 0, 0,
                                              0, 752, 589, 590, 590, 590, 0, 0, 590, 0,
                                              590, 590, 590, 590, 590, 590, 600, 600, 600, 752,
                                              0, 600, 0, 0, 600, 600, 600, 600, 600, 765,
                                              765, 765, 600, 0, 765, 0, 787, 787, 787, 0,
                                              765, 787, 753, 753, 753, 753, 0, 0, 0, 753,

                                              600, 601, 601, 601, 0, 0, 601, 0, 601, 601,
                                              601, 601, 601, 601, 602, 602, 602, 753, 0, 602,
                                              0, 602, 602, 602, 602, 602, 602, 608, 608, 608,
                                              0, 0, 608, 0, 0, 0, 608, 608, 608, 608,
                                              609, 609, 609, 0, 0, 609, 0, 609, 609, 609,
                                              609, 609, 609, 610, 610, 610, 0, 0, 610, 0,
                                              610, 610, 610, 610, 610, 610, 611, 611, 611, 0,
                                              0, 611, 0, 0, 611, 611, 611, 611, 611, 0,
                                              0, 0, 611, 805, 805, 805, 805, 805, 0, 0,
                                              0, 793, 793, 793, 793, 793, 0, 0, 0, 793,

                                              611, 612, 612, 612, 0, 0, 612, 0, 612, 612,
                                              612, 612, 612, 612, 615, 615, 615, 793, 0, 615,
                                              0, 0, 615, 615, 615, 615, 615, 0, 0, 0,
                                              615, 806, 806, 806, 806, 814, 814, 814, 814, 815,
                                              815, 815, 815, 815, 0, 0, 0, 815, 615, 616,
                                              616, 616, 0, 0, 616, 0, 616, 616, 616, 616,
                                              616, 616, 623, 623, 623, 815, 0, 623, 0, 0,
                                              623, 623, 623, 623, 623, 0, 0, 0, 623, 820,
                                              820, 820, 820, 820, 821, 821, 821, 821, 829, 829,
                                              829, 829, 831, 831, 831, 831, 623, 626, 626, 626,

                                              0, 0, 626, 0, 626, 626, 626, 626, 626, 626,
                                              627, 627, 627, 0, 0, 627, 0, 627, 627, 627,
                                              627, 627, 627, 0, 0, 0, 627, 836, 836, 836,
                                              836, 838, 838, 838, 838, 830, 830, 830, 830, 830,
                                              0, 0, 0, 830, 627, 631, 631, 631, 0, 0,
                                              631, 0, 631, 631, 631, 631, 631, 631, 632, 632,
                                              632, 830, 0, 632, 0, 632, 632, 632, 632, 632,
                                              632, 638, 638, 638, 0, 0, 638, 0, 0, 0,
                                              638, 638, 638, 638, 639, 639, 639, 0, 0, 639,
                                              0, 639, 639, 639, 639, 639, 639, 640, 640, 640,

                                              0, 0, 640, 0, 640, 640, 640, 640, 640, 640,
                                              641, 641, 641, 0, 0, 641, 0, 0, 641, 641,
                                              641, 641, 641, 0, 0, 0, 641, 839, 839, 839,
                                              839, 844, 844, 844, 844, 837, 837, 837, 837, 837,
                                              0, 0, 0, 837, 641, 642, 642, 642, 0, 0,
                                              642, 0, 642, 642, 642, 642, 642, 642, 645, 645,
                                              645, 837, 0, 645, 0, 0, 645, 645, 645, 645,
                                              645, 0, 0, 0, 645, 848, 848, 848, 848, 849,
                                              849, 849, 849, 854, 854, 854, 854, 858, 858, 858,
                                              858, 858, 645, 646, 646, 646, 0, 0, 646, 0,

                                              646, 646, 646, 646, 646, 646, 662, 662, 662, 0,
                                              0, 662, 0, 662, 662, 662, 662, 662, 662, 0,
                                              0, 0, 662, 859, 859, 859, 859, 867, 867, 867,
                                              867, 860, 860, 860, 860, 860, 0, 0, 0, 860,
                                              662, 663, 663, 663, 0, 0, 663, 0, 663, 663,
                                              663, 663, 663, 663, 664, 664, 664, 860, 0, 664,
                                              0, 664, 664, 664, 664, 664, 664, 0, 0, 0,
                                              664, 872, 872, 872, 872, 872, 873, 873, 873, 873,
                                              881, 881, 881, 881, 888, 888, 888, 888, 664, 665,
                                              665, 665, 0, 0, 665, 0, 665, 665, 665, 665,

                                              665, 665, 0, 0, 0, 665, 887, 887, 887, 887,
                                              887, 0, 0, 0, 882, 882, 882, 882, 882, 0,
                                              0, 0, 882, 665, 666, 666, 666, 0, 0, 666,
                                              0, 666, 666, 666, 666, 666, 666, 667, 667, 667,
                                              882, 0, 667, 0, 0, 0, 667, 667, 667, 667,
                                              0, 0, 0, 667, 896, 896, 896, 896, 0, 897,
                                              897, 897, 897, 897, 1006, 1006, 1006, 897, 0, 1006,
                                              0, 667, 670, 670, 670, 0, 0, 670, 0, 670,
                                              670, 670, 670, 670, 670, 897, 0, 0, 670, 898,
                                              898, 898, 898, 903, 903, 903, 903, 904, 904, 904,

                                              904, 904, 0, 0, 0, 904, 670, 671, 671, 671,
                                              0, 0, 671, 0, 671, 671, 671, 671, 671, 671,
                                              673, 673, 673, 904, 0, 673, 0, 673, 0, 673,
                                              673, 673, 673, 673, 673, 673, 673, 673, 905, 905,
                                              905, 905, 906, 906, 906, 906, 911, 911, 911, 911,
                                              0, 0, 0, 673, 673, 673, 674, 674, 674, 0,
                                              0, 674, 0, 674, 0, 674, 674, 674, 674, 915,
                                              915, 915, 0, 1021, 915, 1021, 0, 915, 1021, 0,
                                              0, 919, 919, 919, 919, 674, 0, 921, 919, 921,
                                              921, 921, 921, 929, 0, 929, 929, 929, 929, 0,

                                              0, 0, 674, 675, 675, 675, 919, 0, 675, 0,
                                              675, 0, 675, 675, 675, 675, 675, 675, 675, 675,
                                              675, 0, 920, 920, 920, 920, 0, 0, 937, 920,
                                              937, 937, 937, 937, 0, 0, 675, 675, 675, 677,
                                              677, 677, 0, 0, 677, 0, 677, 920, 677, 677,
                                              677, 677, 677, 677, 677, 677, 677, 943, 943, 943,
                                              943, 0, 0, 945, 943, 945, 945, 945, 945, 0,
                                              0, 0, 677, 677, 677, 678, 678, 678, 0, 0,
                                              678, 0, 943, 0, 678, 678, 678, 678, 0, 0,
                                              0, 678, 948, 948, 948, 948, 948, 970, 970, 970,

                                              970, 944, 944, 944, 944, 0, 0, 0, 944, 678,
                                              679, 679, 679, 0, 0, 679, 0, 679, 679, 679,
                                              679, 679, 679, 680, 680, 680, 944, 0, 680, 0,
                                              680, 680, 680, 680, 680, 680, 683, 683, 683, 0,
                                              0, 683, 0, 683, 683, 683, 683, 683, 683, 684,
                                              684, 684, 0, 0, 684, 0, 684, 684, 684, 684,
                                              684, 684, 685, 685, 685, 0, 0, 685, 0, 685,
                                              685, 685, 685, 685, 685, 686, 686, 686, 0, 0,
                                              686, 0, 686, 686, 686, 686, 686, 686, 0, 0,
                                              0, 686, 949, 949, 949, 949, 949, 950, 0, 950,

                                              950, 950, 950, 953, 0, 953, 953, 953, 953, 686,
                                              687, 687, 687, 0, 0, 687, 0, 687, 687, 687,
                                              687, 687, 687, 688, 688, 688, 0, 0, 688, 0,
                                              688, 688, 688, 688, 688, 688, 0, 0, 0, 688,
                                              956, 956, 956, 956, 956, 957, 957, 957, 957, 957,
                                              958, 0, 958, 958, 958, 958, 0, 688, 689, 689,
                                              689, 0, 0, 689, 0, 689, 689, 689, 689, 689,
                                              689, 690, 690, 690, 0, 0, 690, 0, 690, 690,
                                              690, 690, 690, 690, 691, 691, 691, 0, 0, 691,
                                              0, 691, 691, 691, 691, 691, 691, 692, 692, 692,

                                              692, 692, 692, 0, 0, 961, 692, 961, 961, 961,
                                              961, 963, 0, 963, 963, 963, 963, 964, 964, 964,
                                              964, 964, 0, 0, 692, 693, 693, 693, 0, 0,
                                              693, 0, 693, 693, 693, 693, 693, 693, 694, 694,
                                              694, 0, 0, 694, 0, 0, 0, 694, 694, 694,
                                              694, 0, 0, 0, 694, 965, 965, 965, 965, 965,
                                              966, 0, 966, 966, 966, 966, 971, 971, 971, 971,
                                              0, 0, 694, 695, 695, 695, 0, 0, 695, 0,
                                              695, 695, 695, 695, 695, 695, 698, 698, 698, 0,
                                              0, 698, 0, 698, 698, 698, 698, 698, 698, 699,

                                              699, 699, 0, 0, 699, 0, 699, 699, 699, 699,
                                              699, 699, 700, 700, 700, 0, 0, 700, 0, 700,
                                              700, 700, 700, 700, 700, 967, 967, 967, 700, 0,
                                              967, 1009, 1009, 1009, 967, 0, 1009, 975, 975, 975,
                                              975, 975, 0, 0, 0, 975, 700, 701, 701, 701,
                                              0, 0, 701, 0, 701, 701, 701, 701, 701, 701,
                                              705, 705, 705, 975, 0, 705, 0, 705, 705, 705,
                                              705, 705, 705, 0, 0, 1009, 705, 976, 976, 976,
                                              976, 982, 982, 982, 982, 981, 981, 981, 981, 981,
                                              0, 0, 0, 981, 705, 706, 706, 706, 0, 0,

                                              706, 0, 706, 706, 706, 706, 706, 706, 707, 707,
                                              707, 981, 0, 707, 0, 707, 707, 707, 707, 707,
                                              707, 0, 0, 0, 707, 988, 988, 988, 988, 0,
                                              987, 987, 987, 987, 987, 1015, 1015, 1015, 987, 0,
                                              1015, 0, 707, 708, 708, 708, 0, 1015, 708, 0,
                                              708, 708, 708, 708, 708, 708, 987, 0, 0, 708,
                                              989, 989, 989, 989, 992, 992, 992, 992, 993, 993,
                                              993, 993, 993, 0, 0, 0, 993, 708, 709, 709,
                                              709, 0, 0, 709, 0, 709, 709, 709, 709, 709,
                                              709, 710, 710, 710, 993, 0, 710, 0, 0, 0,

                                              710, 710, 710, 710, 0, 0, 0, 710, 994, 994,
                                              994, 994, 998, 998, 998, 998, 1000, 1000, 1000, 1000,
                                              1002, 1002, 1002, 1002, 0, 710, 713, 713, 713, 0,
                                              0, 713, 0, 713, 713, 713, 713, 713, 713, 0,
                                              0, 0, 713, 1004, 1004, 1004, 1004, 0, 0, 0,
                                              0, 999, 999, 999, 999, 999, 0, 0, 0, 999,
                                              713, 714, 714, 714, 0, 0, 714, 0, 714, 714,
                                              714, 714, 714, 714, 718, 718, 718, 999, 0, 718,
                                              0, 718, 718, 718, 718, 718, 718, 0, 0, 0,
                                              718, 0, 1012, 1012, 1012, 0, 0, 1012, 0, 1003,

                                              1003, 1003, 1003, 1003, 0, 0, 0, 1003, 718, 719,
                                              719, 719, 0, 0, 719, 0, 719, 719, 719, 719,
                                              719, 719, 720, 720, 720, 1003, 0, 720, 0, 720,
                                              720, 720, 720, 720, 720, 1012, 0, 1022, 720, 1022,
                                              0, 0, 1022, 0, 1005, 1005, 1005, 1005, 1005, 1014,
                                              1014, 1014, 1005, 0, 1014, 0, 720, 721, 721, 721,
                                              0, 0, 721, 0, 721, 721, 721, 721, 721, 721,
                                              1005, 0, 0, 721, 1016, 1016, 1016, 0, 0, 1016,
                                              1017, 1017, 1017, 0, 1014, 1017, 0, 0, 0, 0,
                                              0, 721, 722, 722, 722, 0, 0, 722, 0, 722,

                                              722, 722, 722, 722, 722, 723, 723, 723, 0, 0,
                                              723, 0, 0, 0, 723, 723, 723, 723, 1018, 1018,
                                              1018, 723, 0, 1018, 1020, 1020, 1020, 0, 1023, 1020,
                                              1023, 0, 1024, 1023, 1024, 0, 0, 1024, 0, 723,
                                              726, 726, 726, 0, 0, 726, 0, 726, 726, 726,
                                              726, 726, 726, 1025, 0, 1025, 726, 0, 1025, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 726, 727, 727, 727, 0, 0,
                                              727, 0, 727, 727, 727, 727, 727, 727, 728, 728,
                                              728, 0, 0, 728, 0, 0, 0, 728, 728, 728,

                                              728, 0, 0, 0, 728, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 728, 729, 729, 729, 0, 0, 729, 0,
                                              729, 729, 729, 729, 729, 729, 730, 730, 730, 0,
                                              0, 730, 0, 730, 730, 730, 730, 730, 730, 733,
                                              733, 733, 0, 0, 733, 0, 733, 733, 733, 733,
                                              733, 733, 734, 734, 734, 0, 0, 734, 0, 734,
                                              734, 734, 734, 734, 734, 735, 735, 735, 0, 0,
                                              735, 0, 735, 735, 735, 735, 735, 735, 736, 736,
                                              736, 0, 0, 736, 0, 736, 736, 736, 736, 736,

                                              736, 0, 0, 0, 736, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 736, 737, 737, 737, 0, 0, 737, 0,
                                              737, 737, 737, 737, 737, 737, 738, 738, 738, 0,
                                              0, 738, 0, 738, 738, 738, 738, 738, 738, 0,
                                              0, 0, 738, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              738, 739, 739, 739, 0, 0, 739, 0, 739, 739,
                                              739, 739, 739, 739, 740, 740, 740, 0, 0, 740,
                                              0, 740, 740, 740, 740, 740, 740, 741, 741, 741,

                                              0, 0, 741, 0, 741, 741, 741, 741, 741, 741,
                                              742, 742, 742, 742, 742, 742, 0, 0, 0, 742,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 742, 743, 743,
                                              743, 0, 0, 743, 0, 743, 743, 743, 743, 743,
                                              743, 744, 744, 744, 0, 0, 744, 0, 0, 0,
                                              744, 744, 744, 744, 0, 0, 0, 744, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 744, 745, 745, 745, 0,
                                              0, 745, 0, 745, 745, 745, 745, 745, 745, 748,

                                              748, 748, 0, 0, 748, 0, 748, 748, 748, 748,
                                              748, 748, 749, 749, 749, 0, 0, 749, 0, 749,
                                              749, 749, 749, 749, 749, 750, 750, 750, 0, 0,
                                              750, 0, 750, 750, 750, 750, 750, 750, 0, 0,
                                              0, 750, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 750,
                                              751, 751, 751, 0, 0, 751, 0, 751, 751, 751,
                                              751, 751, 751, 755, 755, 755, 0, 0, 755, 0,
                                              755, 755, 755, 755, 755, 755, 0, 0, 0, 755,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

                                              0, 0, 0, 0, 0, 0, 0, 755, 756, 756,
                                              756, 0, 0, 756, 0, 756, 756, 756, 756, 756,
                                              756, 757, 757, 757, 0, 0, 757, 0, 757, 757,
                                              757, 757, 757, 757, 0, 0, 0, 757, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 757, 758, 758, 758, 0,
                                              0, 758, 0, 758, 758, 758, 758, 758, 758, 0,
                                              0, 0, 758, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              758, 759, 759, 759, 0, 0, 759, 0, 759, 759,

                                              759, 759, 759, 759, 760, 760, 760, 0, 0, 760,
                                              0, 0, 0, 760, 760, 760, 760, 0, 0, 0,
                                              760, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 760, 763,
                                              763, 763, 0, 0, 763, 0, 763, 763, 763, 763,
                                              763, 763, 0, 0, 0, 763, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 763, 764, 764, 764, 0, 0, 764,
                                              0, 764, 764, 764, 764, 764, 764, 772, 772, 772,
                                              0, 0, 772, 0, 772, 772, 772, 772, 772, 772,

                                              773, 773, 773, 0, 0, 773, 0, 773, 773, 773,
                                              773, 773, 773, 0, 0, 0, 773, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 773, 774, 774, 774, 0, 0,
                                              774, 0, 774, 774, 774, 774, 774, 774, 775, 775,
                                              775, 0, 0, 775, 0, 775, 775, 775, 775, 775,
                                              775, 0, 0, 0, 775, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 775, 777, 777, 777, 0, 0, 777, 0,
                                              0, 0, 777, 777, 777, 777, 778, 778, 778, 0,

                                              0, 778, 0, 778, 778, 778, 778, 778, 778, 779,
                                              779, 779, 0, 0, 779, 0, 779, 779, 779, 779,
                                              779, 779, 0, 0, 0, 779, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 779, 781, 781, 781, 0, 0, 781,
                                              0, 781, 0, 781, 781, 781, 781, 781, 781, 781,
                                              781, 781, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 781, 0, 0, 0, 781, 781, 781,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              781, 782, 782, 782, 0, 0, 782, 0, 782, 0,

                                              782, 782, 782, 782, 782, 782, 782, 782, 782, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 782, 782, 782, 784, 784, 784,
                                              0, 0, 784, 0, 784, 0, 784, 784, 784, 784,
                                              784, 784, 784, 784, 784, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 784, 0, 0, 0,
                                              784, 784, 784, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 784, 785, 785, 785, 0, 0, 785,
                                              0, 785, 0, 785, 785, 785, 785, 785, 785, 785,
                                              785, 785, 0, 0, 0, 0, 0, 0, 0, 0,

                                              0, 0, 0, 0, 0, 0, 0, 785, 785, 785,
                                              788, 788, 788, 0, 0, 788, 0, 788, 0, 788,
                                              788, 788, 788, 788, 788, 788, 788, 788, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 788,
                                              0, 0, 0, 788, 788, 788, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 788, 789, 789, 789,
                                              0, 0, 789, 0, 789, 0, 789, 789, 789, 789,
                                              789, 789, 789, 789, 789, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              789, 789, 789, 794, 794, 794, 0, 0, 794, 0,

                                              794, 794, 794, 794, 794, 794, 795, 795, 795, 0,
                                              0, 795, 0, 795, 795, 795, 795, 795, 795, 801,
                                              801, 801, 0, 0, 801, 0, 0, 0, 801, 801,
                                              801, 801, 802, 802, 802, 0, 0, 802, 0, 802,
                                              802, 802, 802, 802, 802, 803, 803, 803, 0, 0,
                                              803, 0, 803, 803, 803, 803, 803, 803, 804, 804,
                                              804, 0, 0, 804, 0, 0, 804, 804, 804, 804,
                                              804, 0, 0, 0, 804, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 804, 807, 807, 807, 0, 0, 807, 0,

                                              0, 807, 807, 807, 807, 807, 0, 0, 0, 807,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 807, 808, 808,
                                              808, 0, 0, 808, 0, 808, 808, 808, 808, 808,
                                              808, 809, 809, 809, 0, 0, 809, 0, 809, 809,
                                              809, 809, 809, 809, 816, 816, 816, 0, 0, 816,
                                              0, 816, 816, 816, 816, 816, 816, 817, 817, 817,
                                              0, 0, 817, 0, 817, 817, 817, 817, 817, 817,
                                              818, 818, 818, 0, 0, 818, 0, 0, 818, 818,
                                              818, 818, 818, 0, 0, 0, 818, 0, 0, 0,

                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 818, 819, 819, 819, 0, 0,
                                              819, 0, 819, 819, 819, 819, 819, 819, 822, 822,
                                              822, 0, 0, 822, 0, 0, 822, 822, 822, 822,
                                              822, 0, 0, 0, 822, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 822, 823, 823, 823, 0, 0, 823, 0,
                                              823, 823, 823, 823, 823, 823, 832, 832, 832, 0,
                                              0, 832, 0, 0, 0, 832, 832, 832, 832, 833,
                                              833, 833, 0, 0, 833, 0, 833, 833, 833, 833,

                                              833, 833, 834, 834, 834, 0, 0, 834, 0, 834,
                                              834, 834, 834, 834, 834, 835, 835, 835, 0, 0,
                                              835, 0, 0, 835, 835, 835, 835, 835, 0, 0,
                                              0, 835, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
                                              840, 840, 840, 0, 0, 840, 0, 840, 840, 840,
                                              840, 840, 840, 841, 841, 841, 0, 0, 841, 0,
                                              841, 841, 841, 841, 841, 841, 0, 0, 0, 841,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 841, 842, 842,

                                              842, 0, 0, 842, 0, 842, 842, 842, 842, 842,
                                              842, 843, 843, 843, 0, 0, 843, 0, 843, 843,
                                              843, 843, 843, 843, 0, 0, 0, 843, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 843, 845, 845, 845, 0,
                                              0, 845, 0, 0, 0, 845, 845, 845, 845, 846,
                                              846, 846, 0, 0, 846, 0, 846, 846, 846, 846,
                                              846, 846, 847, 847, 847, 0, 0, 847, 0, 847,
                                              847, 847, 847, 847, 847, 0, 0, 0, 847, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

                                              0, 0, 0, 0, 0, 0, 847, 850, 850, 850,
                                              0, 0, 850, 0, 850, 850, 850, 850, 850, 850,
                                              851, 851, 851, 0, 0, 851, 0, 851, 851, 851,
                                              851, 851, 851, 0, 0, 0, 851, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 851, 852, 852, 852, 0, 0,
                                              852, 0, 852, 852, 852, 852, 852, 852, 853, 853,
                                              853, 0, 0, 853, 0, 853, 853, 853, 853, 853,
                                              853, 0, 0, 0, 853, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

                                              0, 0, 853, 855, 855, 855, 0, 0, 855, 0,
                                              0, 0, 855, 855, 855, 855, 856, 856, 856, 0,
                                              0, 856, 0, 856, 856, 856, 856, 856, 856, 857,
                                              857, 857, 0, 0, 857, 0, 857, 857, 857, 857,
                                              857, 857, 0, 0, 0, 857, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 857, 861, 861, 861, 0, 0, 861,
                                              0, 861, 861, 861, 861, 861, 861, 862, 862, 862,
                                              0, 0, 862, 0, 862, 862, 862, 862, 862, 862,
                                              868, 868, 868, 0, 0, 868, 0, 0, 0, 868,

                                              868, 868, 868, 869, 869, 869, 0, 0, 869, 0,
                                              869, 869, 869, 869, 869, 869, 870, 870, 870, 0,
                                              0, 870, 0, 870, 870, 870, 870, 870, 870, 871,
                                              871, 871, 0, 0, 871, 0, 0, 871, 871, 871,
                                              871, 871, 0, 0, 0, 871, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 871, 874, 874, 874, 0, 0, 874,
                                              0, 0, 874, 874, 874, 874, 874, 0, 0, 0,
                                              874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 874, 875,

                                              875, 875, 0, 0, 875, 0, 875, 875, 875, 875,
                                              875, 875, 876, 876, 876, 0, 0, 876, 0, 876,
                                              876, 876, 876, 876, 876, 883, 883, 883, 0, 0,
                                              883, 0, 883, 883, 883, 883, 883, 883, 884, 884,
                                              884, 0, 0, 884, 0, 884, 884, 884, 884, 884,
                                              884, 885, 885, 885, 0, 0, 885, 0, 0, 885,
                                              885, 885, 885, 885, 0, 0, 0, 885, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 885, 886, 886, 886, 0,
                                              0, 886, 0, 886, 886, 886, 886, 886, 886, 889,

                                              889, 889, 0, 0, 889, 0, 0, 889, 889, 889,
                                              889, 889, 0, 0, 0, 889, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 889, 890, 890, 890, 0, 0, 890,
                                              0, 890, 890, 890, 890, 890, 890, 899, 899, 899,
                                              0, 0, 899, 0, 0, 0, 899, 899, 899, 899,
                                              900, 900, 900, 0, 0, 900, 0, 900, 900, 900,
                                              900, 900, 900, 901, 901, 901, 0, 0, 901, 0,
                                              901, 901, 901, 901, 901, 901, 902, 902, 902, 0,
                                              0, 902, 0, 0, 902, 902, 902, 902, 902, 0,

                                              0, 0, 902, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              902, 907, 907, 907, 0, 0, 907, 0, 907, 907,
                                              907, 907, 907, 907, 908, 908, 908, 0, 0, 908,
                                              0, 908, 908, 908, 908, 908, 908, 0, 0, 0,
                                              908, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 908, 909,
                                              909, 909, 0, 0, 909, 0, 909, 909, 909, 909,
                                              909, 909, 910, 910, 910, 0, 0, 910, 0, 910,
                                              910, 910, 910, 910, 910, 0, 0, 0, 910, 0,

                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 910, 912, 912, 912,
                                              0, 0, 912, 0, 0, 0, 912, 912, 912, 912,
                                              913, 913, 913, 0, 0, 913, 0, 913, 913, 913,
                                              913, 913, 913, 914, 914, 914, 0, 0, 914, 0,
                                              914, 914, 914, 914, 914, 914, 0, 0, 0, 914,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 914, 922, 922,
                                              922, 0, 0, 922, 0, 922, 922, 922, 922, 922,
                                              922, 0, 0, 0, 922, 0, 0, 0, 0, 0,

                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 922, 923, 923, 923, 0, 0, 923, 0,
                                              923, 923, 923, 923, 923, 923, 924, 924, 924, 0,
                                              0, 924, 0, 924, 924, 924, 924, 924, 924, 0,
                                              0, 0, 924, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              924, 925, 925, 925, 0, 0, 925, 0, 925, 925,
                                              925, 925, 925, 925, 0, 0, 0, 925, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 925, 926, 926, 926, 0,

                                              0, 926, 0, 926, 926, 926, 926, 926, 926, 927,
                                              927, 927, 0, 0, 927, 0, 0, 0, 927, 927,
                                              927, 927, 0, 0, 0, 927, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 927, 930, 930, 930, 0, 0, 930,
                                              0, 930, 930, 930, 930, 930, 930, 0, 0, 0,
                                              930, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 930, 931,
                                              931, 931, 0, 0, 931, 0, 931, 931, 931, 931,
                                              931, 931, 932, 932, 932, 0, 0, 932, 0, 932,

                                              932, 932, 932, 932, 932, 0, 0, 0, 932, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 932, 933, 933, 933,
                                              0, 0, 933, 0, 933, 933, 933, 933, 933, 933,
                                              0, 0, 0, 933, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 933, 934, 934, 934, 0, 0, 934, 0, 934,
                                              934, 934, 934, 934, 934, 935, 935, 935, 0, 0,
                                              935, 0, 0, 0, 935, 935, 935, 935, 0, 0,
                                              0, 935, 0, 0, 0, 0, 0, 0, 0, 0,

                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 935,
                                              938, 938, 938, 0, 0, 938, 0, 938, 938, 938,
                                              938, 938, 938, 0, 0, 0, 938, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 938, 939, 939, 939, 0, 0,
                                              939, 0, 939, 939, 939, 939, 939, 939, 940, 940,
                                              940, 0, 0, 940, 0, 940, 940, 940, 940, 940,
                                              940, 0, 0, 0, 940, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 940, 941, 941, 941, 0, 0, 941, 0,

                                              941, 941, 941, 941, 941, 941, 0, 0, 0, 941,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 941, 942, 942,
                                              942, 0, 0, 942, 0, 942, 942, 942, 942, 942,
                                              942, 946, 946, 946, 0, 0, 946, 0, 946, 946,
                                              946, 946, 946, 946, 0, 0, 0, 946, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 946, 947, 947, 947, 0,
                                              0, 947, 0, 947, 947, 947, 947, 947, 947, 951,
                                              951, 951, 0, 0, 951, 0, 0, 0, 951, 951,

                                              951, 951, 0, 0, 0, 951, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 951, 954, 954, 954, 0, 0, 954,
                                              0, 954, 954, 954, 954, 954, 954, 0, 0, 0,
                                              954, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 954, 955,
                                              955, 955, 0, 0, 955, 0, 955, 955, 955, 955,
                                              955, 955, 959, 959, 959, 0, 0, 959, 0, 0,
                                              0, 959, 959, 959, 959, 0, 0, 0, 959, 0,
                                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

                                              0, 0, 0, 0, 0, 0, 959, 977, 977, 977,
                                              0, 0, 977, 0, 0, 0, 977, 977, 977, 977,
                                              983, 983, 983, 0, 0, 983, 0, 0, 0, 983,
                                              983, 983, 983, 995, 995, 995, 0, 0, 995, 0,
                                              0, 0, 995, 995, 995, 995, 1001, 1001, 1001, 0,
                                              0, 1001, 0, 0, 0, 1001, 1001, 1001, 1001, 1027,
                                              1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028,
                                              1028, 1028, 1028, 1028, 1028, 1028, 1028, 1029, 1029, 1029,
                                              1029, 1029, 1029, 1029, 1029, 1029, 1030, 1030, 1030, 1030,
                                              1030, 1030, 1030, 1030, 1030, 1031, 1031, 1031, 1031, 1031,

                                              1031, 1031, 1031, 1031, 1032, 0, 0, 1032, 1033, 0,
                                              0, 1033, 0, 1033, 1033, 1033, 1033, 1034, 1034, 1034,
                                              1034, 1034, 1034, 1034, 1034, 1034, 1035, 0, 0, 1035,
                                              0, 1035, 1035, 0, 1035, 1036, 1036, 1036, 1036, 1036,
                                              1036, 1036, 1036, 1036, 1037, 1037, 0, 1037, 0, 1037,
                                              1037, 1037, 1038, 1038, 0, 1038, 1038, 1038, 1038, 1038,
                                              1038, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
                                              1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1041,
                                              1041, 0, 0, 1041, 1041, 1043, 1043, 1043, 1043, 1043,
                                              1043, 1043, 1043, 1043, 1044, 1044, 1044, 1044, 1044, 1044,

                                              1044, 1044, 1044, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
                                              1045, 1045, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
                                              1046, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
                                              1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1050,
                                              1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1051, 1051,
                                              0, 1051, 0, 1051, 1051, 1051, 1053, 1053, 0, 1053,
                                              1053, 1053, 1053, 1053, 1053, 1054, 1054, 1054, 1054, 1054,
                                              1054, 1054, 1054, 1054, 1055, 0, 0, 1055, 1056, 1056,
                                              1056, 1056, 1056, 1056, 1056, 1056, 1056, 1057, 1057, 1057,
                                              1057, 1057, 1057, 1057, 1057, 1057, 1058, 1058, 0, 0,

                                              1058, 1058, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
                                              1060, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
                                              1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1063,
                                              1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1065, 1065,
                                              1065, 1065, 1065, 1065, 1065, 1065, 1065, 1066, 1066, 1066,
                                              1066, 1066, 1066, 1066, 1066, 1066, 1067, 1067, 1067, 1067,
                                              1067, 1067, 1067, 1067, 1067, 1068, 1068, 1068, 1068, 1068,
                                              1068, 1068, 1068, 1068, 1069, 1069, 0, 0, 1069, 1069,
                                              1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1071,
                                              1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1072, 1072,

                                              1072, 1072, 1072, 1072, 1072, 1072, 1072, 1073, 1073, 1073,
                                              1073, 1073, 1073, 1073, 1073, 1073, 1074, 1074, 1074, 1074,
                                              1074, 1074, 1074, 1074, 1074, 1075, 1075, 1075, 1075, 1075,
                                              1075, 1075, 1075, 1075, 1076, 1076, 1076, 1076, 1076, 1076,
                                              1076, 1076, 1076, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
                                              1077, 1077, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
                                              1078, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
                                              1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1081,
                                              1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1082, 1082,
                                              1082, 1082, 1082, 1082, 1082, 1082, 1082, 1083, 1083, 1083,

                                              1083, 1083, 1083, 1083, 1083, 1083, 1084, 1084, 1084, 1084,
                                              1084, 1084, 1084, 1084, 1084, 1085, 1085, 1085, 1085, 1085,
                                              1085, 1085, 1085, 1085, 1086, 1086, 1086, 1086, 1086, 1086,
                                              1086, 1086, 1086, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
                                              1087, 1087, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
                                              1088, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
                                              1090, 0, 0, 1090, 1091, 1091, 1091, 1091, 1091, 1091,
                                              1091, 1091, 1091, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
                                              1092, 1092, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
                                              1093, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

                                              1095, 1095, 0, 0, 1095, 1095, 1096, 1096, 1096, 1096,
                                              1096, 1096, 1096, 1096, 1096, 1097, 1097, 1097, 1097, 1097,
                                              1097, 1097, 1097, 1097, 1098, 1098, 1098, 1098, 1098, 1098,
                                              1098, 1098, 1098, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
                                              1099, 1099, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
                                              1100, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
                                              1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1103,
                                              1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1104, 1104,
                                              1104, 1104, 1104, 1104, 1104, 1104, 1104, 1105, 1105, 1105,
                                              1105, 1105, 1105, 1105, 1105, 1105, 1106, 1106, 1106, 1106,

                                              1106, 1106, 1106, 1106, 1106, 1107, 1107, 1107, 1107, 1107,
                                              1107, 1107, 1107, 1107, 1108, 1108, 1108, 1108, 1108, 1108,
                                              1108, 1108, 1108, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
                                              1109, 1109, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
                                              1110, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
                                              1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1113,
                                              1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1114, 1114,
                                              1114, 1114, 1114, 1114, 1114, 1114, 1114, 1115, 1115, 1115,
                                              1115, 1115, 1115, 1115, 1115, 1115, 1116, 0, 0, 1116,
                                              1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1118,

                                              1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1119, 1119,
                                              1119, 1119, 1119, 1119, 1119, 1119, 1119, 1121, 1121, 1121,
                                              1121, 1121, 1121, 1121, 1121, 1121, 1122, 1122, 1122, 1122,
                                              1122, 1122, 1122, 1122, 1122, 1123, 1123, 0, 0, 1123,
                                              1123, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
                                              1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1126,
                                              1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1127, 1127,
                                              1127, 1127, 1127, 1127, 1127, 1127, 1127, 1128, 1128, 1128,
                                              1128, 1128, 1128, 1128, 1128, 1128, 1129, 1129, 1129, 1129,
                                              1129, 1129, 1129, 1129, 1129, 1130, 1130, 1130, 1130, 1130,

                                              1130, 1130, 1130, 1130, 1131, 1131, 1131, 1131, 1131, 1131,
                                              1131, 1131, 1131, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
                                              1132, 1132, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
                                              1133, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
                                              1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1136,
                                              1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1137, 1137,
                                              1137, 1137, 1137, 1137, 1137, 1137, 1137, 1138, 1138, 1138,
                                              1138, 1138, 1138, 1138, 1138, 1138, 1139, 1139, 1139, 1139,
                                              1139, 1139, 1139, 1139, 1139, 1140, 1140, 1140, 1140, 1140,
                                              1140, 1140, 1140, 1140, 1141, 1141, 1141, 1141, 1141, 1141,

                                              1141, 1141, 1141, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
                                              1142, 1142, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
                                              1143, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
                                              1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1146,
                                              1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1147, 0,
                                              0, 1147, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
                                              1148, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
                                              1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1152,
                                              1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1153, 1153,
                                              1153, 1153, 1153, 1153, 1153, 1153, 1153, 1154, 1154, 0,

                                              0, 1154, 1154, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
                                              1155, 1155, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
                                              1156, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
                                              1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1159,
                                              1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1160, 1160,
                                              1160, 1160, 1160, 1160, 1160, 1160, 1160, 1161, 1161, 1161,
                                              1161, 1161, 1161, 1161, 1161, 1161, 1162, 1162, 1162, 1162,
                                              1162, 1162, 1162, 1162, 1162, 1163, 1163, 1163, 1163, 1163,
                                              1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164, 1164,
                                              1164, 1164, 1164, 1165, 1165, 1165, 1165, 1165, 1165, 1165,

                                              1165, 1165, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
                                              1166, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
                                              1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169,
                                              1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1170, 1170,
                                              1170, 1170, 1170, 1170, 1170, 1170, 1170, 1171, 1171, 1171,
                                              1171, 1171, 1171, 1171, 1171, 1171, 1172, 1172, 1172, 1172,
                                              1172, 1172, 1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173,
                                              1173, 1173, 1173, 1173, 1174, 1174, 1174, 1174, 1174, 1174,
                                              1174, 1174, 1174, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
                                              1175, 1175, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,

                                              1176, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
                                              1178, 0, 0, 1178, 1179, 1179, 1179, 1179, 1179, 1179,
                                              1179, 1179, 1179, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
                                              1180, 1180, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
                                              1181, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
                                              1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1184,
                                              1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1185, 1185,
                                              1185, 1185, 1185, 1185, 1185, 1185, 1185, 1186, 1186, 1186,
                                              1186, 1186, 1186, 1186, 1186, 1186, 1187, 1187, 1187, 1187,
                                              1187, 1187, 1187, 1187, 1187, 1188, 1188, 0, 1188, 1188,

                                              1188, 1188, 1188, 1188, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
                                              1026, 1026, 1026 };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int lexer_flex_debug;
int lexer_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *lexertext;
/**************************************************
 * VRML 2.0 Parser
 * Copyright (C) 1996 Silicon Graphics, Inc.
 *
 * Author(s)	: Gavin Bell
 *                Daniel Woods (first port)
 **************************************************
 */

#include "config.h"
#include <string.h>

#include <vector>
using std::vector;

#include "VrmlNode.h"

#include "VrmlMFColor.h"
#include "VrmlMFFloat.h"
#include "VrmlMFInt.h"
#include "VrmlMFRotation.h"
#include "VrmlMFString.h"
#include "VrmlMFVec2f.h"
#include "VrmlMFVec3f.h"

#include "VrmlSFBool.h"
#include "VrmlSFColor.h"
#include "VrmlSFFloat.h"
#include "VrmlSFImage.h"
#include "VrmlSFInt.h"
#include "VrmlSFRotation.h"
#include "VrmlSFString.h"
#include "VrmlSFTime.h"
#include "VrmlSFVec2f.h"
#include "VrmlSFVec3f.h"

#include "parser_yacc.hpp"

using namespace covise;

#define yylval parserlval
#define yyerror parsererror

#define YY_NO_UNPUT 1 /* Not using yyunput/yyless */

#define DEBUG_SSCANF 1 /* errors in return value processing fixed */

char *yyinStr = 0; /* For input from strings */
int (*yyinFunc)(char *, int) = 0; /* For input from functions */

#if HAVE_LIBPNG || HAVE_ZLIB
#include <zlib.h>

gzFile yygz = 0; /* For input from gzipped files */

#define YY_INPUT(buf, result, max_size)                                             \
    if (yyinStr)                                                                    \
    {                                                                               \
        for (result = 0; result < max_size && *yyinStr;)                            \
            buf[result++] = *yyinStr++;                                             \
    }                                                                               \
    else if (yyinFunc)                                                              \
    {                                                                               \
        if ((result = (*yyinFunc)(buf, max_size)) == -1)                            \
            YY_FATAL_ERROR("cb input in flex scanner failed");                      \
    }                                                                               \
    else if (yygz)                                                                  \
    {                                                                               \
        if ((result = gzread(yygz, buf, max_size)) == -1)                           \
            YY_FATAL_ERROR("gz input in flex scanner failed");                      \
    }                                                                               \
    else if (((result = fread(buf, 1, max_size, lexerin)) == 0) && ferror(lexerin)) \
        YY_FATAL_ERROR("lexerin input in flex scanner failed");
#else
#define YY_INPUT(buf, result, max_size)                                             \
    if (yyinStr)                                                                    \
    {                                                                               \
        for (result = 0; result < max_size && *yyinStr;)                            \
            buf[result++] = *yyinStr++;                                             \
    }                                                                               \
    else if (((result = fread(buf, 1, max_size, lexerin)) == 0) && ferror(lexerin)) \
        YY_FATAL_ERROR("input in flex scanner failed");
#endif

/* Current line number */
int currentLineNumber = 1;

extern void yyerror(const char *);

/* The YACC parser sets this to a token to direct the lexer */
/* in cases where just syntax isn't enough: */
int expectToken = 0;
int expectCoordIndex = 0;
int expectTexCoordIndex = 0;

/* True when parsing a multiple-valued field: */
static int parsing_mf = 0;

/* These are used when parsing SFImage fields: */
static int sfImageIntsParsed = 0;
static int sfImageIntsExpected = 0;
static int sfImageNC = 0;
static unsigned char *sfImagePixels = 0;
static int sfImageMask[] = { 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000 };

/* These are used when parsing SFString fields: */
#define STRING_SIZE_INCR 1000
static int sfStringMax = 0;
static int sfStringN = 0;
static char *sfStringChars = 0;

static void checkStringSize(int nmore)
{
    if (sfStringN + nmore >= sfStringMax)
    {
        int incr = STRING_SIZE_INCR > nmore ? STRING_SIZE_INCR : (nmore + 1);
        char *p = new char[sfStringMax += incr];
        if (sfStringChars)
        {
            strcpy(p, sfStringChars);
            delete[] sfStringChars;
        }
        sfStringChars = p;
    }
}

static void initString()
{
    checkStringSize(0);
    sfStringN = 0;
    sfStringChars[0] = 0;
}

/* These are used when parsing MF* fields */
// replaced vector by array: speedup 50%
//static vector<int> mfInts;
//static vector<float> mfFloats;
//static vector<char*> mfStrs;
#define IALL 10000
#define FALL 100000
#define SALL 100
static int *mfInts = new int[IALL];
static float *mfFloats = new float[FALL];
static const char **mfStrs = new const char *[SALL];
unsigned int intSize = 0;
unsigned int floatSize = 0;
unsigned int strSize = 0;
unsigned int intAllocSize = IALL;
unsigned int floatAllocSize = FALL;
unsigned int strAllocSize = SALL;

#define addInt(i)                                                \
    {                                                            \
        mfInts[intSize] = i;                                     \
        intSize++;                                               \
        if (intSize >= intAllocSize)                             \
        {                                                        \
            int *oldData = mfInts;                               \
            mfInts = new int[intAllocSize + IALL];               \
            memcpy(mfInts, oldData, intAllocSize * sizeof(int)); \
            intAllocSize += IALL;                                \
            delete[] oldData;                                    \
        }                                                        \
    }
#define addFloat(i)                                                    \
    {                                                                  \
        mfFloats[floatSize] = i;                                       \
        floatSize++;                                                   \
        if (floatSize >= floatAllocSize)                               \
        {                                                              \
            float *oldData = mfFloats;                                 \
            mfFloats = new float[floatAllocSize + FALL];               \
            memcpy(mfFloats, oldData, floatAllocSize * sizeof(float)); \
            floatAllocSize += FALL;                                    \
            delete[] oldData;                                          \
        }                                                              \
    }
#define addStr(i)                                                         \
    {                                                                     \
        mfStrs[strSize] = i;                                              \
        strSize++;                                                        \
        if (strSize >= strAllocSize)                                      \
        {                                                                 \
            const char **oldData = mfStrs;                                \
            mfStrs = new const char *[strAllocSize + SALL];               \
            memcpy(mfStrs, oldData, strAllocSize * sizeof(const char *)); \
            strAllocSize += SALL;                                         \
            delete[] oldData;                                             \
        }                                                                 \
    }

#if 0
#ifdef __cplusplus
extern "C"
#endif
int lexerwrap(void);
#endif

static char *skip_ws(char *s)
{
    while (*s == ' ' || *s == '\f' || *s == '\n' || *s == '\r' || *s == '\t' || *s == '\v' || *s == ',' || *s == '#')
    {
        if (*s == '#')
        {
            while (*s && *s != '\n')
                ++s;
        }
        else
        {
            if (*s++ == '\n')
                ++currentLineNumber;
        }
    }
    return s;
}

/* Normal state:  parsing nodes.  The initial start state is used */
/* only to recognize the VRML header. */

/* Start tokens for all of the field types, */
/* except for MFNode and SFNode, which are almost completely handled */
/* by the parser: */

/* Big hairy expression for floating point numbers: 1.E36*/
/* Ints are decimal or hex (0x##): */
/* Whitespace.  Using this pattern can screw up currentLineNumber, */
/* so it is only used wherever it is really convenient and it is */
/* extremely unlikely that the user will put in a carriage return */
/* (example: between the floats in an SFVec3f) */
/* And the same pattern without the newline */
/* Legal characters to start an identifier */
/* Legal other characters in an identifier */

#define INITIAL 0
#define NODE 1
#define SFB 2
#define SFC 3
#define SFF 4
#define SFIMG 5
#define SFI 6
#define SFR 7
#define SFS 8
#define SFT 9
#define SFV2 10
#define SFV3 11
#define MFC 12
#define MFF 13
#define MFI 14
#define MFR 15
#define MFS 16
#define MFV2 17
#define MFV3 18
#define IN_SFS 19
#define IN_MFS 20
#define IN_SFIMG 21

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
//#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals(void);

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int lexerwrap(void);
#else
extern int lexerwrap(void);
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, yyconst char *, int);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput(void);
#else
static int input(void);
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite(lexertext, lexerleng, 1, lexerout)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                             \
    if (YY_CURRENT_BUFFER_LVALUE->yy_is_interactive)                                \
    {                                                                               \
        int c = '*';                                                                \
        int n;                                                                      \
        for (n = 0; n < max_size && (c = getc(lexerin)) != EOF && c != '\n'; ++n)   \
            buf[n] = (char)c;                                                       \
        if (c == '\n')                                                              \
            buf[n++] = (char)c;                                                     \
        if (c == EOF && ferror(lexerin))                                            \
            YY_FATAL_ERROR("input in flex scanner failed");                         \
        result = n;                                                                 \
    }                                                                               \
    else                                                                            \
    {                                                                               \
        errno = 0;                                                                  \
        while ((result = fread(buf, 1, max_size, lexerin)) == 0 && ferror(lexerin)) \
        {                                                                           \
            if (errno != EINTR)                                                     \
            {                                                                       \
                YY_FATAL_ERROR("input in flex scanner failed");                     \
                break;                                                              \
            }                                                                       \
            errno = 0;                                                              \
            clearerr(lexerin);                                                      \
        }                                                                           \
    }

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error(msg)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int lexerlex(void);

#define YY_DECL int lexerlex(void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after lexertext and lexerleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
    YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;

    /* Switch into a new start state if the parser */
    /* just told us that we've read a field name */
    /* and should expect a field value (or IS) */
    if (expectToken != 0)
    {
#if DEBUG
        extern int lexer_flex_debug;
        if (lexer_flex_debug)
            fprintf(stderr, "LEX--> Start State %d\n", expectToken);
#endif

        /*
     * Annoying.  This big switch is necessary because
     * LEX wants to assign particular numbers to start
     * tokens, and YACC wants to define all the tokens
     * used, too.  Sigh.
     */
        switch (expectToken)
        {
        case SF_BOOL:
            BEGIN SFB;
            break;
        case SF_COLOR:
            BEGIN SFC;
            break;
        case SF_FLOAT:
            BEGIN SFF;
            break;
        case SF_IMAGE:
            BEGIN SFIMG;
            break;
        case SF_INT32:
            BEGIN SFI;
            break;
        case SF_ROTATION:
            BEGIN SFR;
            break;
        case SF_STRING:
            BEGIN SFS;
            break;
        case SF_TIME:
            BEGIN SFT;
            break;
        case SF_VEC2F:
            BEGIN SFV2;
            break;
        case SF_VEC3F:
            BEGIN SFV3;
            break;
        case MF_COLOR:
            BEGIN MFC;
            break;
        case MF_FLOAT:
            BEGIN MFF;
            break;
        case MF_INT32:
            BEGIN MFI;
            break;
        case MF_ROTATION:
            BEGIN MFR;
            break;
        case VRML_MF_STRING:
            BEGIN MFS;
            break;
        case MF_VEC2F:
            BEGIN MFV2;
            break;
        case MF_VEC3F:
            BEGIN MFV3;
            break;

        /* SFNode and MFNode are special.  Here the lexer just returns */
        /* "marker tokens" so the parser knows what type of field is */
        /* being parsed; unlike the other fields, parsing of SFNode/MFNode */
        /* field happens in the parser. */
        case MF_NODE:
            expectToken = 0;
            return MF_NODE;
        case SF_NODE:
            expectToken = 0;
            return SF_NODE;

        default:
            yyerror("ACK: Bad expectToken");
            break;
        }
    }

    /* This is more complicated than they really need to be because */
    /* I was ambitious and made the whitespace-matching rule aggressive */

    if (!(yy_init))
    {
        (yy_init) = 1;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if (!(yy_start))
            (yy_start) = 1; /* first start state */

        if (!lexerin)
            lexerin = stdin;

        if (!lexerout)
            lexerout = stdout;

        if (!YY_CURRENT_BUFFER)
        {
            lexerensure_buffer_stack();
            YY_CURRENT_BUFFER_LVALUE = lexer_create_buffer(lexerin, YY_BUF_SIZE);
        }

        lexer_load_buffer_state();
    }

    while (1) /* loops until end-of-file is reached */
    {
        yy_cp = (yy_c_buf_p);

        /* Support of lexertext. */
        *yy_cp = (yy_hold_char);

        /* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
        yy_bp = yy_cp;

        yy_current_state = (yy_start);
    yy_match:
        do
        {
            register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
            if (yy_accept[yy_current_state])
            {
                (yy_last_accepting_state) = yy_current_state;
                (yy_last_accepting_cpos) = yy_cp;
            }
            while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
            {
                yy_current_state = (int)yy_def[yy_current_state];
                if (yy_current_state >= 1027)
                    yy_c = yy_meta[(unsigned int)yy_c];
            }
            yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
            ++yy_cp;
        } while (yy_base[yy_current_state] != 10105);

    yy_find_action:
        yy_act = yy_accept[yy_current_state];
        if (yy_act == 0)
        { /* have to back up */
            yy_cp = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);
            yy_act = yy_accept[yy_current_state];
        }

        YY_DO_BEFORE_ACTION;

    do_action: /* This label is used only to access EOF actions. */

        switch (yy_act)
        { /* beginning of action switch */
        case 0: /* must back up */
            /* undo the effects of YY_DO_BEFORE_ACTION */
            *yy_cp = (yy_hold_char);
            yy_cp = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);
            goto yy_find_action;

        case 1:
            /* rule 1 can match eol */
            YY_RULE_SETUP
            {
                BEGIN NODE;
                currentLineNumber = 2;
            }
            YY_BREAK
        /* The lexer is in the NODE state when parsing nodes, either */
        /* top-level nodes in the .wrl file, in a prototype implementation, */
        /* or when parsing the contents of SFNode or MFNode fields. */
        case 2:
            YY_RULE_SETUP
            {
                return PROTO;
            }
            YY_BREAK
        case 3:
            YY_RULE_SETUP
            {
                return EXTERNPROTO;
            }
            YY_BREAK
        case 4:
            YY_RULE_SETUP
            {
                return DEF;
            }
            YY_BREAK
        case 5:
            YY_RULE_SETUP
            {
                return USE;
            }
            YY_BREAK
        case 6:
            YY_RULE_SETUP
            {
                return TO;
            }
            YY_BREAK
        case 7:
            YY_RULE_SETUP
            {
                return IS;
            }
            YY_BREAK
        case 8:
            YY_RULE_SETUP
            {
                return ROUTE;
            }
            YY_BREAK
        case 9:
            YY_RULE_SETUP
            {
                return SFN_NULL;
            }
            YY_BREAK
        case 10:
            YY_RULE_SETUP
            {
                return EVENTIN;
            }
            YY_BREAK
        case 11:
            YY_RULE_SETUP
            {
                return EVENTOUT;
            }
            YY_BREAK
        case 12:
            YY_RULE_SETUP
            {
                return FIELD;
            }
            YY_BREAK
        case 13:
            YY_RULE_SETUP
            {
                return EXPOSEDFIELD;
            }
            YY_BREAK
        /* Legal identifiers. */
        case 14:
            YY_RULE_SETUP
            {
                yylval.string = strdup(lexertext);
                return IDENTIFIER;
            }
            YY_BREAK
        /* All fields may have an IS declaration: */
        case 15:
            YY_RULE_SETUP
            {
                BEGIN NODE;
                expectToken = 0;
                yyless(0);
            }
            YY_BREAK
        case 16:
            YY_RULE_SETUP
            {
                BEGIN NODE;
                expectToken = 0;
                yyless(0); /* put back the IS */
            }
            YY_BREAK
        /* All MF field types other than MFNode are completely parsed here */
        /* in the lexer, and one token is returned to the parser.  They all */
        /* share the same rules for open and closing brackets: */
        case 17:
            YY_RULE_SETUP
            {
                if (parsing_mf)
                    yyerror("Double [");
                parsing_mf = 1;
                /* mfInts.erase(mfInts.begin(), mfInts.end());
					  mfFloats.erase(mfFloats.begin(), mfFloats.end());
					  mfStrs.erase(mfStrs.begin(), mfStrs.end());*/
                intSize = 0;
                floatSize = 0;
                strSize = 0;
            }
            YY_BREAK
        case 18:
            YY_RULE_SETUP
            {
                if (!parsing_mf)
                    yyerror("Unmatched ]");
                int fieldType = expectToken;
                switch (fieldType)
                {
                case MF_COLOR:
                    if (floatSize > 0)
                        yylval.field = new VrmlMFColor(floatSize / 3, mfFloats);
                    else
                        yylval.field = new VrmlMFColor();
                    break;
                case MF_FLOAT:
                    if (floatSize > 0)
                        yylval.field = new VrmlMFFloat(floatSize, mfFloats);
                    else
                        yylval.field = new VrmlMFFloat();
                    break;
                case MF_INT32:
                    if ((expectCoordIndex || expectTexCoordIndex) && intSize > 0 && -1 != mfInts[intSize - 1])
                        addInt(-1);
                    if (intSize)
                        yylval.field = new VrmlMFInt(intSize, mfInts);
                    else
                        yylval.field = new VrmlMFInt();
                    break;
                case MF_ROTATION:
                    if (floatSize)
                        yylval.field = new VrmlMFRotation(floatSize / 4, mfFloats);
                    else
                        yylval.field = new VrmlMFRotation();
                    break;
                case VRML_MF_STRING:
                {
                    if (strSize)
                        yylval.field = new VrmlMFString(strSize, mfStrs);
                    else
                        yylval.field = new VrmlMFString();
                    unsigned int i;
                    for (i = 0; i < strSize; i++)
                        delete[] mfStrs[i];
                    //mfStrs.erase(mfStrs.begin(), mfStrs.end());
                    strSize = 0;
                }
                break;
                case MF_VEC2F:
                    if (floatSize)
                        yylval.field = new VrmlMFVec2f(floatSize / 2, mfFloats);
                    else
                        yylval.field = new VrmlMFVec2f();
                    break;
                case MF_VEC3F:
                    if (floatSize)
                        yylval.field = new VrmlMFVec3f(floatSize / 3, mfFloats);
                    else
                        yylval.field = new VrmlMFVec3f();
                    break;
                }
                BEGIN NODE;
                parsing_mf = 0;
                expectToken = 0;

                /*mfFloats.erase(mfFloats.begin(), mfFloats.end());
					  mfInts.erase(mfInts.begin(), mfInts.end());*/

                intSize = 0;
                floatSize = 0;
                return fieldType;
            }
            YY_BREAK
        case 19:
            YY_RULE_SETUP
            {
                BEGIN NODE;
                expectToken = 0;
                yylval.field = new VrmlSFBool(0);
                return SF_BOOL;
            }
            YY_BREAK
        case 20:
            YY_RULE_SETUP
            {
                BEGIN NODE;
                expectToken = 0;
                yylval.field = new VrmlSFBool(1);
                return SF_BOOL;
            }
            YY_BREAK
        case 21:
            YY_RULE_SETUP
            {
                BEGIN NODE;
                expectToken = 0;
                yylval.field = new VrmlSFInt(strtol(lexertext, 0, 0));
                return SF_INT32;
            }
            YY_BREAK
        case 22:
            YY_RULE_SETUP
            {
                int i = strtol(lexertext, 0, 0);
                if (parsing_mf)
                {
                    addInt(i);
                }
                else
                { /* No open bracket means a single value: */
                    yylval.field = new VrmlMFInt(i);
                    BEGIN NODE;
                    expectToken = 0;
                    return MF_INT32;
                }
            }
            YY_BREAK
        /* All the floating-point types are pretty similar: */
        case 23:
            YY_RULE_SETUP
            {
                yylval.field = new VrmlSFFloat(atof(lexertext));
                BEGIN NODE;
                expectToken = 0;
                return SF_FLOAT;
            }
            YY_BREAK
        case 24:
            YY_RULE_SETUP
            {
                float f = atof(lexertext);
                if (parsing_mf)
                {
                    addFloat(f);
                }
                else
                { /* No open bracket means a single value: */
                    yylval.field = new VrmlMFFloat(f);
                    BEGIN NODE;
                    expectToken = 0;
                    return MF_FLOAT;
                }
            }
            YY_BREAK
        case 25:
            /* rule 25 can match eol */
            YY_RULE_SETUP
            {
                float x = 0.0, y = 0.0;
                int n = 0;
                char *s = &lexertext[0];
#ifdef DEBUG_SSCANF
                int retval;
                retval = sscanf(s, "%g%n", &x, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll SFV2: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g", &y);
                if (retval != 1)
                    std::cerr << "lexer.ll SFV2: sscanf failed" << std::endl;
#else
                x = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                y = (float)atof(s);
#endif

                yylval.field = new VrmlSFVec2f(x, y);
                BEGIN NODE;
                expectToken = 0;
                return SF_VEC2F;
            }
            YY_BREAK
        case 26:
            /* rule 26 can match eol */
            YY_RULE_SETUP
            {
                float x = 0.0, y = 0.0;
                int n = 0;
                char *s = &lexertext[0];
#ifdef DEBUG_SSCANF
                int retval;

                retval = sscanf(s, "%g%n", &x, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll MFV2: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g", &y);
                if (retval != 1)
                    std::cerr << "lexer.ll MFV2: sscanf failed" << std::endl;
#else
                x = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                y = (float)atof(s);
#endif
                if (parsing_mf)
                {
                    addFloat(x);
                    addFloat(y);
                }
                else
                {
                    yylval.field = new VrmlMFVec2f(x, y);
                    BEGIN NODE;
                    expectToken = 0;
                    return MF_VEC2F;
                }
            }
            YY_BREAK
        case 27:
            /* rule 27 can match eol */
            YY_RULE_SETUP
            {
                float x = 0.0, y = 0.0, z = 0.0;
                int n = 0;
                char *s = &lexertext[0];
#ifdef DEBUG_SSCANF
                int retval;

                retval = sscanf(s, "%g%n", &x, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll SFV3: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g%n", &y, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll SFV3: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g", &z);
                if (retval != 1)
                    std::cerr << "lexer.ll SFV3: sscanf failed" << std::endl;
#else
                x = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                y = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                z = (float)atof(s);
#endif

                yylval.field = new VrmlSFVec3f(x, y, z);

                BEGIN NODE;
                expectToken = 0;
                return SF_VEC3F;
            }
            YY_BREAK
        case 28:
            /* rule 28 can match eol */
            YY_RULE_SETUP
            {
                float x = 0.0, y = 0.0, z = 0.0;
                int n = 0;
                char *s = &lexertext[0];
#ifdef DEBUG_SSCANF
                int retval;

                retval = sscanf(s, "%g%n", &x, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll MFV3: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g%n", &y, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll MFV3: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g", &z);
                if (retval != 1)
                    std::cerr << "lexer.ll MFV3: sscanf failed" << std::endl;
#else
                x = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                y = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                z = (float)atof(s);
#endif

                if (parsing_mf)
                {
                    addFloat(x);
                    addFloat(y);
                    addFloat(z);
                }
                else
                {
                    yylval.field = new VrmlMFVec3f(x, y, z);
                    BEGIN NODE;
                    expectToken = 0;
                    return MF_VEC3F;
                }
            }
            YY_BREAK
        case 29:
            /* rule 29 can match eol */
            YY_RULE_SETUP
            {
                float x = 0.0, y = 0.0, z = 0.0, r = 0.0;
                int n = 0;
                char *s = &lexertext[0];
#ifdef DEBUG_SSCANF
                int retval;
                retval = sscanf(s, "%g%n", &x, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll SFR: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g%n", &y, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll SFR: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g%n", &z, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll SFR: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g", &r);
                if (retval != 1)
                    std::cerr << "lexer.ll SFR: sscanf failed" << std::endl;
#else
                x = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                y = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                z = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                r = (float)atof(s);
#endif
                yylval.field = new VrmlSFRotation(x, y, z, r);
                BEGIN NODE;
                expectToken = 0;
                return SF_ROTATION;
            }
            YY_BREAK
        case 30:
            /* rule 30 can match eol */
            YY_RULE_SETUP
            {
                float x = 0.0, y = 0.0, z = 0.0, r = 0.0;
                int n = 0;
                char *s = &lexertext[0];
#ifdef DEBUG_SSCANF
                int retval;
                retval = sscanf(s, "%g%n", &x, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll MFR: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g%n", &y, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll MFR: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g%n", &z, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll MFR: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g", &r);
                if (retval != 1)
                    std::cerr << "lexer.ll MFR: sscanf failed" << std::endl;
#else

                x = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                y = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                z = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                r = (float)atof(s);
#endif

                if (parsing_mf)
                {
                    addFloat(x);
                    addFloat(y);
                    addFloat(z);
                    addFloat(r);
                }
                else
                {
                    yylval.field = new VrmlMFRotation(x, y, z, r);
                    BEGIN NODE;
                    expectToken = 0;
                    return MF_ROTATION;
                }
            }
            YY_BREAK
        case 31:
            /* rule 31 can match eol */
            YY_RULE_SETUP
            {
                float r = 0.0, g = 0.0, b = 0.0;
                int n = 0;
                char *s = &lexertext[0];
#ifdef DEBUG_SSCANF
                int retval;
                retval = sscanf(s, "%g%n", &r, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll SFC: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g%n", &g, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll SFC: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g", &b);
                if (retval != 1)
                    std::cerr << "lexer.ll SFC: sscanf failed" << std::endl;
#else
                r = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                g = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                b = (float)atof(s);
#endif

                yylval.field = new VrmlSFColor(r, g, b);
                BEGIN NODE;
                expectToken = 0;
                return SF_COLOR;
            }
            YY_BREAK
        case 32:
            /* rule 32 can match eol */
            YY_RULE_SETUP
            {
                float r = 0.0, g = 0.0, b = 0.0;
                int n = 0;
                char *s = &lexertext[0];
#ifdef DEBUG_SSCANF
                int retval;
                retval = sscanf(s, "%g%n", &r, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll MFC: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g%n", &g, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll MFC: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%g", &b);
                if (retval != 1)
                    std::cerr << "lexer.ll MFC: sscanf failed" << std::endl;
#else
                r = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                g = (float)atof(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                b = (float)atof(s);
#endif
                if (parsing_mf)
                {
                    addFloat(r);
                    addFloat(g);
                    addFloat(b);
                }
                else
                {
                    yylval.field = new VrmlMFColor(r, g, b);
                    BEGIN NODE;
                    expectToken = 0;
                    return MF_COLOR;
                }
            }
            YY_BREAK
        case 33:
            YY_RULE_SETUP
            {
                yylval.field = new VrmlSFTime(atof(lexertext));
                BEGIN NODE;
                expectToken = 0;
                return SF_TIME;
            }
            YY_BREAK
        /* SFString/MFString */
        case 34:
            YY_RULE_SETUP
            {
                BEGIN IN_SFS;
                initString();
            }
            YY_BREAK
        case 35:
            YY_RULE_SETUP
            {
                BEGIN IN_MFS;
                initString();
            }
            YY_BREAK
        /* Anything besides open-quote (or whitespace) is an error: */
        case 36:
            YY_RULE_SETUP
            {
                yyerror("SFString missing open-quote");
                yylval.field = 0;
                BEGIN NODE;
                expectToken = 0;
                return SF_STRING;
            }
            YY_BREAK
        /* Expect open-quote, open-bracket, or whitespace: */
        case 37:
            YY_RULE_SETUP
            {
                yyerror("MFString missing open-quote");
                yylval.field = 0;
                BEGIN NODE;
                expectToken = 0;
                return VRML_MF_STRING;
            }
            YY_BREAK
        /* Backslashed-quotes and backslashed-backslashes are OK: */
        case 38:
            YY_RULE_SETUP
            {
                checkStringSize(1);
                strcpy(sfStringChars + sfStringN++, "\"");
            }
            YY_BREAK
        case 39:
            YY_RULE_SETUP
            {
                checkStringSize(1);
                strcpy(sfStringChars + sfStringN++, "\\");
            }
            YY_BREAK
        case 40:
            YY_RULE_SETUP
            {
                checkStringSize(2);
                strcpy(sfStringChars + sfStringN, "\\n");
                sfStringN += 2;
            }
            YY_BREAK
        case 41:
            YY_RULE_SETUP
            {
                checkStringSize(2);
                strcpy(sfStringChars + sfStringN, "\\r");
                sfStringN += 2;
            }
            YY_BREAK
        case 42:
            YY_RULE_SETUP
            {
                checkStringSize(2);
                strcpy(sfStringChars + sfStringN, "\\t");
                sfStringN += 2;
            }
            YY_BREAK
        case 43:
            YY_RULE_SETUP
            {
                checkStringSize(2);
                strcpy(sfStringChars + sfStringN, "\\'");
                sfStringN += 2;
            }
            YY_BREAK
        /* XXX: add more escaped characters? */
        /* Newline characters are OK: */
        case 44:
            /* rule 44 can match eol */
            YY_RULE_SETUP
            {
                checkStringSize(1);
                strcpy(sfStringChars + sfStringN++, "\n");
                ++currentLineNumber;
            }
            YY_BREAK
        /* Eat anything besides quotes, backslashed (escaped) chars and newlines. */
        case 45:
            YY_RULE_SETUP
            {
                checkStringSize(lexerleng);
                strcpy(sfStringChars + sfStringN, lexertext);
                sfStringN += lexerleng;
            }
            YY_BREAK
        /* Quote ends the string: */
        case 46:
            YY_RULE_SETUP
            {
                yylval.field = new VrmlSFString(sfStringChars);
                BEGIN NODE;
                expectToken = 0;
                return SF_STRING;
            }
            YY_BREAK
        case 47:
            YY_RULE_SETUP
            {
                if (parsing_mf)
                {
                    char *s = new char[strlen(sfStringChars) + 1];
                    strcpy(s, sfStringChars);
                    addStr(s);
                    BEGIN MFS;
                }
                else
                {
                    yylval.field = new VrmlMFString(sfStringChars);
                    BEGIN NODE;
                    expectToken = 0;
                    return VRML_MF_STRING;
                }
            }
            YY_BREAK
        /* SFImage: width height numComponents then width*height integers: */
        case 48:
            /* rule 48 can match eol */
            YY_RULE_SETUP
            {
                int w = 0, h = 0, nc = 0, n = 0;
                unsigned char *pixels = 0;
                char *s = &lexertext[0];
#ifdef DEBUG_SSCANF
                size_t retval;

                retval = sscanf(s, "%d%n", &w, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll SFIMG: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%d%n", &h, &n);
                if (retval < 1)
                    std::cerr << "lexer.ll SFIMG: sscanf failed" << std::endl;
                s = skip_ws(s + n);
                retval = sscanf(s, "%d", &nc);
                if (retval != 1)
                    std::cerr << "lexer.ll SFIMG: sscanf failed" << std::endl;
#else
                w = atoi(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                h = atoi(s);
                while (*s && *s != ' ' && *s != '\t' && *s != '\r' && *s != '\n')
                    s++;
                s = skip_ws(s);
                nc = atoi(s);
#endif

                sfImageIntsExpected = w * h;
                sfImageIntsParsed = 0;
                sfImageNC = nc;

                if (sfImageIntsExpected > 0)
                    pixels = new unsigned char[nc * w * h];

                sfImagePixels = pixels;
                memset(pixels, 0, nc * w * h);

                yylval.field = new VrmlSFImage(w, h, nc, pixels);

                if (sfImageIntsExpected > 0)
                {
                    BEGIN IN_SFIMG;
                }
                else
                {
                    BEGIN NODE;
                    expectToken = 0;
                    return SF_IMAGE;
                }
            }
            YY_BREAK
        case 49:
            YY_RULE_SETUP
            {
                unsigned long pixval = strtol(lexertext, 0, 0);

                int i, j = sfImageNC * sfImageIntsParsed++;
                for (i = 0; i < sfImageNC; ++i)
                    sfImagePixels[i + j] = (sfImageMask[i] & pixval) >> (8 * i);
                if (sfImageIntsParsed == sfImageIntsExpected)
                {
                    BEGIN NODE;
                    expectToken = 0;
                    return SF_IMAGE;
                }
            }
            YY_BREAK
        /* Whitespace rules apply to all start states except inside strings: */

        case 50:
            YY_RULE_SETUP
            ;
            YY_BREAK
        /* This is also whitespace, but we'll keep track of line number */
        /* to report in errors: */
        case 51:
            /* rule 51 can match eol */
            YY_RULE_SETUP
            {
                ++currentLineNumber;
            }
            YY_BREAK

        /* This catch-all rule catches anything not covered by any of */
        /* the above: */
        case 52:
            YY_RULE_SETUP
            {
                return lexertext[0];
            }
            YY_BREAK
        case 53:
            YY_RULE_SETUP
            YY_FATAL_ERROR("flex scanner jammed");
            YY_BREAK
        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(NODE):
        case YY_STATE_EOF(SFB):
        case YY_STATE_EOF(SFC):
        case YY_STATE_EOF(SFF):
        case YY_STATE_EOF(SFIMG):
        case YY_STATE_EOF(SFI):
        case YY_STATE_EOF(SFR):
        case YY_STATE_EOF(SFS):
        case YY_STATE_EOF(SFT):
        case YY_STATE_EOF(SFV2):
        case YY_STATE_EOF(SFV3):
        case YY_STATE_EOF(MFC):
        case YY_STATE_EOF(MFF):
        case YY_STATE_EOF(MFI):
        case YY_STATE_EOF(MFR):
        case YY_STATE_EOF(MFS):
        case YY_STATE_EOF(MFV2):
        case YY_STATE_EOF(MFV3):
        case YY_STATE_EOF(IN_SFS):
        case YY_STATE_EOF(IN_MFS):
        case YY_STATE_EOF(IN_SFIMG):
            yyterminate();

        case YY_END_OF_BUFFER:
        {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = (yy_hold_char);
            YY_RESTORE_YY_MORE_OFFSET

            if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW)
            {
                /* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed lexerin at a new source and called
			 * lexerlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
                (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                YY_CURRENT_BUFFER_LVALUE->yy_input_file = lexerin;
                YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
            }

            /* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
            if ((yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
            { /* This was really a NUL. */
                yy_state_type yy_next_state;

                (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                /* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

                yy_next_state = yy_try_NUL_trans(yy_current_state);

                yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                if (yy_next_state)
                {
                    /* Consume the NUL. */
                    yy_cp = ++(yy_c_buf_p);
                    yy_current_state = yy_next_state;
                    goto yy_match;
                }

                else
                {
                    yy_cp = (yy_c_buf_p);
                    goto yy_find_action;
                }
            }

            else
                switch (yy_get_next_buffer())
                {
                case EOB_ACT_END_OF_FILE:
                {
                    (yy_did_buffer_switch_on_eof) = 0;

                    if (lexerwrap())
                    {
                        /* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * lexertext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
                        (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                        yy_act = YY_STATE_EOF(YY_START);
                        goto do_action;
                    }

                    else
                    {
                        if (!(yy_did_buffer_switch_on_eof))
                            YY_NEW_FILE;
                    }
                    break;
                }

                case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                    yy_current_state = yy_get_previous_state();

                    yy_cp = (yy_c_buf_p);
                    yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                    goto yy_match;

                case EOB_ACT_LAST_MATCH:
                    (yy_c_buf_p) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                    yy_current_state = yy_get_previous_state();

                    yy_cp = (yy_c_buf_p);
                    yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                    goto yy_find_action;
                }
            break;
        }

        default:
            YY_FATAL_ERROR(
                "fatal flex scanner internal error--no action found");
        } /* end of action switch */
    } /* end of scanning one token */
} /* end of lexerlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(void)
{
    register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    register char *source = (yytext_ptr);
    register int number_to_move, i;
    int ret_val;

    if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--end of buffer missed");

    if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0)
    { /* Don't try to fill the buffer, so this is an EOF. */
        if ((yy_c_buf_p) - (yytext_ptr)-YY_MORE_ADJ == 1)
        {
            /* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
            return EOB_ACT_END_OF_FILE;
        }

        else
        {
            /* We matched some text prior to the EOB, first
			 * process it.
			 */
            return EOB_ACT_LAST_MATCH;
        }
    }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int)((yy_c_buf_p) - (yytext_ptr)) - 1;

    for (i = 0; i < number_to_move; ++i)
        *(dest++) = *(source++);

    if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
        /* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

    else
    {
        int num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

        while (num_to_read <= 0)
        { /* Not enough room in the buffer - grow it. */

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

            int yy_c_buf_p_offset = (int)((yy_c_buf_p)-b->yy_ch_buf);

            if (b->yy_is_our_buffer)
            {
                int new_size = b->yy_buf_size * 2;

                if (new_size <= 0)
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    lexerrealloc((void *)b->yy_ch_buf, b->yy_buf_size + 2);
            }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if (!b->yy_ch_buf)
                YY_FATAL_ERROR(
                    "fatal error - scanner input buffer overflow");

            (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
        }

        if (num_to_read > YY_READ_BUF_SIZE)
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
                 (yy_n_chars), (size_t)num_to_read);

        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    if ((yy_n_chars) == 0)
    {
        if (number_to_move == YY_MORE_ADJ)
        {
            ret_val = EOB_ACT_END_OF_FILE;
            lexerrestart(lexerin);
        }

        else
        {
            ret_val = EOB_ACT_LAST_MATCH;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
        }
    }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    if ((yy_size_t)((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
    {
        /* Extend the array by 50%, plus the number we really need. */
        yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *)lexerrealloc((void *)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size);
        if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
            YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
    }

    (yy_n_chars) += number_to_move;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

    (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

    return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state(void)
{
    register yy_state_type yy_current_state;
    register char *yy_cp;

    yy_current_state = (yy_start);

    for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp)
    {
        register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        if (yy_accept[yy_current_state])
        {
            (yy_last_accepting_state) = yy_current_state;
            (yy_last_accepting_cpos) = yy_cp;
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
        {
            yy_current_state = (int)yy_def[yy_current_state];
            if (yy_current_state >= 1027)
                yy_c = yy_meta[(unsigned int)yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
    }

    return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state)
{
    register int yy_is_jam;
    register char *yy_cp = (yy_c_buf_p);

    register YY_CHAR yy_c = 1;
    if (yy_accept[yy_current_state])
    {
        (yy_last_accepting_state) = yy_current_state;
        (yy_last_accepting_cpos) = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
    {
        yy_current_state = (int)yy_def[yy_current_state];
        if (yy_current_state >= 1027)
            yy_c = yy_meta[(unsigned int)yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
    yy_is_jam = (yy_current_state == 1026);

    return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(void)
#else
static int input(void)
#endif

{
    int c;

    *(yy_c_buf_p) = (yy_hold_char);

    if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR)
    {
        /* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
        if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
            /* This was really a NUL. */
            *(yy_c_buf_p) = '\0';

        else
        { /* need more input */
            int offset = (yy_c_buf_p) - (yytext_ptr);
            ++(yy_c_buf_p);

            switch (yy_get_next_buffer())
            {
            case EOB_ACT_LAST_MATCH:
                /* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

                /* Reset buffer status. */
                lexerrestart(lexerin);

            /*FALLTHROUGH*/

            case EOB_ACT_END_OF_FILE:
            {
                if (lexerwrap())
                    return EOF;

                if (!(yy_did_buffer_switch_on_eof))
                    YY_NEW_FILE;
#ifdef __cplusplus
                return yyinput();
#else
                return input();
#endif
            }

            case EOB_ACT_CONTINUE_SCAN:
                (yy_c_buf_p) = (yytext_ptr) + offset;
                break;
            }
        }
    }

    c = *(unsigned char *)(yy_c_buf_p); /* cast for 8-bit char's */
    *(yy_c_buf_p) = '\0'; /* preserve lexertext */
    (yy_hold_char) = *++(yy_c_buf_p);

    return c;
}
#endif /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void lexerrestart(FILE *input_file)
{

    if (!YY_CURRENT_BUFFER)
    {
        lexerensure_buffer_stack();
        YY_CURRENT_BUFFER_LVALUE = lexer_create_buffer(lexerin, YY_BUF_SIZE);
    }

    lexer_init_buffer(YY_CURRENT_BUFFER, input_file);
    lexer_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
void lexer_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{

    /* TODO. We should be able to replace this entire function body
	 * with
	 *		lexerpop_buffer_state();
	 *		lexerpush_buffer_state(new_buffer);
     */
    lexerensure_buffer_stack();
    if (YY_CURRENT_BUFFER == new_buffer)
        return;

    if (YY_CURRENT_BUFFER)
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    lexer_load_buffer_state();

    /* We don't actually know whether we did this switch during
	 * EOF (lexerwrap()) processing, but the only time this flag
	 * is looked at is after lexerwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
    (yy_did_buffer_switch_on_eof) = 1;
}

static void lexer_load_buffer_state(void)
{
    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    lexerin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE lexer_create_buffer(FILE *file, int size)
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE)lexeralloc(sizeof(struct yy_buffer_state));
    if (!b)
        YY_FATAL_ERROR("out of dynamic memory in lexer_create_buffer()");

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
    b->yy_ch_buf = (char *)lexeralloc(b->yy_buf_size + 2);
    if (!b->yy_ch_buf)
        YY_FATAL_ERROR("out of dynamic memory in lexer_create_buffer()");

    b->yy_is_our_buffer = 1;

    lexer_init_buffer(b, file);

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with lexer_create_buffer()
 * 
 */
void lexer_delete_buffer(YY_BUFFER_STATE b)
{

    if (!b)
        return;

    if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

    if (b->yy_is_our_buffer)
        lexerfree((void *)b->yy_ch_buf);

    lexerfree((void *)b);
}

#ifndef __cplusplus
extern int isatty(int);
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a lexerrestart() or at EOF.
 */
static void lexer_init_buffer(YY_BUFFER_STATE b, FILE *file)

{
    int oerrno = errno;

    lexer_flush_buffer(b);

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

    /* If b is the current buffer, then lexer_init_buffer was _probably_
     * called from lexerrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER)
    {
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

    b->yy_is_interactive = 0;

    errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
void lexer_flush_buffer(YY_BUFFER_STATE b)
{
    if (!b)
        return;

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if (b == YY_CURRENT_BUFFER)
        lexer_load_buffer_state();
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void lexerpush_buffer_state(YY_BUFFER_STATE new_buffer)
{
    if (new_buffer == NULL)
        return;

    lexerensure_buffer_stack();

    /* This block is copied from lexer_switch_to_buffer. */
    if (YY_CURRENT_BUFFER)
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    /* Only push if top exists. Otherwise, replace top. */
    if (YY_CURRENT_BUFFER)
        (yy_buffer_stack_top)++;
    YY_CURRENT_BUFFER_LVALUE = new_buffer;

    /* copied from lexer_switch_to_buffer. */
    lexer_load_buffer_state();
    (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void lexerpop_buffer_state(void)
{
    if (!YY_CURRENT_BUFFER)
        return;

    lexer_delete_buffer(YY_CURRENT_BUFFER);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    if ((yy_buffer_stack_top) > 0)
        --(yy_buffer_stack_top);

    if (YY_CURRENT_BUFFER)
    {
        lexer_load_buffer_state();
        (yy_did_buffer_switch_on_eof) = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void lexerensure_buffer_stack(void)
{
    int num_to_alloc;

    if (!(yy_buffer_stack))
    {

        /* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
        num_to_alloc = 1;
        (yy_buffer_stack) = (struct yy_buffer_state **)lexeralloc(num_to_alloc * sizeof(struct yy_buffer_state *));
        if (!(yy_buffer_stack))
            YY_FATAL_ERROR("out of dynamic memory in lexerensure_buffer_stack()");

        memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state *));

        (yy_buffer_stack_max) = num_to_alloc;
        (yy_buffer_stack_top) = 0;
        return;
    }

    if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
    {

        /* Increase the buffer to prepare for a possible push. */
        int grow_size = 8 /* arbitrary grow size */;

        num_to_alloc = (yy_buffer_stack_max) + grow_size;
        (yy_buffer_stack) = (struct yy_buffer_state **)lexerrealloc((yy_buffer_stack),
                                                                    num_to_alloc * sizeof(struct yy_buffer_state *));
        if (!(yy_buffer_stack))
            YY_FATAL_ERROR("out of dynamic memory in lexerensure_buffer_stack()");

        /* zero only the new slots.*/
        memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state *));
        (yy_buffer_stack_max) = num_to_alloc;
    }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE lexer_scan_buffer(char *base, yy_size_t size)
{
    YY_BUFFER_STATE b;

    if (size < 2 || base[size - 2] != YY_END_OF_BUFFER_CHAR || base[size - 1] != YY_END_OF_BUFFER_CHAR)
        /* They forgot to leave room for the EOB's. */
        return 0;

    b = (YY_BUFFER_STATE)lexeralloc(sizeof(struct yy_buffer_state));
    if (!b)
        YY_FATAL_ERROR("out of dynamic memory in lexer_scan_buffer()");

    b->yy_buf_size = size - 2; /* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = 0;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    lexer_switch_to_buffer(b);

    return b;
}

/** Setup the input buffer state to scan a string. The next call to lexerlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       lexer_scan_bytes() instead.
 */
YY_BUFFER_STATE lexer_scan_string(yyconst char *yystr)
{

    return lexer_scan_bytes(yystr, strlen(yystr));
}

/** Setup the input buffer state to scan the given bytes. The next call to lexerlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE lexer_scan_bytes(yyconst char *yybytes, int _yybytes_len)
{
    YY_BUFFER_STATE b;
    char *buf;
    yy_size_t n;
    int i;

    /* Get memory for full buffer, including space for trailing EOB's. */
    n = _yybytes_len + 2;
    buf = (char *)lexeralloc(n);
    if (!buf)
        YY_FATAL_ERROR("out of dynamic memory in lexer_scan_bytes()");

    for (i = 0; i < _yybytes_len; ++i)
        buf[i] = yybytes[i];

    buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

    b = lexer_scan_buffer(buf, n);
    if (!b)
        YY_FATAL_ERROR("bad buffer in lexer_scan_bytes()");

    /* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
    b->yy_is_our_buffer = 1;

    return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error(yyconst char *msg)
{
    (void)fprintf(stderr, "%s\n", msg);
    exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                    \
    do                                               \
    {                                                \
        /* Undo effects of setting up lexertext. */  \
        int yyless_macro_arg = (n);                  \
        YY_LESS_LINENO(yyless_macro_arg);            \
        lexertext[lexerleng] = (yy_hold_char);       \
        (yy_c_buf_p) = lexertext + yyless_macro_arg; \
        (yy_hold_char) = *(yy_c_buf_p);              \
        *(yy_c_buf_p) = '\0';                        \
        lexerleng = yyless_macro_arg;                \
    } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int lexerget_lineno(void)
{

    return lexerlineno;
}

/** Get the input stream.
 * 
 */
FILE *lexerget_in(void)
{
    return lexerin;
}

/** Get the output stream.
 * 
 */
FILE *lexerget_out(void)
{
    return lexerout;
}

/** Get the length of the current token.
 * 
 */
int lexerget_leng(void)
{
    return lexerleng;
}

/** Get the current token.
 * 
 */

char *lexerget_text(void)
{
    return lexertext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void lexerset_lineno(int line_number)
{

    lexerlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see lexer_switch_to_buffer
 */
void lexerset_in(FILE *in_str)
{
    lexerin = in_str;
}

void lexerset_out(FILE *out_str)
{
    lexerout = out_str;
}

int lexerget_debug(void)
{
    return lexer_flex_debug;
}

void lexerset_debug(int bdebug)
{
    lexer_flex_debug = bdebug;
}

static int yy_init_globals(void)
{
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from lexerlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *)0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    lexerin = stdin;
    lexerout = stdout;
#else
    lexerin = (FILE *)0;
    lexerout = (FILE *)0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * lexerlex_init()
     */
    return 0;
}

/* lexerlex_destroy is for both reentrant and non-reentrant scanners. */
int lexerlex_destroy(void)
{

    /* Pop the buffer stack, destroying each element. */
    while (YY_CURRENT_BUFFER)
    {
        lexer_delete_buffer(YY_CURRENT_BUFFER);
        YY_CURRENT_BUFFER_LVALUE = NULL;
        lexerpop_buffer_state();
    }

    /* Destroy the stack itself. */
    lexerfree((yy_buffer_stack));
    (yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * lexerlex() is called, initialization will occur. */
    yy_init_globals();

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n)
{
    register int i;
    for (i = 0; i < n; ++i)
        s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *s)
{
    register int n;
    for (n = 0; s[n]; ++n)
        ;

    return n;
}
#endif

void *lexeralloc(yy_size_t size)
{
    return (void *)malloc(size);
}

void *lexerrealloc(void *ptr, yy_size_t size)
{
    /* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
    return (void *)realloc((char *)ptr, size);
}

void lexerfree(void *ptr)
{
    free((char *)ptr); /* see lexerrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

/* Set up to read from string s. Reading from strings skips the header */

void yystring(char *s)
{
    lexerin = 0;
#if HAVE_LIBPNG || HAVE_ZLIB
    yygz = 0;
#endif
    yyinStr = s;
    yyinFunc = 0;
    BEGIN NODE;
    expectToken = 0;
    parsing_mf = 0;
    currentLineNumber = 1;
}

/* Set up to read from function f. */

void yyfunction(int (*f)(char *, int))
{
    lexerin = 0;
#if HAVE_LIBPNG || HAVE_ZLIB
    yygz = 0;
#endif
    yyinStr = 0;
    yyinFunc = f;
    BEGIN INITIAL;
    expectToken = 0;
    parsing_mf = 0;
    currentLineNumber = 1;
}

int lexerwrap(void)
{
    yyinStr = 0;
    yyinFunc = 0;
    BEGIN INITIAL;
    return 1;
}
