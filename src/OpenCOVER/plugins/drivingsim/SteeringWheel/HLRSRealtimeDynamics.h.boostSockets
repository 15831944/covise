#ifndef  __HLRSRealtimeDynamics_H
#define  __HLRSRealtimeDynamics_H

#include <util/common.h>
#include <fstream>

#include "VehicleDynamics.h"

#include <osg/MatrixTransform>
#include <boost/asio.hpp>

class PLUGINEXPORT HLRSRealtimeDynamics : public VehicleDynamics
{
public:
	enum Mirrors
	{
	    RIGHT_MIRROR = 1,
	    LEFT_MIRROR  = 2,
	    MIDDLE_MIRROR= 3
	};
	enum Joystick
	{
	    JS_RIGHT = 1,
	    JS_LEFT  = 2,
	    JS_DOWN  = 3,
	    JS_UP    = 4,
	    JS_MIDDLE= 5
	};

	HLRSRealtimeDynamics();
	virtual ~HLRSRealtimeDynamics();
	struct RemoteData {
	float V;
	float A;
	float rpm;
	float torque;
	osg::Matrix chassisTransform;
    };

	virtual double					getVelocity() { return remoteData.V; }
	virtual double					getAcceleration() { return remoteData.A; } 
	virtual double					getEngineSpeed() { return remoteData.rpm; }
    virtual double                  getEngineTorque() { return remoteData.torque; }
    virtual double                  getSteeringWheelTorque() { return 0.0; }

	virtual const osg::Matrix&	    getVehicleTransformation(){ return remoteData.chassisTransform; }
	virtual void					setVehicleTransformation(const osg::Matrix &);


	virtual void					move(VrmlNodeVehicle* vehicle);
	virtual void					resetState();
	virtual void					update();


private:


	RemoteData remoteData;
	std::string remoteHost;
	boost::asio::io_service io_service;
	boost::asio::ip::tcp::socket  *socket;
	int								serverPort;
	int								localPort;
    bool 							tryConnect();

};

#endif
