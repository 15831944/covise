
/****************************************************************************\ 
**                                                            (C)2009 HLRS  **
**                                                                          **
** Description: Logo Plugin (displays a bitmap logo)                        **
**                                                                          **
**                                                                          **
** Author: U.Woessner		                                                  **
**                                                                          **
** History:  								                                         **
** Feb-09  v1	    				       		                                   **
**                                                                          **
**                                                                          **
\****************************************************************************/

#include "LogoPlugin.h"
#include <kernel/coVRPluginSupport.h>
#include <kernel/coVRConfig.h>
<<<<<<< HEAD
#include <kernel/VRViewer.h>
#include <kernel/coVRPluginSupport.h>
#include <kernel/coVRFileManager.h>
=======
#include "VRViewer.h"
#include "coVRPluginSupport.h"
>>>>>>> visenso
#include <iostream>
#include <config/CoviseConfig.h>
#include <config/coConfig.h>
<<<<<<< HEAD
#include <osg/Camera>

using namespace covise;
=======
#include <osg/MatrixTransform>
>>>>>>> visenso

LogoPlugin::LogoPlugin():
camera(NULL)
{
   if (cover->debugLevel(3))
      fprintf(stderr,"\nLogoPlugin::LogoPlugin\n");
}

bool LogoPlugin::init()
{
   if (cover->debugLevel(3))
      fprintf(stderr,"\nLogoPlugin::init\n");

   doHide=false;
   hidden=false;

   logoTime = (double)coCoviseConfig::getFloat("time","COVER.Plugin.Logo", -1.0);
   if(logoTime > 0)
      doHide = true;
   else
      doHide = false;
   
<<<<<<< HEAD
   osg::Geometry* geom = new osg::Geometry;
   osg::StateSet* stateset = geom->getOrCreateStateSet();
   stateset->setMode(GL_BLEND,osg::StateAttribute::ON);
   stateset->setRenderingHint(osg::StateSet::TRANSPARENT_BIN);
   stateset->setNestRenderBins(false);

   const char *logoName = coVRFileManager::instance()->getName(logoFile.c_str());
   osg::Image* image = NULL;
   if(logoName && (image=osgDB::readImageFile(logoName))!=NULL)
   {
      osg::Texture2D* texture = new osg::Texture2D;
      texture->setImage(image);

      osg::TexEnv* texenv = new osg::TexEnv;
      texenv->setMode(osg::TexEnv::REPLACE);

      stateset->setTextureAttributeAndModes(0,texture,osg::StateAttribute::ON);
      stateset->setTextureAttribute(0,texenv);
      if(width < 0)
         width = image->s();
      if(height < 0)
         height = image->t();

   }
   else
   {
      osg::notify(osg::NOTICE)<<"unable to load '" << logoFile << "'"<<std::endl;
   }

   if(width < 0)
      width = 100;
   if(height < 0)
      height = 100;


   osg::Vec3Array* vertices = new osg::Vec3Array;

   vertices->push_back(osg::Vec3(x,y+height,0.001));
   vertices->push_back(osg::Vec3(x,y,0.001));
   vertices->push_back(osg::Vec3(x+width,y,0.001));
   vertices->push_back(osg::Vec3(x+width,y+height,0.001));
   geom->setVertexArray(vertices);

   osg::Vec2Array* texcoords = new osg::Vec2Array;
   texcoords->push_back(osg::Vec2(0,1));
   texcoords->push_back(osg::Vec2(0,0));
   texcoords->push_back(osg::Vec2(1,0));
   texcoords->push_back(osg::Vec2(1,1));
   geom->setTexCoordArray(0,texcoords);

   osg::Vec3Array* normals = new osg::Vec3Array;
   normals->push_back(osg::Vec3(0.0f,0.0f,1.0f));
   geom->setNormalArray(normals);
   geom->setNormalBinding(osg::Geometry::BIND_OVERALL);

   osg::Vec4Array* colors = new osg::Vec4Array;
   colors->push_back(osg::Vec4(1.0f,1.0,1.0f,alpha));
   geom->setColorArray(colors);
   geom->setColorBinding(osg::Geometry::BIND_OVERALL);

   geom->addPrimitiveSet(new osg::DrawArrays(GL_QUADS,0,4));



   geode->addDrawable(geom);
=======
>>>>>>> visenso

   camera = new osg::Camera;

   // set the view matrix    
   camera->setReferenceFrame(osg::Transform::ABSOLUTE_RF);
   camera->setViewMatrix(osg::Matrix::identity());

   camera->setComputeNearFarMode(osg::CullSettings::DO_NOT_COMPUTE_NEAR_FAR);

   // only clear the depth buffer
   camera->setClearMask(GL_DEPTH_BUFFER_BIT);

   // no lighting
   camera->getOrCreateStateSet()->setMode(GL_LIGHTING, GL_FALSE);
   camera->getOrCreateStateSet()->setMode(GL_DEPTH_TEST, GL_FALSE);

   // draw subgraph after main camera view.
<<<<<<< HEAD
   camera->setRenderOrder(osg::Camera::POST_RENDER);

   camera->addChild(geode.get());
=======
   camera->setRenderOrder(osg::CameraNode::NESTED_RENDER); // if POST_RENDER is used, the logo doesn't appear on snapshots
>>>>>>> visenso

   cover->getScene()->addChild(camera.get());
   
   defaultLogo = new Logo("", camera);
   recordingLogo = new Logo(".Recording", camera);

   defaultLogo->show();
   hudTime = cover->frameTime();

   return true;
}


// this is called if the plugin is removed at runtime
LogoPlugin::~LogoPlugin()
{
   if (cover->debugLevel(3))
      fprintf(stderr,"\nLogoPlugin::~LogoPlugin\n");
}

bool LogoPlugin::destroy()
{
   defaultLogo->hide();
   recordingLogo->hide();
   return true;
}

void
LogoPlugin::preFrame()
{
   // set projection matrix
   float xsize;
   float ysize;
   if((coVRConfig::instance()->screens[0].viewportXMax-coVRConfig::instance()->screens[0].viewportXMin) == 0)
   {
      xsize = coVRConfig::instance()->windows[coVRConfig::instance()->screens[0].window].sx;
      ysize = coVRConfig::instance()->windows[coVRConfig::instance()->screens[0].window].sy;
   }
   else
   {
      xsize = coVRConfig::instance()->windows[coVRConfig::instance()->screens[0].window].sx *(coVRConfig::instance()->screens[0].viewportXMax-coVRConfig::instance()->screens[0].viewportXMin);
      ysize = coVRConfig::instance()->windows[coVRConfig::instance()->screens[0].window].sy *(coVRConfig::instance()->screens[0].viewportYMax-coVRConfig::instance()->screens[0].viewportYMin);
   }
   camera->setProjectionMatrixAsOrtho2D(0, xsize, 0, ysize);

   if(doHide)
   {
      if(cover->frameTime() - hudTime >= logoTime)
      {
         defaultLogo->hide();
         doHide=false;
         hidden = true;
      }
   }
}

void LogoPlugin::message(int, int, const void *data)
{
   if (!camera)
   {
      return;
   }
   const char *chbuf = (const char *) data;
   if (strncmp(chbuf, "startingCapture", strlen("startingCapture")) == 0)
   {
      defaultLogo->hide();
      recordingLogo->show();
   }
   if (strncmp(chbuf, "stoppingCapture", strlen("stoppingCapture")) == 0)
   {
      recordingLogo->hide();
      if (!hidden)
      {
         defaultLogo->show();
      }
   }
}


COVERPLUGIN(LogoPlugin)
