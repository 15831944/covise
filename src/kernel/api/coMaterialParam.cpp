/* This file is part of COVISE.

   You can use it under the terms of the GNU Lesser General Public License
   version 2.1 or later, see lgpl-2.1.txt.

 * License: LGPL 2+ */

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +                                                                         +
// +  coMaterialParam Parameter handling class                               +
// +                                                                         +
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#include <covise/covise.h>
#include "coMaterialParam.h"
#include "coBlankConv.h"
#include <appl/ApplInterface.h>

using namespace covise;

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/// Static data
const char *coMaterialParam::s_type = "MATERIAL";
coUifPara::Typeinfo coMaterialParam::s_paraType = coUifPara::numericType("MATERIAL");

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/// Constructor

coMaterialParam::coMaterialParam(const char *name, const char *desc)
    : coUifPara(name, desc)
{
    d_value = "Standard 0.7 0.7 0.7 0.1 0.5 0.8 1.0 1.0 1.0 0.3 0.2 0.2 0.2 0.0";
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/// Destructor : virtual in case we derive objects

coMaterialParam::~coMaterialParam()
{
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/// Check the type

int coMaterialParam::isOfType(coUifPara::Typeinfo type)
{
    return (type == s_paraType);
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/// get my type

coUifPara::Typeinfo coMaterialParam::getType()
{
    return s_paraType;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/// handle parameter changes: called by paramCB

int coMaterialParam::paramChange()
{
    string newVal;
    int retVal = Covise::get_reply_material(&newVal);
    if (retVal)
        d_value = newVal;

    return retVal;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/// give dafault values to Covise -> automatically called !

void coMaterialParam::initialize()
{
    d_defString = strcpy(new char[d_value.length() + 1], d_value.c_str());
    Covise::add_port(PARIN, d_name, "Material", d_desc);
    Covise::set_port_default(d_name, d_defString);
    d_init = 1;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/// print this to a stream

void coMaterialParam::print(ostream &str) const
{
    coUifPara::print(str);
    cerr << "coMaterialParam : " << d_value << endl;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/// set the value: if called after init() : update on map

int coMaterialParam::setValue(const string &value)
{
    d_value = value;

    /// If we have been initialized, update the map
    if (d_init)
        return Covise::update_material_param(d_name, d_value);
    else
        return 1;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

const string coMaterialParam::getValue() const
{
    return d_value;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/// get the type string of this parameter
const char *coMaterialParam::getTypeString() const
{
    return s_type;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/// get the value of this parameter as a string
const char *coMaterialParam::getValString() const
{
    return d_value.c_str();
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
/// set the value of this parameter from a string
void coMaterialParam::setValString(const char *str)
{
    d_value = str;
}
