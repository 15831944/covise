
%=============================================================

%-------------------------------------------------------------
% General Notes for Latex novices:
% 1. Please protect any "_" by a backslash "\" to prevent that it is
%    interpreted by Latex as an order, e. g. write
%    Vec3.
%    Protect "#", "$", "&", "%" , "{" and "}" in the same way by a "\".
% 2. Use {\bf text} or {\it text} to generate text in bold face resp. italics
% 3. For Figures, Tables, Lists, Verbatim-Environments (unformatted text), References/Links,
%    etc. see below.
% 4. Look at CuttingSurface.tex , ReadSTAR.tex, or Domainsurface.tex as good examples.
% 5. A Latex book (Latex Einf\"{u}hrung Band 1) is available for further questions
%    (usually on Peter's desk)
%-------------------------------------------------------------

%
% short description what the module does
%
This module reads volume data files and provides the scalar volume
data on a uniform grid. 

For more information about Volume Rendering see COVISE VR \& CE User's Guide, Appendix "Volume
Rendering in Covise"

\begin{covimg2}{}{module}{0.7}\end{covimg2}

Files of the following 3D volume data formats can be read:

\begin{itemize}

\item .dat: Raw volume data without any header. The data can have 1,2,3, or 4 byte per voxel.
The program tries to find the volume dimensions automatically, but
you can help by passing them in the file name, e.g.
"cthead256x256x64.dat" for a 256 x 256 x 64 voxels data set. Data
order: starting from top-left-front, going right first, then down,
then back. All bytes of each voxel must be stored consecutively,
starting with the most significant byte or in RGBA order,
depending on the data type.

\item .rvf: Data format for 'raw volume data'.
This format can easily be created by hand from any voxel data
array on disk by just adding the appropriate header: 3 x 2 Bytes
(little endian) = volume width/height/depth (voxels).
Example for a 256x128x127 volume (hex values): 01 00 00 80 00 7F
Volume data format: 8 bit per voxel Data order: starting from
top-left-front, going right first, then down, then back.

\item .xvf: Short for 'extended volume data'. 
This format supports time dependent volume data.

\item .tif, .tiff: 3D TIF File format.

\end{itemize}

DAT, RVF, and XVF files can be generated by the module WriteVolume.

The following 2D image file formats are supported to create volumes
from sequences of slice images:

\begin{itemize}

\item .rgb: SGI RGB image file (8 bit grayscale only)
\item .pgm: Portable Graymap file (binary version only)
\item .ppm: Portable Pixmap file (binary version only)
\item .dcm, .dcom: DICOM medical images
\item .tif, .tiff: 2D TIF files (uncompressed only)

\end{itemize}

Please note that the reading algorithm is chosen according to the file name extension
-- rename your files accordingly.

For reading sequences of files you have to enter a \texttt{printf(3)} format string instead of
the actual file name, the integer values from \texttt{SequenceBegin} to \texttt{SequenceEnd}-1
are used for generating the file names.
E.\ g.\ if you want to read the files \texttt{slice001.dcm}, \ldots, \texttt{slice123.dcm} you
would pass the format string \texttt{slice\%03d.dcm}.
Missing files in the sequence are skipped.

%
% input of a module icon for example
% #1  path for eps
% #2  picture name
% #3  scale factor
%-------------------------------------------------------------
% You can use this type of environment for all figures w/o caption
%-------------------------------------------------------------

%
% short information about versions
%
ReadVolume is available for COVISE version snap-2001-02 and higher.

%
%-------------------------------------------------------------
% Notes for using the 3 environments for tables below:
%-------------------------------------------------------------
% 1. In some cases it may be necessary to increase the size of a column,
%    e.g. change the value of p for the type of input or output ports from 3.5cm to 4cm
% 2. If you have more than one entry in a cell but you don't want to place
%    them in the one row, use "\newline", not "\\". For the first column you have
%    to specify explicitly the size of the coloumn (change "l" to "p{xxcm}")
%    in addition.
%-------------------------------------------------------------
%
%=============================================================
