/* This file is part of COVISE.

   You can use it under the terms of the GNU Lesser General Public License
   version 2.1 or later, see lgpl-2.1.txt.

 * License: LGPL 2+ */

/* $Id$
 *
 * Automatically generated by scan.c
 */

#include <stdio.h>
#include <string.h>
#include "extern.h"
#include "defines.h"

#define BADMAGIC 999999
#define BADVERSION 999998
#define BADMALLOC 999997
#define BADVAL 999996
#define CHARTYPE 1
#define SHORTTYPE 2
#define INTTYPE 3
#define FLOATTYPE 4
#define DOUBLETYPE 5
#define ARRTYPE 0x1000
#define USERTYPEBASE 20

#define BOXTYPETYPE USERTYPEBASE + 20
#define LINETYPETYPE USERTYPEBASE + 21
#define PLOTSTRTYPE USERTYPEBASE + 22
#define POLYTYPETYPE USERTYPEBASE + 23
#define DEFAULTSTYPE USERTYPEBASE + 24
#define VELOCITYPTYPE USERTYPEBASE + 25
#define WORLDTYPE USERTYPEBASE + 26
#define VIEWTYPE USERTYPEBASE + 27
#define WORLD_STACKTYPE USERTYPEBASE + 28
#define LABELSTYPE USERTYPEBASE + 29
#define HOTDATATYPE USERTYPEBASE + 30
#define REGRESSIONTYPE USERTYPEBASE + 31
#define SPLINETYPE USERTYPEBASE + 32
#define PLOTARRTYPE USERTYPEBASE + 33
#define TICKMARKSTYPE USERTYPEBASE + 34
#define POLARTICKMARKSTYPE USERTYPEBASE + 35
#define LEGENDTYPE USERTYPEBASE + 36
#define REGIONTYPE USERTYPEBASE + 37
#define FRAMEPTYPE USERTYPEBASE + 38
#define BOXPLOTTYPE USERTYPEBASE + 39
#define GRAPHTYPE2 USERTYPEBASE + 40

/*
 * Function prototypes
 */
// static int write_double (double *d, int n, FILE * fout);
// static int read_double (double *d, int n, FILE * fout);
// static int write_int (int *d, int n, FILE * fout);
// static int read_int (int *d, int n, FILE * fout);
// static int write_char (char *d, int n, FILE * fout);
// static int read_char (char *d, int n, FILE * fout);
// static int write_float (float *d, int n, FILE * fout);
// static int read_float (float *d, int n, FILE * fout);
// static int write_short (short *d, int n, FILE * fout);
// static int read_short (short *d, int n, FILE * fout);
// static int write_boxtype (boxtype * d, FILE * fout);
// static int read_boxtype (boxtype * d, FILE * fin);
// static int write_linetype (linetype * d, FILE * fout);
// static int read_linetype (linetype * d, FILE * fin);
// static int write_plotstr (plotstr * d, FILE * fout);
// static int read_plotstr (plotstr * d, FILE * fin);
// static int write_polytype (polytype * d, FILE * fout);
// static int read_polytype (polytype * d, FILE * fin);
// static int write_defaults (defaults * d, FILE * fout);
// static int read_defaults (defaults * d, FILE * fin);
// static int write_velocityp (velocityp * d, FILE * fout);
// static int read_velocityp (velocityp * d, FILE * fin);
// static int write_world (world * d, FILE * fout);
// static int read_world (world * d, FILE * fin);
//static int write_view (view * d, FILE * fout);
//static int read_view (view * d, FILE * fin);
// static int write_world_stack (world_stack * d, FILE * fout);
// static int read_world_stack (world_stack * d, FILE * fin);
// static int write_labels (labels * d, FILE * fout);
// static int read_labels (labels * d, FILE * fin);
// static int write_hotdata (hotdata * d, FILE * fout);
// static int read_hotdata (hotdata * d, FILE * fin);
//static int write_Regression (Regression * d, FILE * fout);
//static int read_Regression (Regression * d, FILE * fin);
//static int write_Spline (Spline * d, FILE * fout);
//static int read_Spline (Spline * d, FILE * fin);
// static int write_plotarr (plotarr * d, FILE * fout);
// static int read_plotarr (plotarr * d, FILE * fin);
// static int write_tickmarks (tickmarks * d, FILE * fout);
// static int read_tickmarks (tickmarks * d, FILE * fin);
// static int write_polartickmarks (polartickmarks * d, FILE * fout);
// static int read_polartickmarks (polartickmarks * d, FILE * fin);
// static int write_legend (legend * d, FILE * fout);
// static int read_legend (legend * d, FILE * fin);
// static int write_region (my_region * d, FILE * fout);
// static int read_region (my_region * d, FILE * fin);
// static int write_framep (framep * d, FILE * fout);
// static int read_framep (framep * d, FILE * fin);
//static int write_BoxPlot (BoxPlot * d, FILE * fout);
// static int read_BoxPlot (BoxPlot * d, FILE * fin);
// static int write_graph (graph * d, FILE * fout);
// static int read_graph (graph * d, FILE * fin);

/*
 * Write type boxtype version 0
 */ /*
static int write_boxtype (boxtype * d, FILE * fout)
{
    int err = 0;
    short magic = 20, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->loctype), 1, fout))
return err;
if (err = write_int (&(d->gno), 1, fout))
return err;
if (err = write_double (&(d->x1), 1, fout))
return err;
if (err = write_double (&(d->y1), 1, fout))
return err;
if (err = write_double (&(d->x2), 1, fout))
return err;
if (err = write_double (&(d->y2), 1, fout))
return err;
if (err = write_int (&(d->lines), 1, fout))
return err;
if (err = write_int (&(d->linew), 1, fout))
return err;
if (err = write_int (&(d->color), 1, fout))
return err;
if (err = write_int (&(d->fill), 1, fout))
return err;
if (err = write_int (&(d->fillcolor), 1, fout))
return err;
if (err = write_int (&(d->fillpattern), 1, fout))
return err;
return err;
} */

/*
 * Write type linetype version 0
 */ /*
static int write_linetype (linetype * d, FILE * fout)
{
    int err = 0;
    short magic = 21, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->loctype), 1, fout))
return err;
if (err = write_int (&(d->gno), 1, fout))
return err;
if (err = write_double (&(d->x1), 1, fout))
return err;
if (err = write_double (&(d->y1), 1, fout))
return err;
if (err = write_double (&(d->x2), 1, fout))
return err;
if (err = write_double (&(d->y2), 1, fout))
return err;
if (err = write_int (&(d->lines), 1, fout))
return err;
if (err = write_int (&(d->linew), 1, fout))
return err;
if (err = write_int (&(d->color), 1, fout))
return err;
if (err = write_int (&(d->arrow), 1, fout))
return err;
if (err = write_int (&(d->atype), 1, fout))
return err;
if (err = write_double (&(d->asize), 1, fout))
return err;
return err;
} */

/*
 * Write type plotstr version 0
 */ /*
static int write_plotstr (plotstr * d, FILE * fout)
{
    int i,err = 0;
    short magic = 22, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->loctype), 1, fout))
return err;
if (err = write_int (&(d->gno), 1, fout))
return err;
if (err = write_double (&(d->x), 1, fout))
return err;
if (err = write_double (&(d->y), 1, fout))
return err;
if (err = write_int (&(d->lines), 1, fout))
return err;
if (err = write_int (&(d->linew), 1, fout))
return err;
if (err = write_int (&(d->color), 1, fout))
return err;
if (err = write_int (&(d->rot), 1, fout))
return err;
if (err = write_int (&(d->font), 1, fout))
return err;
if (err = write_int (&(d->just), 1, fout))
return err;
if (err = write_double (&(d->charsize), 1, fout))
return err;
i = strlen (d->s) + 1;
if (err = write_int (&i, 1, fout))
return err;
if (err = write_char (d->s, i + 1, fout))
return err;
return err;
} */

/*
 * Write type polytype version 0
 */
/*
static int write_polytype (polytype * d, FILE * fout)
{
int err = 0;
short magic = 23, version = 0;
if (err = write_short (&magic, 1, fout))
return err;
if (err = write_short (&version, 1, fout))
return err;

if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->loctype), 1, fout))
return err;
if (err = write_int (&(d->gno), 1, fout))
return err;
if (err = write_int (&(d->type), 1, fout))
return err;
if (err = write_int (&(d->n), 1, fout))
return err; */
/* TODO
    if (err = write_double (&(d->x), 1, fout))
   return err;
    if (err = write_double (&(d->y), 1, fout))
   return err;
*/
/*
 if (err = write_int (&(d->lines), 1, fout))
return err;
 if (err = write_int (&(d->linew), 1, fout))
return err;
 if (err = write_int (&(d->color), 1, fout))
return err;
 if (err = write_int (&(d->fill), 1, fout))
return err;
 if (err = write_int (&(d->fillcolor), 1, fout))
return err;
if (err = write_int (&(d->fillpattern), 1, fout))
return err;
if (err = write_int (&(d->arrow), 1, fout))
return err;
if (err = write_int (&(d->atype), 1, fout))
return err;
if (err = write_double (&(d->asize), 1, fout))
return err;
return err;
} */

/*
 * Write type defaults version 0
 */
/*
static int write_defaults (defaults * d, FILE * fout)
{
int err = 0;
short magic = 24, version = 0;
if (err = write_short (&magic, 1, fout))
return err;
if (err = write_short (&version, 1, fout))
return err;

if (err = write_int (&(d->color), 1, fout))
return err;
if (err = write_int (&(d->lines), 1, fout))
return err;
if (err = write_int (&(d->linew), 1, fout))
return err;
if (err = write_double (&(d->charsize), 1, fout))
return err;
if (err = write_int (&(d->font), 1, fout))
return err;
if (err = write_int (&(d->fontsrc), 1, fout))
return err;
if (err = write_double (&(d->symsize), 1, fout))
return err;
return err;
} */

/*
 * Write type velocityp version 0
 */ /*
static int write_velocityp (velocityp * d, FILE * fout)
{
    int err = 0;
    short magic = 25, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->type), 1, fout))
return err;
if (err = write_int (&(d->color), 1, fout))
return err;
if (err = write_int (&(d->lines), 1, fout))
return err;
if (err = write_int (&(d->linew), 1, fout))
return err;
if (err = write_int (&(d->arrowtype), 1, fout))
return err;
if (err = write_int (&(d->loctype), 1, fout))
return err;
if (err = write_double (&(d->velx), 1, fout))
return err;
if (err = write_double (&(d->vely), 1, fout))
return err;
if (err = write_double (&(d->vscale), 1, fout))
return err;
if (err = write_int (&(d->units), 1, fout))
return err;
if (err = write_double (&(d->userlength), 1, fout))
return err;
if (err = write_plotstr (&(d->vstr), fout))
return err;
return err;
}*/

/*
 * Write type world version 0
 */ /*
static int write_world (world * d, FILE * fout)
{
    int err = 0;
    short magic = 26, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_double (&(d->xg1), 1, fout))
return err;
if (err = write_double (&(d->xg2), 1, fout))
return err;
if (err = write_double (&(d->yg1), 1, fout))
return err;
if (err = write_double (&(d->yg2), 1, fout))
return err;
return err;
}*/

/*
 * Write type view version 0
 */ /*
static int write_view (view * d, FILE * fout)
{
    int err = 0;
    short magic = 27, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_double (&(d->xv1), 1, fout))
return err;
if (err = write_double (&(d->xv2), 1, fout))
return err;
if (err = write_double (&(d->yv1), 1, fout))
return err;
if (err = write_double (&(d->yv2), 1, fout))
return err;
return err;
}*/

/*
 * Write type world_stack version 0
 */ /*
static int write_world_stack (world_stack * d, FILE * fout)
{
    int i, err = 0;
    short magic = 28, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_world (&(d->w), fout))
return err;
for (i = 0; i < 3; i++)
{
if (err = write_world (&(d->t[i]), fout))
return err;
}
return err;
}*/

/*
 * Write type labels version 0
 */ /*
static int write_labels (labels * d, FILE * fout)
{
    int err = 0;
    short magic = 29, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_plotstr (&(d->title), fout))
return err;
if (err = write_plotstr (&(d->stitle), fout))
return err;
return err;
}*/

/*
 * Write type hotdata version 0
 */ /*
static int write_hotdata (hotdata * d, FILE * fout)
{
    int i, err = 0;
    short magic = 30, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->type), 1, fout))
return err;
if (err = write_int (&(d->gno), 1, fout))
return err;
if (err = write_int (&(d->setno), 1, fout))
return err;
if (err = write_int (&(d->ptno), 1, fout))
return err;
i = strlen (d->buf) + 1;
if (err = write_int (&i, 1, fout))
return err;
if (err = write_char (d->buf, i, fout))
return err;
return err;
}*/

/*
 * Write type Regression version 0
 */ /*
static int write_Regression (Regression * d, FILE * fout)
{
    int err = 0;
    short magic = 31, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->type), 1, fout))
return err;
if (err = write_double (&(d->xmin), 1, fout))
return err;
if (err = write_double (&(d->xmax), 1, fout))
return err;
if (err = write_double (d->coef, 15, fout))
return err;
if (err = write_double (d->coef, 15, fout))
return err;
return err;
}*/

/*
 * Write type Spline version 0
 */ /*
static int write_Spline (Spline * d, FILE * fout)
{
    int err = 0;
    short magic = 32, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->type), 1, fout))
return err;
if (err = write_int (&(d->npts), 1, fout))
return err;
if (err = write_double (&(d->xmin), 1, fout))
return err;
if (err = write_double (&(d->xmax), 1, fout))
return err; */
/* TODO
    if (err = write_double (&(d->a), 1, fout))
   return err;
    if (err = write_double (&(d->b), 1, fout))
   return err;
    if (err = write_double (&(d->c), 1, fout))
   return err;
    if (err = write_double (&(d->d), 1, fout))
   return err;
*/
/*
 return err;
} */

/*
 * Write type plotarr version 0
 */ /*
static int write_plotarr (plotarr * d, FILE * fout)
{
    int i,err = 0, cnt;
    short magic = 33, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->type), 1, fout))
return err;
if (err = write_int (&(d->deact), 1, fout))
return err;
if (err = write_int (&(d->len), 1, fout))
return err;
if (err = write_double (&(d->missing), 1, fout))
return err;

cnt = 0;
for (i = 0; i < 6; i++)
{
if (d->ex[i] != NULL)
{
cnt++;
}
}
if (err = write_int (&cnt, 1, fout))
return err;
for (i = 0; i < 6; i++)
{
if (d->ex[i] != NULL)
{
if (err = write_int (&i, 1, fout))
return err;
if (err = write_double (d->ex[i], d->len, fout))
return err;
}
}
*/
/* TODO skip for now if (err = write_char(&(d->*s), 1, fout)) return err; */
/*   if (err = write_double (&(d->xmin), 1, fout))
  return err;
   if (err = write_double (&(d->xmax), 1, fout))
  return err;
   if (err = write_double (&(d->ymin), 1, fout))
  return err;
   if (err = write_double (&(d->ymax), 1, fout))
  return err;
   if (err = write_int (&(d->sym), 1, fout))
  return err;
   if (err = write_char (&(d->symchar), 1, fout))
return err;
if (err = write_int (&(d->symskip), 1, fout))
return err;
if (err = write_int (&(d->symfill), 1, fout))
return err;
if (err = write_int (&(d->symdot), 1, fout))
return err;
if (err = write_int (&(d->symlines), 1, fout))
return err;
if (err = write_int (&(d->symlinew), 1, fout))
return err;
if (err = write_int (&(d->symcolor), 1, fout))
return err;
if (err = write_double (&(d->symsize), 1, fout))
return err;
if (err = write_int (&(d->avgflag), 1, fout))
return err;
if (err = write_int (&(d->avgstdflag), 1, fout))
return err;
if (err = write_int (&(d->avg2stdflag), 1, fout))
return err;
if (err = write_int (&(d->avg3stdflag), 1, fout))
return err;
if (err = write_int (&(d->avgallflag), 1, fout))
return err;
if (err = write_int (&(d->avgvalflag), 1, fout))
return err;
if (err = write_int (&(d->harmonicflag), 1, fout))
return err;
if (err = write_int (&(d->geometricflag), 1, fout))
return err;
if (err = write_int (&(d->font), 1, fout))
return err;
if (err = write_int (&(d->format), 1, fout))
return err;
if (err = write_int (&(d->prec), 1, fout))
return err;
if (err = write_int (&(d->just), 1, fout))
return err;
if (err = write_int (&(d->where), 1, fout))
return err;
if (err = write_double (&(d->valsize), 1, fout))
return err;
if (err = write_int (&(d->lines), 1, fout))
return err;
if (err = write_int (&(d->linew), 1, fout))
return err;
if (err = write_int (&(d->color), 1, fout))
return err;
if (err = write_int (&(d->lineskip), 1, fout))
return err;
if (err = write_int (&(d->fill), 1, fout))
return err;
if (err = write_int (&(d->fillusing), 1, fout))
return err;
if (err = write_int (&(d->fillcolor), 1, fout))
return err;
if (err = write_int (&(d->fillpattern), 1, fout))
return err;
if (err = write_int (&(d->errbar), 1, fout))
return err;
if (err = write_int (&(d->errbarxy), 1, fout))
return err;
if (err = write_int (&(d->errbar_linew), 1, fout))
return err;
if (err = write_int (&(d->errbar_lines), 1, fout))
return err;
if (err = write_int (&(d->errbar_riser), 1, fout))
return err;
if (err = write_int (&(d->errbar_riser_linew), 1, fout))
return err;
if (err = write_int (&(d->errbar_riser_lines), 1, fout))
return err;
if (err = write_double (&(d->errbarper), 1, fout))
return err;
if (err = write_double (&(d->hilowper), 1, fout))
return err;
if (err = write_int (&(d->density_plot), 1, fout))
return err;
if (err = write_double (&(d->zmin), 1, fout))
return err;
if (err = write_double (&(d->zmax), 1, fout))
return err;
if (err = write_char (d->comments, 256, fout))
return err;
if (err = write_int (&(d->hotlink), 1, fout))
return err;
if (err = write_int (&(d->hotsrc), 1, fout))
return err;
if (err = write_char (d->hotfile, 256, fout))
return err;
if (err = write_double (d->emin, 6, fout))
return err;
if (err = write_double (d->emin, 6, fout))
return err;
if (err = write_double (d->emax, 6, fout))
return err;
if (err = write_double (d->emax, 6, fout))
return err;
if (err = write_int (d->imin, 6, fout))
return err;
if (err = write_int (d->imax, 6, fout))
return err;*/
/* TODO
    if (err = write_Regression (&(d->r), fout))
   return err;
    if (err = write_Spline (&(d->spl), fout))
   return err;
*/ /*
    return err;
}*/

/*
 * Write type tickmarks version 0
 */ /*
static int write_tickmarks (tickmarks * d, FILE * fout)
{
    int i, err = 0;
    short magic = 34, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_int (&(d->axis), 1, fout))
return err;
if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->alt), 1, fout))
return err;
if (err = write_double (&(d->tmin), 1, fout))
return err;
if (err = write_double (&(d->tmax), 1, fout))
return err;
if (err = write_double (&(d->tmajor), 1, fout))
return err;
if (err = write_double (&(d->tminor), 1, fout))
return err;
if (err = write_double (&(d->offsx), 1, fout))
return err;
if (err = write_double (&(d->offsy), 1, fout))
return err;
if (err = write_plotstr (&(d->label), fout))
return err;
if (err = write_int (&(d->label_layout), 1, fout))
return err;
if (err = write_int (&(d->label_place), 1, fout))
return err;
if (err = write_int (&(d->tl_flag), 1, fout))
return err;
if (err = write_int (&(d->tl_type), 1, fout))
return err;
if (err = write_int (&(d->tl_layout), 1, fout))
return err;
if (err = write_int (&(d->tl_angle), 1, fout))
return err;
if (err = write_int (&(d->tl_sign), 1, fout))
return err;
if (err = write_int (&(d->tl_just), 1, fout))
return err;
if (err = write_int (&(d->tl_prec), 1, fout))
return err;
if (err = write_int (&(d->tl_format), 1, fout))
return err;
if (err = write_int (&(d->tl_skip), 1, fout))
return err;
if (err = write_int (&(d->tl_staggered), 1, fout))
return err;
if (err = write_int (&(d->tl_starttype), 1, fout))
return err;
if (err = write_int (&(d->tl_stoptype), 1, fout))
return err;
if (err = write_double (&(d->tl_start), 1, fout))
return err;
if (err = write_double (&(d->tl_stop), 1, fout))
return err;
if (err = write_int (&(d->tl_op), 1, fout))
return err;
if (err = write_double (&(d->tl_vgap), 1, fout))
return err;
if (err = write_double (&(d->tl_hgap), 1, fout))
return err;
if (err = write_int (&(d->tl_font), 1, fout))
return err;
if (err = write_double (&(d->tl_charsize), 1, fout))
return err;
if (err = write_int (&(d->tl_color), 1, fout))
return err;
if (err = write_int (&(d->tl_linew), 1, fout))
return err;
if (err = write_char (d->tl_appstr, 256, fout))
return err;
if (err = write_char (d->tl_prestr, 256, fout))
return err;
if (err = write_int (&(d->t_type), 1, fout))
return err;
if (err = write_int (&(d->t_flag), 1, fout))
return err;
if (err = write_int (&(d->t_mflag), 1, fout))
return err;
if (err = write_int (&(d->t_integer), 1, fout))
return err;
if (err = write_int (&(d->t_num), 1, fout))
return err;
if (err = write_int (&(d->t_inout), 1, fout))
return err;
if (err = write_int (&(d->t_log), 1, fout))
return err;
if (err = write_int (&(d->t_op), 1, fout))
return err;
if (err = write_int (&(d->t_color), 1, fout))
return err;
if (err = write_int (&(d->t_lines), 1, fout))
return err;
if (err = write_int (&(d->t_linew), 1, fout))
return err;
if (err = write_int (&(d->t_mcolor), 1, fout))
return err;
if (err = write_int (&(d->t_mlines), 1, fout))
return err;
if (err = write_int (&(d->t_mlinew), 1, fout))
return err;
if (err = write_double (&(d->t_size), 1, fout))
return err;
if (err = write_double (&(d->t_msize), 1, fout))
return err;
if (err = write_int (&(d->t_drawbar), 1, fout))
return err;
if (err = write_int (&(d->t_drawbarcolor), 1, fout))
return err;
if (err = write_int (&(d->t_drawbarlines), 1, fout))
return err;
if (err = write_int (&(d->t_drawbarlinew), 1, fout))
return err;
if (err = write_int (&(d->t_gridflag), 1, fout))
return err;
if (err = write_int (&(d->t_mgridflag), 1, fout))
return err;
if (err = write_int (&(d->t_spec), 1, fout))
return err;
if (err = write_double (d->t_specloc, 40, fout))
return err;
if (err = write_double (d->t_specloc, 40, fout))
return err;
for (i = 0; i < 40; i++)
{
if (err = write_plotstr (&(d->t_speclab[i]), fout))
return err;
}
if (err = write_int (&(d->spcovise_font), 1, fout))
return err;
if (err = write_double (&(d->spcovise_charsize), 1, fout))
return err;
if (err = write_int (&(d->spcovise_color), 1, fout))
return err;
if (err = write_int (&(d->spcovise_linew), 1, fout))
return err;
return err;
}*/

/*
 * Write type polartickmarks version 0
 */
/*
static int write_polartickmarks (polartickmarks * d, FILE * fout)
{
int err = 0;
short magic = 35, version = 0;
if (err = write_short (&magic, 1, fout))
return err;
if (err = write_short (&version, 1, fout))
return err;

if (err = write_int (&(d->axis), 1, fout))
return err;
return err;
} */

/*
 * Write type legend version 0
 */ /*
static int write_legend (legend * d, FILE * fout)
{
    int i, err = 0;
    short magic = 36, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->loctype), 1, fout))
return err;
if (err = write_int (&(d->layout), 1, fout))
return err;
if (err = write_int (&(d->vgap), 1, fout))
return err;
if (err = write_int (&(d->hgap), 1, fout))
return err;
if (err = write_int (&(d->len), 1, fout))
return err;
if (err = write_int (&(d->box), 1, fout))
return err;
if (err = write_double (&(d->legx), 1, fout))
return err;
if (err = write_double (&(d->legy), 1, fout))
return err;
if (err = write_int (&(d->font), 1, fout))
return err;
if (err = write_double (&(d->charsize), 1, fout))
return err;
if (err = write_int (&(d->color), 1, fout))
return err;
if (err = write_int (&(d->linew), 1, fout))
return err;
if (err = write_int (&(d->lines), 1, fout))
return err;
if (err = write_int (&(d->boxfill), 1, fout))
return err;
if (err = write_int (&(d->boxfillusing), 1, fout))
return err;
if (err = write_int (&(d->boxfillcolor), 1, fout))
return err;
if (err = write_int (&(d->boxfillpat), 1, fout))
return err;
if (err = write_int (&(d->boxlcolor), 1, fout))
return err;
if (err = write_int (&(d->boxlinew), 1, fout))
return err;
if (err = write_int (&(d->boxlines), 1, fout))
return err;
for (i = 0; i < 30; i++)
{
if (err = write_plotstr (&(d->str[i]), fout))
return err;
}
return err;
}*/

/*
 * Write type region version 0
 */
/*
static int write_region (my_region * d, FILE * fout)
{
int err = 0;
short magic = 37, version = 0;
if (err = write_short (&magic, 1, fout))
return err;
if (err = write_short (&version, 1, fout))
return err;

if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->type), 1, fout))
return err;
if (err = write_int (&(d->color), 1, fout))
return err;
if (err = write_int (&(d->lines), 1, fout))
return err;
if (err = write_int (&(d->linew), 1, fout))
return err;
if (err = write_int (d->linkto, 10, fout))
return err;
if (err = write_int (&(d->n), 1, fout))
return err; */
/* TODO
    if (err = write_double (&(d->x), 1, fout))
   return err;
    if (err = write_double (&(d->y), 1, fout))
   return err;
*/
/*
 if (err = write_double (&(d->x1), 1, fout))
return err;
 if (err = write_double (&(d->y1), 1, fout))
return err;
 if (err = write_double (&(d->x2), 1, fout))
return err;
 if (err = write_double (&(d->y2), 1, fout))
return err;
 return err;
} */

/*
 * Write type framep version 0
 */ /*
static int write_framep (framep * d, FILE * fout)
{
    int err = 0;
    short magic = 38, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->type), 1, fout))
return err;
if (err = write_int (&(d->color), 1, fout))
return err;
if (err = write_int (&(d->lines), 1, fout))
return err;
if (err = write_int (&(d->linew), 1, fout))
return err;
if (err = write_int (&(d->fillbg), 1, fout))
return err;
if (err = write_int (&(d->bgcolor), 1, fout))
return err;
return err;
}*/

/*
 * Write type BoxPlot version 0
 */ /*
static int write_BoxPlot (BoxPlot * d, FILE * fout)
{
    int err = 0;
    short magic = 39, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_double (&(d->il), 1, fout))
return err;
if (err = write_double (&(d->iu), 1, fout))
return err;
if (err = write_double (&(d->ol), 1, fout))
return err;
if (err = write_double (&(d->ou), 1, fout))
return err;
if (err = write_int (&(d->nthresh), 1, fout))
return err;
if (err = write_int (&(d->outliers), 1, fout))
return err;
if (err = write_int (&(d->wtype), 1, fout))
return err;
if (err = write_double (&(d->boxwid), 1, fout))
return err;
return err;
}*/

/*
 * Write type graph version 0
 */ /*
static int write_graph (graph * d, FILE * fout)
{
    int i, cnt,  err = 0;
    short magic = 40, version = 0;
    if (err = write_short (&magic, 1, fout))
   return err;
    if (err = write_short (&version, 1, fout))
   return err;

if (err = write_int (&(d->active), 1, fout))
return err;
if (err = write_int (&(d->hidden), 1, fout))
return err;
if (err = write_int (&(d->label), 1, fout))
return err;
if (err = write_int (&(d->type), 1, fout))
return err;
if (err = write_int (&(d->noauto_world), 1, fout))
return err;
if (err = write_int (&(d->noauto_tics), 1, fout))
return err;
if (err = write_int (&(d->auto_type), 1, fout))
return err;
if (err = write_int (&(d->parmsread), 1, fout))
return err;
if (err = write_int (&(d->revx), 1, fout))
return err;
if (err = write_int (&(d->revy), 1, fout))
return err;
if (err = write_int (&(d->maxplot), 1, fout))
return err;
cnt = 0;
for (i = 0; i < d->maxplot; i++)
{
if (d->p[i].active == ON)
{
}
}
if (err = write_int (&cnt, 1, fout))
return err;
for (i = 0; i < d->maxplot; i++)
{
if (d->p[i].active == ON)
{
if (err = write_int (&i, 1, fout))
return err;
if (err = write_plotarr (&(d->p[i]), fout))
return err;
}
}

if (err = write_legend (&(d->l), fout))
return err;
if (err = write_world (&(d->w), fout))
return err;
if (err = write_view (&(d->v), fout))
return err;
if (err = write_labels (&(d->labs), fout))
return err;
for (i = 0; i < 6; i++)
{
if (err = write_tickmarks (&(d->t[i]), fout))
return err;
}
if (err = write_framep (&(d->f), fout))
return err;
if (err = write_int (&(d->pointset), 1, fout))
return err;
if (err = write_int (&(d->pt_type), 1, fout))
return err;
if (err = write_double (&(d->dsx), 1, fout))
return err;
if (err = write_double (&(d->dsy), 1, fout))
return err;
if (err = write_int (&(d->fx), 1, fout))
return err;
if (err = write_int (&(d->fy), 1, fout))
return err;
if (err = write_int (&(d->px), 1, fout))
return err;
if (err = write_int (&(d->py), 1, fout))
return err;
for (i = 0; i < 20; i++)
{
if (err = write_world_stack (&(d->ws[i]), fout))
return err;
}
if (err = write_int (&(d->ws_top), 1, fout))
return err;
if (err = write_int (&(d->curw), 1, fout))
return err;
if (err = write_velocityp (&(d->vp), fout))
return err;
if (err = write_BoxPlot (&(d->bp), fout))
return err;
return err;
}*/

/*
 * Read type boxtype
 */ /*
static int read_boxtype (boxtype * d, FILE * fin)
{
    int err = 0;
    short magic, version, testmagic = 20, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->loctype), 1, fin))
return err;
if (err = read_int (&(d->gno), 1, fin))
return err;
if (err = read_double (&(d->x1), 1, fin))
return err;
if (err = read_double (&(d->y1), 1, fin))
return err;
if (err = read_double (&(d->x2), 1, fin))
return err;
if (err = read_double (&(d->y2), 1, fin))
return err;
if (err = read_int (&(d->lines), 1, fin))
return err;
if (err = read_int (&(d->linew), 1, fin))
return err;
if (err = read_int (&(d->color), 1, fin))
return err;
if (err = read_int (&(d->fill), 1, fin))
return err;
if (err = read_int (&(d->fillcolor), 1, fin))
return err;
if (err = read_int (&(d->fillpattern), 1, fin))
return err;
return err;
} */

/*
 * Read type linetype
 */ /*
static int read_linetype (linetype * d, FILE * fin)
{
    int err = 0;
    short magic, version, testmagic = 21, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->loctype), 1, fin))
return err;
if (err = read_int (&(d->gno), 1, fin))
return err;
if (err = read_double (&(d->x1), 1, fin))
return err;
if (err = read_double (&(d->y1), 1, fin))
return err;
if (err = read_double (&(d->x2), 1, fin))
return err;
if (err = read_double (&(d->y2), 1, fin))
return err;
if (err = read_int (&(d->lines), 1, fin))
return err;
if (err = read_int (&(d->linew), 1, fin))
return err;
if (err = read_int (&(d->color), 1, fin))
return err;
if (err = read_int (&(d->arrow), 1, fin))
return err;
if (err = read_int (&(d->atype), 1, fin))
return err;
if (err = read_double (&(d->asize), 1, fin))
return err;
return err;
} */

/*
 * Read type plotstr
 */ /*
static int read_plotstr (plotstr * d, FILE * fin)
{
    int i, err = 0;
    short magic, version, testmagic = 22, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->loctype), 1, fin))
return err;
if (err = read_int (&(d->gno), 1, fin))
return err;
if (err = read_double (&(d->x), 1, fin))
return err;
if (err = read_double (&(d->y), 1, fin))
return err;
if (err = read_int (&(d->lines), 1, fin))
return err;
if (err = read_int (&(d->linew), 1, fin))
return err;
if (err = read_int (&(d->color), 1, fin))
return err;
if (err = read_int (&(d->rot), 1, fin))
return err;
if (err = read_int (&(d->font), 1, fin))
return err;
if (err = read_int (&(d->just), 1, fin))
return err;
if (err = read_double (&(d->charsize), 1, fin))
return err;
if (err = read_int (&i, 1, fin))
return err;
if (i <= 0)
{
err = -1;
return 0;
}
if (d->s != NULL)
{
free (d->s);
}
else
{
d->s = (char *) malloc (i * sizeof (char));
}
if (err = read_char (d->s, i, fin))
return err;
return err;
} */

/*
 * Read type polytype
 */ /*
static int read_polytype (polytype * d, FILE * fin)
{
    int err = 0;
    short magic, version, testmagic = 23, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->loctype), 1, fin))
return err;
if (err = read_int (&(d->gno), 1, fin))
return err;
if (err = read_int (&(d->type), 1, fin))
return err;
if (err = read_int (&(d->n), 1, fin))
return err; */
/*TODO if (err = read_double(d->x, 0, fin)) return err; */
/*TODO if (err = read_double(d->y, 0, fin)) return err; */
/*    if (err = read_int (&(d->lines), 1, fin))
  return err;
   if (err = read_int (&(d->linew), 1, fin))
  return err;
   if (err = read_int (&(d->color), 1, fin))
  return err;
   if (err = read_int (&(d->fill), 1, fin))
  return err;
   if (err = read_int (&(d->fillcolor), 1, fin))
  return err;
   if (err = read_int (&(d->fillpattern), 1, fin))
return err;
if (err = read_int (&(d->arrow), 1, fin))
return err;
if (err = read_int (&(d->atype), 1, fin))
return err;
if (err = read_double (&(d->asize), 1, fin))
return err;
return err;
} */

/*
 * Read type defaults
 */
/*
static int read_defaults (defaults * d, FILE * fin)
{
int err = 0;
short magic, version, testmagic = 24, testversion = 0;
if (err = read_short (&magic, 1, fin))
return err;
if (magic != testmagic)
return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->color), 1, fin))
return err;
if (err = read_int (&(d->lines), 1, fin))
return err;
if (err = read_int (&(d->linew), 1, fin))
return err;
if (err = read_double (&(d->charsize), 1, fin))
return err;
if (err = read_int (&(d->font), 1, fin))
return err;
if (err = read_int (&(d->fontsrc), 1, fin))
return err;
if (err = read_double (&(d->symsize), 1, fin))
return err;
return err;
} */

/*
 * Read type velocityp
 */ /*
static int read_velocityp (velocityp * d, FILE * fin)
{
    int err = 0;
    short magic, version, testmagic = 25, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->type), 1, fin))
return err;
if (err = read_int (&(d->color), 1, fin))
return err;
if (err = read_int (&(d->lines), 1, fin))
return err;
if (err = read_int (&(d->linew), 1, fin))
return err;
if (err = read_int (&(d->arrowtype), 1, fin))
return err;
if (err = read_int (&(d->loctype), 1, fin))
return err;
if (err = read_double (&(d->velx), 1, fin))
return err;
if (err = read_double (&(d->vely), 1, fin))
return err;
if (err = read_double (&(d->vscale), 1, fin))
return err;
if (err = read_int (&(d->units), 1, fin))
return err;
if (err = read_double (&(d->userlength), 1, fin))
return err;
if (err = read_plotstr (&(d->vstr), fin))
return err;
return err;
}*/

/*
 * Read type world
 */ /*
static int read_world (world * d, FILE * fin)
{
    int err = 0;
    short magic, version, testmagic = 26, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_double (&(d->xg1), 1, fin))
return err;
if (err = read_double (&(d->xg2), 1, fin))
return err;
if (err = read_double (&(d->yg1), 1, fin))
return err;
if (err = read_double (&(d->yg2), 1, fin))
return err;
return err;
}*/

/*
 * Read type view
 */ /*
static int read_view (view * d, FILE * fin)
{
    int err = 0;
    short magic, version, testmagic = 27, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_double (&(d->xv1), 1, fin))
return err;
if (err = read_double (&(d->xv2), 1, fin))
return err;
if (err = read_double (&(d->yv1), 1, fin))
return err;
if (err = read_double (&(d->yv2), 1, fin))
return err;
return err;
}*/

/*
 * Read type world_stack
 */ /*
static int read_world_stack (world_stack * d, FILE * fin)
{
    int i, err = 0;
    short magic, version, testmagic = 28, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_world (&(d->w), fin))
return err;
for (i = 0; i < 3; i++)
{
if (err = read_world (&(d->t[i]), fin))
return err;
}
return err;
}*/

/*
 * Read type labels
 */ /*
static int read_labels (labels * d, FILE * fin)
{
    int err = 0;
    short magic, version, testmagic = 29, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_plotstr (&(d->title), fin))
return err;
if (err = read_plotstr (&(d->stitle), fin))
return err;
return err;
}*/

/*
 * Read type hotdata
 */ /*
static int read_hotdata (hotdata * d, FILE * fin)
{
    int i, err = 0;
    short magic, version, testmagic = 30, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->type), 1, fin))
return err;
if (err = read_int (&(d->gno), 1, fin))
return err;
if (err = read_int (&(d->setno), 1, fin))
return err;
if (err = read_int (&(d->ptno), 1, fin))
return err;
if (err = read_int (&i, 1, fin))
return err;
if (i <= 0)
{
err = -1;
return err;
}
if (d->buf != NULL)
{
free (d->buf);
}
else
{
d->buf = (char *) malloc (i * sizeof (char));
}
if (err = read_char (d->buf, i, fin))
return err;
return err;
}*/

/*
 * Read type Regression
 */
/*
static int read_Regression (Regression * d, FILE * fin)
{
int err = 0;
short magic, version, testmagic = 31, testversion = 0;
if (err = read_short (&magic, 1, fin))
return err;
if (magic != testmagic)
return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->type), 1, fin))
return err;
if (err = read_double (&(d->xmin), 1, fin))
return err;
if (err = read_double (&(d->xmax), 1, fin))
return err;
if (err = read_double (d->coef, 15, fin))
return err;
return err;
} */

/*
 * Read type Spline
 */
/*
static int read_Spline (Spline * d, FILE * fin)
{
int err = 0;
short magic, version, testmagic = 32, testversion = 0;
if (err = read_short (&magic, 1, fin))
return err;
if (magic != testmagic)
return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->type), 1, fin))
return err;
if (err = read_int (&(d->npts), 1, fin))
return err;
if (err = read_double (&(d->xmin), 1, fin))
return err;
if (err = read_double (&(d->xmax), 1, fin))
return err; */
/*TODO if (err = read_double(d->a, 0, fin)) return err; */
/*TODO if (err = read_double(d->b, 0, fin)) return err; */
/*TODO if (err = read_double(d->c, 0, fin)) return err; */
/*TODO if (err = read_double(d->d, 0, fin)) return err; */
/*   return err;
} */

/*
 * Read type plotarr
 */ /*
static int read_plotarr (plotarr * d, FILE * fin)
{
    int i, cnt, ind, err = 0;
    short magic, version, testmagic = 33, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->type), 1, fin))
return err;
if (err = read_int (&(d->deact), 1, fin))
return err;
if (err = read_int (&(d->len), 1, fin))
return err;
if (err = read_double (&(d->missing), 1, fin))
return err;
if (err = read_int (&cnt, 1, fin))
return err;
for (i = 0; i < cnt; i++)
{
if (err = read_int (&ind, 1, fin))
return err;
if (err = read_double (d->ex[ind], d->len, fin))
return err;
}*/
/*TODO if (err = read_char(d->*s, 0, fin)) return err; */ /*
if (err = read_double (&(d->xmin), 1, fin))
return err;
if (err = read_double (&(d->xmax), 1, fin))
return err;
if (err = read_double (&(d->ymin), 1, fin))
return err;
if (err = read_double (&(d->ymax), 1, fin))
return err;
if (err = read_int (&(d->sym), 1, fin))
return err;
if (err = read_char (&(d->symchar), 1, fin))
return err;
if (err = read_int (&(d->symskip), 1, fin))
return err;
if (err = read_int (&(d->symfill), 1, fin))
return err;
if (err = read_int (&(d->symdot), 1, fin))
return err;
if (err = read_int (&(d->symlines), 1, fin))
return err;
if (err = read_int (&(d->symlinew), 1, fin))
return err;
if (err = read_int (&(d->symcolor), 1, fin))
return err;
if (err = read_double (&(d->symsize), 1, fin))
return err;
if (err = read_int (&(d->avgflag), 1, fin))
return err;
if (err = read_int (&(d->avgstdflag), 1, fin))
return err;
if (err = read_int (&(d->avg2stdflag), 1, fin))
return err;
if (err = read_int (&(d->avg3stdflag), 1, fin))
return err;
if (err = read_int (&(d->avgallflag), 1, fin))
return err;
if (err = read_int (&(d->avgvalflag), 1, fin))
return err;
if (err = read_int (&(d->harmonicflag), 1, fin))
return err;
if (err = read_int (&(d->geometricflag), 1, fin))
return err;
if (err = read_int (&(d->font), 1, fin))
return err;
if (err = read_int (&(d->format), 1, fin))
return err;
if (err = read_int (&(d->prec), 1, fin))
return err;
if (err = read_int (&(d->just), 1, fin))
return err;
if (err = read_int (&(d->where), 1, fin))
return err;
if (err = read_double (&(d->valsize), 1, fin))
return err;
if (err = read_int (&(d->lines), 1, fin))
return err;
if (err = read_int (&(d->linew), 1, fin))
return err;
if (err = read_int (&(d->color), 1, fin))
return err;
if (err = read_int (&(d->lineskip), 1, fin))
return err;
if (err = read_int (&(d->fill), 1, fin))
return err;
if (err = read_int (&(d->fillusing), 1, fin))
return err;
if (err = read_int (&(d->fillcolor), 1, fin))
return err;
if (err = read_int (&(d->fillpattern), 1, fin))
return err;
if (err = read_int (&(d->errbar), 1, fin))
return err;
if (err = read_int (&(d->errbarxy), 1, fin))
return err;
if (err = read_int (&(d->errbar_linew), 1, fin))
return err;
if (err = read_int (&(d->errbar_lines), 1, fin))
return err;
if (err = read_int (&(d->errbar_riser), 1, fin))
return err;
if (err = read_int (&(d->errbar_riser_linew), 1, fin))
return err;
if (err = read_int (&(d->errbar_riser_lines), 1, fin))
return err;
if (err = read_double (&(d->errbarper), 1, fin))
return err;
if (err = read_double (&(d->hilowper), 1, fin))
return err;
if (err = read_int (&(d->density_plot), 1, fin))
return err;
if (err = read_double (&(d->zmin), 1, fin))
return err;
if (err = read_double (&(d->zmax), 1, fin))
return err;
if (err = read_char (d->comments, 256, fin))
return err;
if (err = read_int (&(d->hotlink), 1, fin))
return err;
if (err = read_int (&(d->hotsrc), 1, fin))
return err;
if (err = read_char (d->hotfile, 256, fin))
return err;
if (err = read_double (d->emin, 6, fin))
return err;
if (err = read_double (d->emax, 6, fin))
return err;
if (err = read_int (d->imin, 6, fin))
return err;
if (err = read_int (d->imax, 6, fin))
return err;*/
/* TODO for (i = 0; i < 0; i++) {
if (err = read_Regression(d->r, fin)) return err;
}
 TODO for (i = 0; i < 0; i++) {
if (err = read_Spline(d->spl, fin)) return err;
} */ /*
return err;
}*/

/*
 * Read type tickmarks
 */ /*
static int read_tickmarks (tickmarks * d, FILE * fin)
{
    int i, err = 0;
    short magic, version, testmagic = 34, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->axis), 1, fin))
return err;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->alt), 1, fin))
return err;
if (err = read_double (&(d->tmin), 1, fin))
return err;
if (err = read_double (&(d->tmax), 1, fin))
return err;
if (err = read_double (&(d->tmajor), 1, fin))
return err;
if (err = read_double (&(d->tminor), 1, fin))
return err;
if (err = read_double (&(d->offsx), 1, fin))
return err;
if (err = read_double (&(d->offsy), 1, fin))
return err;
if (err = read_plotstr (&(d->label), fin))
return err;
if (err = read_int (&(d->label_layout), 1, fin))
return err;
if (err = read_int (&(d->label_place), 1, fin))
return err;
if (err = read_int (&(d->tl_flag), 1, fin))
return err;
if (err = read_int (&(d->tl_type), 1, fin))
return err;
if (err = read_int (&(d->tl_layout), 1, fin))
return err;
if (err = read_int (&(d->tl_angle), 1, fin))
return err;
if (err = read_int (&(d->tl_sign), 1, fin))
return err;
if (err = read_int (&(d->tl_just), 1, fin))
return err;
if (err = read_int (&(d->tl_prec), 1, fin))
return err;
if (err = read_int (&(d->tl_format), 1, fin))
return err;
if (err = read_int (&(d->tl_skip), 1, fin))
return err;
if (err = read_int (&(d->tl_staggered), 1, fin))
return err;
if (err = read_int (&(d->tl_starttype), 1, fin))
return err;
if (err = read_int (&(d->tl_stoptype), 1, fin))
return err;
if (err = read_double (&(d->tl_start), 1, fin))
return err;
if (err = read_double (&(d->tl_stop), 1, fin))
return err;
if (err = read_int (&(d->tl_op), 1, fin))
return err;
if (err = read_double (&(d->tl_vgap), 1, fin))
return err;
if (err = read_double (&(d->tl_hgap), 1, fin))
return err;
if (err = read_int (&(d->tl_font), 1, fin))
return err;
if (err = read_double (&(d->tl_charsize), 1, fin))
return err;
if (err = read_int (&(d->tl_color), 1, fin))
return err;
if (err = read_int (&(d->tl_linew), 1, fin))
return err;
if (err = read_char (d->tl_appstr, 256, fin))
return err;
if (err = read_char (d->tl_prestr, 256, fin))
return err;
if (err = read_int (&(d->t_type), 1, fin))
return err;
if (err = read_int (&(d->t_flag), 1, fin))
return err;
if (err = read_int (&(d->t_mflag), 1, fin))
return err;
if (err = read_int (&(d->t_integer), 1, fin))
return err;
if (err = read_int (&(d->t_num), 1, fin))
return err;
if (err = read_int (&(d->t_inout), 1, fin))
return err;
if (err = read_int (&(d->t_log), 1, fin))
return err;
if (err = read_int (&(d->t_op), 1, fin))
return err;
if (err = read_int (&(d->t_color), 1, fin))
return err;
if (err = read_int (&(d->t_lines), 1, fin))
return err;
if (err = read_int (&(d->t_linew), 1, fin))
return err;
if (err = read_int (&(d->t_mcolor), 1, fin))
return err;
if (err = read_int (&(d->t_mlines), 1, fin))
return err;
if (err = read_int (&(d->t_mlinew), 1, fin))
return err;
if (err = read_double (&(d->t_size), 1, fin))
return err;
if (err = read_double (&(d->t_msize), 1, fin))
return err;
if (err = read_int (&(d->t_drawbar), 1, fin))
return err;
if (err = read_int (&(d->t_drawbarcolor), 1, fin))
return err;
if (err = read_int (&(d->t_drawbarlines), 1, fin))
return err;
if (err = read_int (&(d->t_drawbarlinew), 1, fin))
return err;
if (err = read_int (&(d->t_gridflag), 1, fin))
return err;
if (err = read_int (&(d->t_mgridflag), 1, fin))
return err;
if (err = read_int (&(d->t_spec), 1, fin))
return err;
if (err = read_double (d->t_specloc, 40, fin))
return err;
for (i = 0; i < 40; i++)
{
if (err = read_plotstr (&(d->t_speclab[i]), fin))
return err;
}
if (err = read_int (&(d->spcovise_font), 1, fin))
return err;
if (err = read_double (&(d->spcovise_charsize), 1, fin))
return err;
if (err = read_int (&(d->spcovise_color), 1, fin))
return err;
if (err = read_int (&(d->spcovise_linew), 1, fin))
return err;
return err;
}*/

/*
 * Read type polartickmarks
 */
/*
static int read_polartickmarks (polartickmarks * d, FILE * fin)
{
int err = 0;
short magic, version, testmagic = 35, testversion = 0;
if (err = read_short (&magic, 1, fin))
return err;
if (magic != testmagic)
return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->axis), 1, fin))
return err;
return err;
} */

/*
 * Read type legend
 */ /*
static int read_legend (legend * d, FILE * fin)
{
    int i, err = 0;
    short magic, version, testmagic = 36, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->loctype), 1, fin))
return err;
if (err = read_int (&(d->layout), 1, fin))
return err;
if (err = read_int (&(d->vgap), 1, fin))
return err;
if (err = read_int (&(d->hgap), 1, fin))
return err;
if (err = read_int (&(d->len), 1, fin))
return err;
if (err = read_int (&(d->box), 1, fin))
return err;
if (err = read_double (&(d->legx), 1, fin))
return err;
if (err = read_double (&(d->legy), 1, fin))
return err;
if (err = read_int (&(d->font), 1, fin))
return err;
if (err = read_double (&(d->charsize), 1, fin))
return err;
if (err = read_int (&(d->color), 1, fin))
return err;
if (err = read_int (&(d->linew), 1, fin))
return err;
if (err = read_int (&(d->lines), 1, fin))
return err;
if (err = read_int (&(d->boxfill), 1, fin))
return err;
if (err = read_int (&(d->boxfillusing), 1, fin))
return err;
if (err = read_int (&(d->boxfillcolor), 1, fin))
return err;
if (err = read_int (&(d->boxfillpat), 1, fin))
return err;
if (err = read_int (&(d->boxlcolor), 1, fin))
return err;
if (err = read_int (&(d->boxlinew), 1, fin))
return err;
if (err = read_int (&(d->boxlines), 1, fin))
return err;
for (i = 0; i < 30; i++)
{
if (err = read_plotstr (&(d->str[i]), fin))
return err;
}
return err;
}*/

/*
 * Read type region
 */
/*
static int read_region (my_region * d, FILE * fin)
{
int err = 0;
short magic, version, testmagic = 37, testversion = 0;
if (err = read_short (&magic, 1, fin))
return err;
if (magic != testmagic)
return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->type), 1, fin))
return err;
if (err = read_int (&(d->color), 1, fin))
return err;
if (err = read_int (&(d->lines), 1, fin))
return err;
if (err = read_int (&(d->linew), 1, fin))
return err;
if (err = read_int (d->linkto, 10, fin))
return err;
if (err = read_int (&(d->n), 1, fin))
return err; */
/*TODO  if (err = read_double(d->x, 0, fin)) return err; */
/*TODO  if (err = read_double(d->y, 0, fin)) return err; */ /*
if (err = read_double (&(d->x1), 1, fin))
return err;
if (err = read_double (&(d->y1), 1, fin))
return err;
if (err = read_double (&(d->x2), 1, fin))
return err;
if (err = read_double (&(d->y2), 1, fin))
return err;
return err;
} */

/*
 * Read type framep
 */ /*
static int read_framep (framep * d, FILE * fin)
{
    int err = 0;
    short magic, version, testmagic = 38, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->type), 1, fin))
return err;
if (err = read_int (&(d->color), 1, fin))
return err;
if (err = read_int (&(d->lines), 1, fin))
return err;
if (err = read_int (&(d->linew), 1, fin))
return err;
if (err = read_int (&(d->fillbg), 1, fin))
return err;
if (err = read_int (&(d->bgcolor), 1, fin))
return err;
return err;
}*/

/*
 * Read type BoxPlot
 */ /*
static int read_BoxPlot (BoxPlot * d, FILE * fin)
{
    int err = 0;
    short magic, version, testmagic = 39, testversion = 0;
    if (err = read_short (&magic, 1, fin))
   return err;
    if (magic != testmagic)
   return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_double (&(d->il), 1, fin))
return err;
if (err = read_double (&(d->iu), 1, fin))
return err;
if (err = read_double (&(d->ol), 1, fin))
return err;
if (err = read_double (&(d->ou), 1, fin))
return err;
if (err = read_int (&(d->nthresh), 1, fin))
return err;
if (err = read_int (&(d->outliers), 1, fin))
return err;
if (err = read_int (&(d->wtype), 1, fin))
return err;
if (err = read_double (&(d->boxwid), 1, fin))
return err;
return err;
}*/

/*
 * Read type graph
 */
/*
static int read_graph (graph * d, FILE * fin)
{
int i, cnt, ind, err = 0;
short magic, version, testmagic = 40, testversion = 0;
if (err = read_short (&magic, 1, fin))
return err;
if (magic != testmagic)
return BADMAGIC;
if (err = read_short (&version, 1, fin))
return err;
if (version != testversion)
return BADVERSION;
if (err = read_int (&(d->active), 1, fin))
return err;
if (err = read_int (&(d->hidden), 1, fin))
return err;
if (err = read_int (&(d->label), 1, fin))
return err;
if (err = read_int (&(d->type), 1, fin))
return err;
if (err = read_int (&(d->noauto_world), 1, fin))
return err;
if (err = read_int (&(d->noauto_tics), 1, fin))
return err;
if (err = read_int (&(d->auto_type), 1, fin))
return err;
if (err = read_int (&(d->parmsread), 1, fin))
return err;
if (err = read_int (&(d->revx), 1, fin))
return err;
if (err = read_int (&(d->revy), 1, fin))
return err;
if (err = read_int (&(d->maxplot), 1, fin))
return err;

if (err = read_int (&cnt, 1, fin))
return err;
for (i = 0; i < cnt; i++)
{
if (err = read_int (&ind, 1, fin))
return err;
if (err = read_plotarr (&d->p[ind], fin))
return err;
}

if (err = read_legend (&(d->l), fin))
return err;
if (err = read_world (&(d->w), fin))
return err;
if (err = read_view (&(d->v), fin))
return err;
if (err = read_labels (&(d->labs), fin))
return err;
for (i = 0; i < 6; i++)
{
if (err = read_tickmarks (&(d->t[i]), fin))
return err;
}
if (err = read_framep (&(d->f), fin))
return err;
if (err = read_int (&(d->pointset), 1, fin))
return err;
if (err = read_int (&(d->pt_type), 1, fin))
return err;
if (err = read_double (&(d->dsx), 1, fin))
return err;
if (err = read_double (&(d->dsy), 1, fin))
return err;
if (err = read_int (&(d->fx), 1, fin))
return err;
if (err = read_int (&(d->fy), 1, fin))
return err;
if (err = read_int (&(d->px), 1, fin))
return err;
if (err = read_int (&(d->py), 1, fin))
return err;
for (i = 0; i < 20; i++)
{
if (err = read_world_stack (&(d->ws[i]), fin))
return err;
}
if (err = read_int (&(d->ws_top), 1, fin))
return err;
if (err = read_int (&(d->curw), 1, fin))
return err;
if (err = read_velocityp (&(d->vp), fin))
return err;
if (err = read_BoxPlot (&(d->bp), fin))
return err;
return err;
} */
/*
static int read_double (double *d, int n, FILE * fp)
{
    int err;
    err = fread (d, sizeof (double), n, fp);
    return err == n ? 0 : err;
}

static int write_double (double *d, int n, FILE * fp)
{
    int err;
err = fwrite (d, sizeof (double), n, fp);
return err == n ? 0 : err;
}

static int read_int (int *d, int n, FILE * fp)
{
int err;
err = fread (d, sizeof (int), n, fp);
return err == n ? 0 : err;
}

static int write_int (int *d, int n, FILE * fp)
{
int err;
err = fwrite (d, sizeof (int), n, fp);
return err == n ? 0 : err;
}

static int read_char (char *d, int n, FILE * fp)
{
int err;
err = fread (d, sizeof (char), n, fp);
return err == n ? 0 : err;
}

static int write_char (char *d, int n, FILE * fp)
{
int err;
err = fwrite (d, sizeof (char), n, fp);
return err == n ? 0 : err;
}

static int read_short (short *d, int n, FILE * fp)
{
int err;
err = fread (d, sizeof (short), n, fp);
return err == n ? 0 : err;
}

static int write_short (short *d, int n, FILE * fp)
{
int err;
err = fwrite (d, sizeof (short), n, fp);
return err == n ? 0 : err;
}
static int read_float (float *d, int n, FILE * fp)
{
int err;
err = fread (d, sizeof (float), n, fp);
return err == n ? 0 : err;
}

static int write_float (float *d, int n, FILE * fp)
{
int err;
err = fwrite (d, sizeof (float), n, fp);
return err == n ? 0 : err;
} */
