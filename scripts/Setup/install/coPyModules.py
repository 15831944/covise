##########################################################################################
#
# Python-Module: coviseModules.py
#
# Description: python module wrapping all COVISE modules to python (meta) modules
#
#              THIS SCRIPT WAS GENERATED BY /work/sk_te/trunk/covise/Python/makeBasiModCode.py
#              DATE of GENERATION Tue, 21 Jul 2009 16:08:55 +0000
#
# Usage: python coviseModules.py 
#           [<name of single file to be processed> | 
#            {-i<name of single file not to be processed>}*]
#        If no arguments are given, all available COVISE modules get processed.
#
# (C) Copyright 2005-2009 Visual Engineering Solutions GmbH, Stuttgart   info@visenso.de
#
##########################################################################################
from coviseModuleBase import *
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Examples/Cube
#
class  Cube(CoviseModule):
#==================================
    name_ =  "Cube"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "polygons" ,"Polygons", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "center", "FloatVector", "IMM")
        self.addParam( "size", "FloatSlider", "IMM")

    #     2. create parameter set members
    def set_center( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "center", valstr )
    def get_center( self ) :
        self.getParamValue( "center" )

    def set_size( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "size", valstr )
    def get_size( self ) :
        self.getParamValue( "size" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Examples/Hello
#
class  Hello(CoviseModule):
#==================================
    name_ =  "Hello"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Examples/PolygonSet
#
class  PolygonSet(CoviseModule):
#==================================
    name_ =  "PolygonSet"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "polygon_set" ,"Polygons", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "numObj", "IntSlider", "IMM")
        self.addParam( "timesteps", "Boolean", "IMM")

    #     2. create parameter set members
    def set_numObj( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "numObj", valstr )
    def get_numObj( self ) :
        self.getParamValue( "numObj" )

    def set_timesteps( self, x ) :
        valstr = x 
        self.setParamValue( "timesteps", valstr )
    def get_timesteps( self ) :
        self.getParamValue( "timesteps" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Examples/ReadObjSimple
#
class  ReadObjSimple(CoviseModule):
#==================================
    name_ =  "ReadObjSimple"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "polygons" ,"Polygons", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "objFile", "Browser", "IMM")
        self.addParam( "objFile___filter", "BrowserFilter", "IMM")

    #     2. create parameter set members
    def set_objFile( self, x ) :
        valstr = x 
        self.setParamValue( "objFile", valstr )
    def get_objFile( self ) :
        self.getParamValue( "objFile" )

    def set_objFile___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "objFile___filter", valstr )
    def get_objFile___filter( self ) :
        self.getParamValue( "objFile___filter" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Examples/TestSoc
#
class  TestSoc(CoviseModule):
#==================================
    name_ =  "TestSoc"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Examples/Enlarge
#
class  Enlarge(CoviseModule):
#==================================
    name_ =  "Enlarge"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "inPort" ,"UnstructuredGrid", "IN")

        # OUT ports
        self.addPort( "outPort" ,"UnstructuredGrid", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "scale", "FloatSlider", "IMM")

    #     2. create parameter set members
    def set_scale( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scale", valstr )
    def get_scale( self ) :
        self.getParamValue( "scale" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Examples/MiniSim
#
class  MiniSim(CoviseModule):
#==================================
    name_ =  "MiniSim"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'Startup': {'no label': 1}, 'choice': {'Choice 1': 1, ' --- 3 --- ': 3, ' -2- ': 2}}

        # IN ports

        # OUT ports
        self.addPort( "mesh" ,"UnstructuredGrid", "OUT")
        self.addPort( "data" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "Startup", "Choice", "IMM")
        self.addParam( "pause", "Boolean", "IMM")
        self.addParam( "choice", "Choice", "IMM")
        self.addParam( "Value111", "FloatSlider", "IMM")
        self.addParam( "Value117", "FloatSlider", "IMM")
        self.addParam( "Value777", "FloatSlider", "IMM")
        self.addParam( "relax", "FloatScalar", "IMM")
        self.addParam( "steps", "IntScalar", "IMM")
        self.addParam( "dir", "String", "IMM")

    #     2. create parameter set members
    def set_Startup( self, x ) :
        valstr = x 
        self.setParamValue( "Startup", valstr )
    def get_Startup( self ) :
        self.getParamValue( "Startup" )

    def set_pause( self, x ) :
        valstr = x 
        self.setParamValue( "pause", valstr )
    def get_pause( self ) :
        self.getParamValue( "pause" )

    def set_choice( self, x ) :
        valstr = x 
        self.setParamValue( "choice", valstr )
    def get_choice( self ) :
        self.getParamValue( "choice" )

    def set_Value111( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Value111", valstr )
    def get_Value111( self ) :
        self.getParamValue( "Value111" )

    def set_Value117( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Value117", valstr )
    def get_Value117( self ) :
        self.getParamValue( "Value117" )

    def set_Value777( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Value777", valstr )
    def get_Value777( self ) :
        self.getParamValue( "Value777" )

    def set_relax( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "relax", valstr )
    def get_relax( self ) :
        self.getParamValue( "relax" )

    def set_steps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "steps", valstr )
    def get_steps( self ) :
        self.getParamValue( "steps" )

    def set_dir( self, x ) :
        valstr = x 
        self.setParamValue( "dir", valstr )
    def get_dir( self ) :
        self.getParamValue( "dir" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Examples/ParamTest
#
class  ParamTest(CoviseModule):
#==================================
    name_ =  "ParamTest"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'choImm': {'right upper Inlet': 6, 'left center inlet': 3, 'right lower Inlet': 5, 'right center inlet': 4, 'left lower inlet': 1, 'left upper inlet': 2}}

        # IN ports
        self.addPort( "inputReq" ,"StructuredGrid", "IN")
        self.addPort( "inputNoReq" ,"UnstructuredGrid", "IN")

        # OUT ports
        self.addPort( "outPort" ,"coDoUnstructuredGrid", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "stringImm", "String", "IMM")
        self.addParam( "boolImm", "Boolean", "IMM")
        self.addParam( "iScalImm", "IntScalar", "IMM")
        self.addParam( "fScalImm", "FloatScalar", "IMM")
        self.addParam( "iSlidImm", "IntSlider", "IMM")
        self.addParam( "fSlidImm", "FloatSlider", "IMM")
        self.addParam( "fVectImm", "FloatVector", "IMM")
        self.addParam( "myFile", "Browser", "IMM")
        self.addParam( "myFile___filter", "BrowserFilter", "IMM")
        self.addParam( "my2File", "Browser", "IMM")
        self.addParam( "my2File___filter", "BrowserFilter", "IMM")
        self.addParam( "choImm", "Choice", "IMM")

    #     2. create parameter set members
    def set_stringImm( self, x ) :
        valstr = x 
        self.setParamValue( "stringImm", valstr )
    def get_stringImm( self ) :
        self.getParamValue( "stringImm" )

    def set_boolImm( self, x ) :
        valstr = x 
        self.setParamValue( "boolImm", valstr )
    def get_boolImm( self ) :
        self.getParamValue( "boolImm" )

    def set_iScalImm( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "iScalImm", valstr )
    def get_iScalImm( self ) :
        self.getParamValue( "iScalImm" )

    def set_fScalImm( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "fScalImm", valstr )
    def get_fScalImm( self ) :
        self.getParamValue( "fScalImm" )

    def set_iSlidImm( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "iSlidImm", valstr )
    def get_iSlidImm( self ) :
        self.getParamValue( "iSlidImm" )

    def set_fSlidImm( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "fSlidImm", valstr )
    def get_fSlidImm( self ) :
        self.getParamValue( "fSlidImm" )

    def set_fVectImm( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "fVectImm", valstr )
    def get_fVectImm( self ) :
        self.getParamValue( "fVectImm" )

    def set_myFile( self, x ) :
        valstr = x 
        self.setParamValue( "myFile", valstr )
    def get_myFile( self ) :
        self.getParamValue( "myFile" )

    def set_myFile___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "myFile___filter", valstr )
    def get_myFile___filter( self ) :
        self.getParamValue( "myFile___filter" )

    def set_my2File( self, x ) :
        valstr = x 
        self.setParamValue( "my2File", valstr )
    def get_my2File( self ) :
        self.getParamValue( "my2File" )

    def set_my2File___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "my2File___filter", valstr )
    def get_my2File___filter( self ) :
        self.getParamValue( "my2File___filter" )

    def set_choImm( self, x ) :
        valstr = x 
        self.setParamValue( "choImm", valstr )
    def get_choImm( self ) :
        self.getParamValue( "choImm" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Examples/TestUIF
#
class  TestUIF(CoviseModule):
#==================================
    name_ =  "TestUIF"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'top_switch': {'Scalar': 3, 'Sliders': 4, 'Boolean Parameters': 2, 'Vectors': 5, 'Now switch Parameters': 1}, 'ScalarSw': {'Sub-Cases of Scalar': 1, 'Float': 3, 'Int Scalars': 2}, 'choImm': {'right upper Inlet': 6, 'left center inlet': 3, 'right lower Inlet': 5, 'right center inlet': 4, 'left lower inlet': 1, 'left upper inlet': 2}}

        # IN ports

        # OUT ports
        self.addPort( "outPort" ,"Polygons", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "timer", "Timer", "IMM")
        self.addParam( "stringImm", "String", "IMM")
        self.addParam( "stringCom", "String", "IMM")
        self.addParam( "top_switch", "Choice", "IMM")
        self.addParam( "boolImm", "Boolean", "IMM")
        self.addParam( "boolCom", "Boolean", "IMM")
        self.addParam( "ScalarSw", "Choice", "IMM")
        self.addParam( "iScalImm", "IntScalar", "IMM")
        self.addParam( "iScalCom", "IntScalar", "IMM")
        self.addParam( "fScalImm", "FloatScalar", "IMM")
        self.addParam( "fScalCom", "FloatScalar", "IMM")
        self.addParam( "iSlidImm", "IntSlider", "IMM")
        self.addParam( "iSlidCom", "IntSlider", "IMM")
        self.addParam( "fSlidImm", "FloatSlider", "IMM")
        self.addParam( "fSlidCom", "FloatSlider", "IMM")
        self.addParam( "fVectImm", "FloatVector", "IMM")
        self.addParam( "fVectCom", "FloatVector", "IMM")
        self.addParam( "iVectImm", "IntVector", "IMM")
        self.addParam( "iVectCom", "IntVector", "IMM")
        self.addParam( "myFile", "Browser", "IMM")
        self.addParam( "myFile___filter", "BrowserFilter", "IMM")
        self.addParam( "choImm", "Choice", "IMM")

    #     2. create parameter set members
    def set_timer( self, x ) :
        valstr = x 
        self.setParamValue( "timer", valstr )
    def get_timer( self ) :
        self.getParamValue( "timer" )

    def set_stringImm( self, x ) :
        valstr = x 
        self.setParamValue( "stringImm", valstr )
    def get_stringImm( self ) :
        self.getParamValue( "stringImm" )

    def set_stringCom( self, x ) :
        valstr = x 
        self.setParamValue( "stringCom", valstr )
    def get_stringCom( self ) :
        self.getParamValue( "stringCom" )

    def set_top_switch( self, x ) :
        valstr = x 
        self.setParamValue( "top_switch", valstr )
    def get_top_switch( self ) :
        self.getParamValue( "top_switch" )

    def set_boolImm( self, x ) :
        valstr = x 
        self.setParamValue( "boolImm", valstr )
    def get_boolImm( self ) :
        self.getParamValue( "boolImm" )

    def set_boolCom( self, x ) :
        valstr = x 
        self.setParamValue( "boolCom", valstr )
    def get_boolCom( self ) :
        self.getParamValue( "boolCom" )

    def set_ScalarSw( self, x ) :
        valstr = x 
        self.setParamValue( "ScalarSw", valstr )
    def get_ScalarSw( self ) :
        self.getParamValue( "ScalarSw" )

    def set_iScalImm( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "iScalImm", valstr )
    def get_iScalImm( self ) :
        self.getParamValue( "iScalImm" )

    def set_iScalCom( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "iScalCom", valstr )
    def get_iScalCom( self ) :
        self.getParamValue( "iScalCom" )

    def set_fScalImm( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "fScalImm", valstr )
    def get_fScalImm( self ) :
        self.getParamValue( "fScalImm" )

    def set_fScalCom( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "fScalCom", valstr )
    def get_fScalCom( self ) :
        self.getParamValue( "fScalCom" )

    def set_iSlidImm( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "iSlidImm", valstr )
    def get_iSlidImm( self ) :
        self.getParamValue( "iSlidImm" )

    def set_iSlidCom( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "iSlidCom", valstr )
    def get_iSlidCom( self ) :
        self.getParamValue( "iSlidCom" )

    def set_fSlidImm( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "fSlidImm", valstr )
    def get_fSlidImm( self ) :
        self.getParamValue( "fSlidImm" )

    def set_fSlidCom( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "fSlidCom", valstr )
    def get_fSlidCom( self ) :
        self.getParamValue( "fSlidCom" )

    def set_fVectImm( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "fVectImm", valstr )
    def get_fVectImm( self ) :
        self.getParamValue( "fVectImm" )

    def set_fVectCom( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "fVectCom", valstr )
    def get_fVectCom( self ) :
        self.getParamValue( "fVectCom" )

    def set_iVectImm( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "iVectImm", valstr )
    def get_iVectImm( self ) :
        self.getParamValue( "iVectImm" )

    def set_iVectCom( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "iVectCom", valstr )
    def get_iVectCom( self ) :
        self.getParamValue( "iVectCom" )

    def set_myFile( self, x ) :
        valstr = x 
        self.setParamValue( "myFile", valstr )
    def get_myFile( self ) :
        self.getParamValue( "myFile" )

    def set_myFile___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "myFile___filter", valstr )
    def get_myFile___filter( self ) :
        self.getParamValue( "myFile___filter" )

    def set_choImm( self, x ) :
        valstr = x 
        self.setParamValue( "choImm", valstr )
    def get_choImm( self ) :
        self.getParamValue( "choImm" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Examples/UpdateChoice
#
class  UpdateChoice(CoviseModule):
#==================================
    name_ =  "UpdateChoice"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'choImm': {'selection values': 4, 'my primary': 2, 'This is': 1, 'choice': 3}, 'select': {'Choice1': 1, 'Choice2': 2, 'Choice3': 3}}

        # IN ports

        # OUT ports

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "stringImm", "String", "IMM")
        self.addParam( "select", "Choice", "IMM")
        self.addParam( "choImm", "Choice", "IMM")
        self.addParam( "stringCom", "String", "IMM")

    #     2. create parameter set members
    def set_stringImm( self, x ) :
        valstr = x 
        self.setParamValue( "stringImm", valstr )
    def get_stringImm( self ) :
        self.getParamValue( "stringImm" )

    def set_select( self, x ) :
        valstr = x 
        self.setParamValue( "select", valstr )
    def get_select( self ) :
        self.getParamValue( "select" )

    def set_choImm( self, x ) :
        valstr = x 
        self.setParamValue( "choImm", valstr )
    def get_choImm( self ) :
        self.getParamValue( "choImm" )

    def set_stringCom( self, x ) :
        valstr = x 
        self.setParamValue( "stringCom", valstr )
    def get_stringCom( self ) :
        self.getParamValue( "stringCom" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadEnsight
#
class  ReadEnsight(CoviseModule):
#==================================
    name_ =  "ReadEnsight"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'data_for_sdata3_1D': {'---': 1}, 'data_for_sdata2_2D': {'---': 1}, 'data_for_sdata2_3D': {'---': 1}, 'data_for_vdata2_3D': {'---': 1}, 'data_for_vdata2_2D': {'---': 1}, 'data_for_sdata3_3D': {'---': 1}, 'data_for_sdata3_2D': {'---': 1}, 'data_for_sdata1_3D': {'---': 1}, 'data_for_sdata1_2D': {'---': 1}, 'data_for_vdata2_1D': {'---': 1}, 'data_for_vdata1_1D': {'---': 1}, 'data_for_sdata1_1D': {'---': 1}, 'data_for_sdata2_1D': {'---': 1}, 'data_for_vdata1_2D': {'---': 1}, 'data_for_vdata1_3D': {'---': 1}}

        # IN ports

        # OUT ports
        self.addPort( "geoOut_3D" ,"UnstructuredGrid", "OUT")
        self.addPort( "sdata1_3D" ,"Float", "OUT")
        self.addPort( "sdata2_3D" ,"Float", "OUT")
        self.addPort( "sdata3_3D" ,"Float", "OUT")
        self.addPort( "vdata1_3D" ,"Vec3", "OUT")
        self.addPort( "vdata2_3D" ,"Vec3", "OUT")
        self.addPort( "geoOut_2D" ,"Polygons", "OUT")
        self.addPort( "sdata1_2D" ,"Float", "OUT")
        self.addPort( "sdata2_2D" ,"Float", "OUT")
        self.addPort( "sdata3_2D" ,"Float", "OUT")
        self.addPort( "vdata1_2D" ,"Vec3", "OUT")
        self.addPort( "vdata2_2D" ,"Vec3", "OUT")
        self.addPort( "geoOut_1D" ,"Points", "OUT")
        self.addPort( "sdata1_1D" ,"Float", "OUT")
        self.addPort( "sdata2_1D" ,"Float", "OUT")
        self.addPort( "sdata3_1D" ,"Float", "OUT")
        self.addPort( "vdata1_1D" ,"Vec3", "OUT")
        self.addPort( "vdata2_1D" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "case_file", "Browser", "IMM")
        self.addParam( "case_file___filter", "BrowserFilter", "IMM")
        self.addParam( "data_for_sdata1_3D", "Choice", "IMM")
        self.addParam( "data_for_sdata2_3D", "Choice", "IMM")
        self.addParam( "data_for_sdata3_3D", "Choice", "IMM")
        self.addParam( "data_for_vdata1_3D", "Choice", "IMM")
        self.addParam( "data_for_vdata2_3D", "Choice", "IMM")
        self.addParam( "data_for_sdata1_2D", "Choice", "IMM")
        self.addParam( "data_for_sdata2_2D", "Choice", "IMM")
        self.addParam( "data_for_sdata3_2D", "Choice", "IMM")
        self.addParam( "data_for_vdata1_2D", "Choice", "IMM")
        self.addParam( "data_for_vdata2_2D", "Choice", "IMM")
        self.addParam( "data_for_sdata1_1D", "Choice", "IMM")
        self.addParam( "data_for_sdata2_1D", "Choice", "IMM")
        self.addParam( "data_for_sdata3_1D", "Choice", "IMM")
        self.addParam( "data_for_vdata1_1D", "Choice", "IMM")
        self.addParam( "data_for_vdata2_1D", "Choice", "IMM")
        self.addParam( "data_byte_swap", "Boolean", "IMM")
        self.addParam( "choose_parts", "String", "IMM")
        self.addParam( "repair_connectivity", "Boolean", "IMM")
        self.addParam( "enable_autocoloring", "Boolean", "IMM")
        self.addParam( "store_covgrp", "Boolean", "IMM")
        self.addParam( "include_polyeder", "Boolean", "IMM")

    #     2. create parameter set members
    def set_case_file( self, x ) :
        valstr = x 
        self.setParamValue( "case_file", valstr )
    def get_case_file( self ) :
        self.getParamValue( "case_file" )

    def set_case_file___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "case_file___filter", valstr )
    def get_case_file___filter( self ) :
        self.getParamValue( "case_file___filter" )

    def set_data_for_sdata1_3D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_sdata1_3D", valstr )
    def get_data_for_sdata1_3D( self ) :
        self.getParamValue( "data_for_sdata1_3D" )

    def set_data_for_sdata2_3D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_sdata2_3D", valstr )
    def get_data_for_sdata2_3D( self ) :
        self.getParamValue( "data_for_sdata2_3D" )

    def set_data_for_sdata3_3D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_sdata3_3D", valstr )
    def get_data_for_sdata3_3D( self ) :
        self.getParamValue( "data_for_sdata3_3D" )

    def set_data_for_vdata1_3D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_vdata1_3D", valstr )
    def get_data_for_vdata1_3D( self ) :
        self.getParamValue( "data_for_vdata1_3D" )

    def set_data_for_vdata2_3D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_vdata2_3D", valstr )
    def get_data_for_vdata2_3D( self ) :
        self.getParamValue( "data_for_vdata2_3D" )

    def set_data_for_sdata1_2D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_sdata1_2D", valstr )
    def get_data_for_sdata1_2D( self ) :
        self.getParamValue( "data_for_sdata1_2D" )

    def set_data_for_sdata2_2D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_sdata2_2D", valstr )
    def get_data_for_sdata2_2D( self ) :
        self.getParamValue( "data_for_sdata2_2D" )

    def set_data_for_sdata3_2D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_sdata3_2D", valstr )
    def get_data_for_sdata3_2D( self ) :
        self.getParamValue( "data_for_sdata3_2D" )

    def set_data_for_vdata1_2D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_vdata1_2D", valstr )
    def get_data_for_vdata1_2D( self ) :
        self.getParamValue( "data_for_vdata1_2D" )

    def set_data_for_vdata2_2D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_vdata2_2D", valstr )
    def get_data_for_vdata2_2D( self ) :
        self.getParamValue( "data_for_vdata2_2D" )

    def set_data_for_sdata1_1D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_sdata1_1D", valstr )
    def get_data_for_sdata1_1D( self ) :
        self.getParamValue( "data_for_sdata1_1D" )

    def set_data_for_sdata2_1D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_sdata2_1D", valstr )
    def get_data_for_sdata2_1D( self ) :
        self.getParamValue( "data_for_sdata2_1D" )

    def set_data_for_sdata3_1D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_sdata3_1D", valstr )
    def get_data_for_sdata3_1D( self ) :
        self.getParamValue( "data_for_sdata3_1D" )

    def set_data_for_vdata1_1D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_vdata1_1D", valstr )
    def get_data_for_vdata1_1D( self ) :
        self.getParamValue( "data_for_vdata1_1D" )

    def set_data_for_vdata2_1D( self, x ) :
        valstr = x 
        self.setParamValue( "data_for_vdata2_1D", valstr )
    def get_data_for_vdata2_1D( self ) :
        self.getParamValue( "data_for_vdata2_1D" )

    def set_data_byte_swap( self, x ) :
        valstr = x 
        self.setParamValue( "data_byte_swap", valstr )
    def get_data_byte_swap( self ) :
        self.getParamValue( "data_byte_swap" )

    def set_choose_parts( self, x ) :
        valstr = x 
        self.setParamValue( "choose_parts", valstr )
    def get_choose_parts( self ) :
        self.getParamValue( "choose_parts" )

    def set_repair_connectivity( self, x ) :
        valstr = x 
        self.setParamValue( "repair_connectivity", valstr )
    def get_repair_connectivity( self ) :
        self.getParamValue( "repair_connectivity" )

    def set_enable_autocoloring( self, x ) :
        valstr = x 
        self.setParamValue( "enable_autocoloring", valstr )
    def get_enable_autocoloring( self ) :
        self.getParamValue( "enable_autocoloring" )

    def set_store_covgrp( self, x ) :
        valstr = x 
        self.setParamValue( "store_covgrp", valstr )
    def get_store_covgrp( self ) :
        self.getParamValue( "store_covgrp" )

    def set_include_polyeder( self, x ) :
        valstr = x 
        self.setParamValue( "include_polyeder", valstr )
    def get_include_polyeder( self ) :
        self.getParamValue( "include_polyeder" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/PerformerScene
#
class  PerformerScene(CoviseModule):
#==================================
    name_ =  "PerformerScene"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "model" ,"Points", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "modelPath", "Browser", "IMM")
        self.addParam( "modelPath___filter", "BrowserFilter", "IMM")
        self.addParam( "scale", "FloatScalar", "IMM")
        self.addParam( "backface", "Boolean", "IMM")
        self.addParam( "orientation_iv", "Boolean", "IMM")
        self.addParam( "convert_xforms_iv", "Boolean", "IMM")

    #     2. create parameter set members
    def set_modelPath( self, x ) :
        valstr = x 
        self.setParamValue( "modelPath", valstr )
    def get_modelPath( self ) :
        self.getParamValue( "modelPath" )

    def set_modelPath___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "modelPath___filter", valstr )
    def get_modelPath___filter( self ) :
        self.getParamValue( "modelPath___filter" )

    def set_scale( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "scale", valstr )
    def get_scale( self ) :
        self.getParamValue( "scale" )

    def set_backface( self, x ) :
        valstr = x 
        self.setParamValue( "backface", valstr )
    def get_backface( self ) :
        self.getParamValue( "backface" )

    def set_orientation_iv( self, x ) :
        valstr = x 
        self.setParamValue( "orientation_iv", valstr )
    def get_orientation_iv( self ) :
        self.getParamValue( "orientation_iv" )

    def set_convert_xforms_iv( self, x ) :
        valstr = x 
        self.setParamValue( "convert_xforms_iv", valstr )
    def get_convert_xforms_iv( self ) :
        self.getParamValue( "convert_xforms_iv" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadDyna3D
#
class  ReadDyna3D(CoviseModule):
#==================================
    name_ =  "ReadDyna3D"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'nodalDataType': {'None': 1, 'Velocities': 3, 'Accelerations': 4, 'Displacements': 2}, 'format': {'cadfem': 1, 'original': 2}, 'component': {'Sz': 3, 'Sy': 2, 'Sx': 1, 'Txy': 4, 'Von Mises': 8, 'Pressure': 7, 'Txz': 6, 'Tyz': 5}, 'byteswap': {'on': 2, 'off': 1, 'auto': 3}, 'elementDataType': {'None': 1, 'StressTensor': 2, 'PlasticStrain': 3, 'Thickness': 4}}

        # IN ports

        # OUT ports
        self.addPort( "out_grid" ,"UnstructuredGrid", "OUT")
        self.addPort( "data_1" ,"Vec3", "OUT")
        self.addPort( "data_2" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "data_path", "Browser", "IMM")
        self.addParam( "data_path___filter", "BrowserFilter", "IMM")
        self.addParam( "nodalDataType", "Choice", "IMM")
        self.addParam( "elementDataType", "Choice", "IMM")
        self.addParam( "component", "Choice", "IMM")
        self.addParam( "Selection", "String", "IMM")
        self.addParam( "Min_Num_State", "IntVector", "IMM")
        self.addParam( "format", "Choice", "IMM")
        self.addParam( "byteswap", "Choice", "IMM")
        self.addParam( "OnlyGeometry", "Boolean", "IMM")

    #     2. create parameter set members
    def set_data_path( self, x ) :
        valstr = x 
        self.setParamValue( "data_path", valstr )
    def get_data_path( self ) :
        self.getParamValue( "data_path" )

    def set_data_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "data_path___filter", valstr )
    def get_data_path___filter( self ) :
        self.getParamValue( "data_path___filter" )

    def set_nodalDataType( self, x ) :
        valstr = x 
        self.setParamValue( "nodalDataType", valstr )
    def get_nodalDataType( self ) :
        self.getParamValue( "nodalDataType" )

    def set_elementDataType( self, x ) :
        valstr = x 
        self.setParamValue( "elementDataType", valstr )
    def get_elementDataType( self ) :
        self.getParamValue( "elementDataType" )

    def set_component( self, x ) :
        valstr = x 
        self.setParamValue( "component", valstr )
    def get_component( self ) :
        self.getParamValue( "component" )

    def set_Selection( self, x ) :
        valstr = x 
        self.setParamValue( "Selection", valstr )
    def get_Selection( self ) :
        self.getParamValue( "Selection" )

    def set_Min_Num_State( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "Min_Num_State", valstr )
    def get_Min_Num_State( self ) :
        self.getParamValue( "Min_Num_State" )

    def set_format( self, x ) :
        valstr = x 
        self.setParamValue( "format", valstr )
    def get_format( self ) :
        self.getParamValue( "format" )

    def set_byteswap( self, x ) :
        valstr = x 
        self.setParamValue( "byteswap", valstr )
    def get_byteswap( self ) :
        self.getParamValue( "byteswap" )

    def set_OnlyGeometry( self, x ) :
        valstr = x 
        self.setParamValue( "OnlyGeometry", valstr )
    def get_OnlyGeometry( self ) :
        self.getParamValue( "OnlyGeometry" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadIv
#
class  ReadIv(CoviseModule):
#==================================
    name_ =  "ReadIv"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "descr" ,"Text_Cv", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "path", "Browser", "IMM")

    #     2. create parameter set members
    def set_path( self, x ) :
        valstr = x 
        self.setParamValue( "path", valstr )
    def get_path( self ) :
        self.getParamValue( "path" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadPatran
#
class  ReadPatran(CoviseModule):
#==================================
    name_ =  "ReadPatran"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'Option': {'Element_Results': 2, 'Nodal_Results': 1}}

        # IN ports

        # OUT ports
        self.addPort( "mesh" ,"UnstructuredGrid", "OUT")
        self.addPort( "data1" ,"Vec3", "OUT")
        self.addPort( "data2" ,"Float", "OUT")
        self.addPort( "type" ,"IntArr", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "grid_path", "Browser", "IMM")
        self.addParam( "grid_path___filter", "BrowserFilter", "IMM")
        self.addParam( "nodal_displ_force_path", "Browser", "IMM")
        self.addParam( "nodal_displ_force_path___filter", "BrowserFilter", "IMM")
        self.addParam( "nodal_result_path", "Browser", "IMM")
        self.addParam( "nodal_result_path___filter", "BrowserFilter", "IMM")
        self.addParam( "element_result_path", "Browser", "IMM")
        self.addParam( "element_result_path___filter", "BrowserFilter", "IMM")
        self.addParam( "Option", "Choice", "IMM")
        self.addParam( "timesteps", "IntScalar", "IMM")
        self.addParam( "skipped_files", "IntScalar", "IMM")
        self.addParam( "nb_columns", "IntScalar", "IMM")

    #     2. create parameter set members
    def set_grid_path( self, x ) :
        valstr = x 
        self.setParamValue( "grid_path", valstr )
    def get_grid_path( self ) :
        self.getParamValue( "grid_path" )

    def set_grid_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "grid_path___filter", valstr )
    def get_grid_path___filter( self ) :
        self.getParamValue( "grid_path___filter" )

    def set_nodal_displ_force_path( self, x ) :
        valstr = x 
        self.setParamValue( "nodal_displ_force_path", valstr )
    def get_nodal_displ_force_path( self ) :
        self.getParamValue( "nodal_displ_force_path" )

    def set_nodal_displ_force_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "nodal_displ_force_path___filter", valstr )
    def get_nodal_displ_force_path___filter( self ) :
        self.getParamValue( "nodal_displ_force_path___filter" )

    def set_nodal_result_path( self, x ) :
        valstr = x 
        self.setParamValue( "nodal_result_path", valstr )
    def get_nodal_result_path( self ) :
        self.getParamValue( "nodal_result_path" )

    def set_nodal_result_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "nodal_result_path___filter", valstr )
    def get_nodal_result_path___filter( self ) :
        self.getParamValue( "nodal_result_path___filter" )

    def set_element_result_path( self, x ) :
        valstr = x 
        self.setParamValue( "element_result_path", valstr )
    def get_element_result_path( self ) :
        self.getParamValue( "element_result_path" )

    def set_element_result_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "element_result_path___filter", valstr )
    def get_element_result_path___filter( self ) :
        self.getParamValue( "element_result_path___filter" )

    def set_Option( self, x ) :
        valstr = x 
        self.setParamValue( "Option", valstr )
    def get_Option( self ) :
        self.getParamValue( "Option" )

    def set_timesteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "timesteps", valstr )
    def get_timesteps( self ) :
        self.getParamValue( "timesteps" )

    def set_skipped_files( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "skipped_files", valstr )
    def get_skipped_files( self ) :
        self.getParamValue( "skipped_files" )

    def set_nb_columns( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "nb_columns", valstr )
    def get_nb_columns( self ) :
        self.getParamValue( "nb_columns" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/RW_AVS_TriMesh
#
class  RW_AVS_TriMesh(CoviseModule):
#==================================
    name_ =  "RW_AVS_TriMesh"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "meshIn" ,"Polygons", "IN")
        self.addPort( "dataIn" ,"Float|Vec3", "IN")

        # OUT ports
        self.addPort( "meshOut" ,"Polygons", "OUT")
        self.addPort( "dataOut" ,"Float|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "filename", "Browser", "IMM")

    #     2. create parameter set members
    def set_filename( self, x ) :
        valstr = x 
        self.setParamValue( "filename", valstr )
    def get_filename( self ) :
        self.getParamValue( "filename" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadTecplot
#
class  ReadTecplot(CoviseModule):
#==================================
    name_ =  "ReadTecplot"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'scalar_2': {'(none)': 1}, 'grid_z1': {'(none)': 1}, 'vec_z': {'(none)': 1}, 'vec_x': {'(none)': 1}, 'vec_y': {'(none)': 1}, 'grid_z0': {'(none)': 1}, 'scalar_1': {'(none)': 1}, 'scalar_0': {'(none)': 1}, 'grid_y': {'(none)': 1}, 'grid_x': {'(none)': 1}, 'format_of_file': {'Selafin': 3, 'Automatic Detection': 1, 'Binary V.10': 6, 'Original Binary': 4, 'Original Binary- byte-swapped': 5, 'ASCII': 2}}

        # IN ports

        # OUT ports
        self.addPort( "grid" ,"StructuredGrid|UnstructuredGrid|Polygons", "OUT")
        self.addPort( "grid2" ,"StructuredGrid|UnstructuredGrid|Polygons", "OUT")
        self.addPort( "vector" ,"Vec3", "OUT")
        self.addPort( "dataout0" ,"Float|Text", "OUT")
        self.addPort( "dataout1" ,"Float|Text", "OUT")
        self.addPort( "dataout2" ,"Float|Text", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "format_of_file", "Choice", "IMM")
        self.addParam( "fullpath", "Browser", "IMM")
        self.addParam( "fullpath___filter", "BrowserFilter", "IMM")
        self.addParam( "TimestepSequence", "Boolean", "IMM")
        self.addParam( "SequenceBegin", "IntScalar", "IMM")
        self.addParam( "SequenceEnd", "IntScalar", "IMM")
        self.addParam( "SequenceInc", "IntScalar", "IMM")
        self.addParam( "grid_x", "Choice", "IMM")
        self.addParam( "grid_y", "Choice", "IMM")
        self.addParam( "grid_z0", "Choice", "IMM")
        self.addParam( "grid_z1", "Choice", "IMM")
        self.addParam( "scale_z", "FloatSlider", "IMM")
        self.addParam( "vec_x", "Choice", "IMM")
        self.addParam( "vec_y", "Choice", "IMM")
        self.addParam( "vec_z", "Choice", "IMM")
        self.addParam( "scalar_0", "Choice", "IMM")
        self.addParam( "scalar_1", "Choice", "IMM")
        self.addParam( "scalar_2", "Choice", "IMM")
        self.addParam( "data_has_timesteps", "Boolean", "IMM")
        self.addParam( "check_connectivity", "Boolean", "IMM")
        self.addParam( "translation", "FloatVector", "IMM")
        self.addParam( "auto_trans", "Boolean", "IMM")

    #     2. create parameter set members
    def set_format_of_file( self, x ) :
        valstr = x 
        self.setParamValue( "format_of_file", valstr )
    def get_format_of_file( self ) :
        self.getParamValue( "format_of_file" )

    def set_fullpath( self, x ) :
        valstr = x 
        self.setParamValue( "fullpath", valstr )
    def get_fullpath( self ) :
        self.getParamValue( "fullpath" )

    def set_fullpath___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "fullpath___filter", valstr )
    def get_fullpath___filter( self ) :
        self.getParamValue( "fullpath___filter" )

    def set_TimestepSequence( self, x ) :
        valstr = x 
        self.setParamValue( "TimestepSequence", valstr )
    def get_TimestepSequence( self ) :
        self.getParamValue( "TimestepSequence" )

    def set_SequenceBegin( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "SequenceBegin", valstr )
    def get_SequenceBegin( self ) :
        self.getParamValue( "SequenceBegin" )

    def set_SequenceEnd( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "SequenceEnd", valstr )
    def get_SequenceEnd( self ) :
        self.getParamValue( "SequenceEnd" )

    def set_SequenceInc( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "SequenceInc", valstr )
    def get_SequenceInc( self ) :
        self.getParamValue( "SequenceInc" )

    def set_grid_x( self, x ) :
        valstr = x 
        self.setParamValue( "grid_x", valstr )
    def get_grid_x( self ) :
        self.getParamValue( "grid_x" )

    def set_grid_y( self, x ) :
        valstr = x 
        self.setParamValue( "grid_y", valstr )
    def get_grid_y( self ) :
        self.getParamValue( "grid_y" )

    def set_grid_z0( self, x ) :
        valstr = x 
        self.setParamValue( "grid_z0", valstr )
    def get_grid_z0( self ) :
        self.getParamValue( "grid_z0" )

    def set_grid_z1( self, x ) :
        valstr = x 
        self.setParamValue( "grid_z1", valstr )
    def get_grid_z1( self ) :
        self.getParamValue( "grid_z1" )

    def set_scale_z( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scale_z", valstr )
    def get_scale_z( self ) :
        self.getParamValue( "scale_z" )

    def set_vec_x( self, x ) :
        valstr = x 
        self.setParamValue( "vec_x", valstr )
    def get_vec_x( self ) :
        self.getParamValue( "vec_x" )

    def set_vec_y( self, x ) :
        valstr = x 
        self.setParamValue( "vec_y", valstr )
    def get_vec_y( self ) :
        self.getParamValue( "vec_y" )

    def set_vec_z( self, x ) :
        valstr = x 
        self.setParamValue( "vec_z", valstr )
    def get_vec_z( self ) :
        self.getParamValue( "vec_z" )

    def set_scalar_0( self, x ) :
        valstr = x 
        self.setParamValue( "scalar_0", valstr )
    def get_scalar_0( self ) :
        self.getParamValue( "scalar_0" )

    def set_scalar_1( self, x ) :
        valstr = x 
        self.setParamValue( "scalar_1", valstr )
    def get_scalar_1( self ) :
        self.getParamValue( "scalar_1" )

    def set_scalar_2( self, x ) :
        valstr = x 
        self.setParamValue( "scalar_2", valstr )
    def get_scalar_2( self ) :
        self.getParamValue( "scalar_2" )

    def set_data_has_timesteps( self, x ) :
        valstr = x 
        self.setParamValue( "data_has_timesteps", valstr )
    def get_data_has_timesteps( self ) :
        self.getParamValue( "data_has_timesteps" )

    def set_check_connectivity( self, x ) :
        valstr = x 
        self.setParamValue( "check_connectivity", valstr )
    def get_check_connectivity( self ) :
        self.getParamValue( "check_connectivity" )

    def set_translation( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "translation", valstr )
    def get_translation( self ) :
        self.getParamValue( "translation" )

    def set_auto_trans( self, x ) :
        valstr = x 
        self.setParamValue( "auto_trans", valstr )
    def get_auto_trans( self ) :
        self.getParamValue( "auto_trans" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadABAQUS
#
class  ReadABAQUS(CoviseModule):
#==================================
    name_ =  "ReadABAQUS"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'Location_0': {'None': 1}, 'Component_0': {'None': 1}, 'SectionPoint_0': {'None': 1}, 'Invariant_0': {'None': 1}, 'Variable_0': {'None': 1}}

        # IN ports

        # OUT ports
        self.addPort( "Mesh_0" ,"UnstructuredGrid", "OUT")
        self.addPort( "Data_0" ,"Float|Vec3|Tensor|Mat3", "OUT")
        self.addPort( "PartIndices_0" ,"IntArr", "OUT")
        self.addPort( "PartsDictionary" ,"Text", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "ODB_file", "Browser", "IMM")
        self.addParam( "ODB_file___filter", "BrowserFilter", "IMM")
        self.addParam( "timeSteps", "IntVector", "IMM")
        self.addParam( "frames", "IntScalar", "IMM")
        self.addParam( "ScaleGridDisplacement", "FloatScalar", "IMM")
        self.addParam( "update_ODB", "Boolean", "IMM")
        self.addParam( "updated_ODB_file", "Browser", "IMM")
        self.addParam( "updated_ODB_file___filter", "BrowserFilter", "IMM")
        self.addParam( "Variable_0", "Choice", "IMM")
        self.addParam( "Component_0", "Choice", "IMM")
        self.addParam( "Invariant_0", "Choice", "IMM")
        self.addParam( "Location_0", "Choice", "IMM")
        self.addParam( "SectionPoint_0", "Choice", "IMM")
        self.addParam( "OnlyThisSectionPoint_0", "Boolean", "IMM")
        self.addParam( "DataInLocalCS_0", "Boolean", "IMM")
        self.addParam( "ConjugateData", "Boolean", "IMM")

    #     2. create parameter set members
    def set_ODB_file( self, x ) :
        valstr = x 
        self.setParamValue( "ODB_file", valstr )
    def get_ODB_file( self ) :
        self.getParamValue( "ODB_file" )

    def set_ODB_file___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "ODB_file___filter", valstr )
    def get_ODB_file___filter( self ) :
        self.getParamValue( "ODB_file___filter" )

    def set_timeSteps( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "timeSteps", valstr )
    def get_timeSteps( self ) :
        self.getParamValue( "timeSteps" )

    def set_frames( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "frames", valstr )
    def get_frames( self ) :
        self.getParamValue( "frames" )

    def set_ScaleGridDisplacement( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "ScaleGridDisplacement", valstr )
    def get_ScaleGridDisplacement( self ) :
        self.getParamValue( "ScaleGridDisplacement" )

    def set_update_ODB( self, x ) :
        valstr = x 
        self.setParamValue( "update_ODB", valstr )
    def get_update_ODB( self ) :
        self.getParamValue( "update_ODB" )

    def set_updated_ODB_file( self, x ) :
        valstr = x 
        self.setParamValue( "updated_ODB_file", valstr )
    def get_updated_ODB_file( self ) :
        self.getParamValue( "updated_ODB_file" )

    def set_updated_ODB_file___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "updated_ODB_file___filter", valstr )
    def get_updated_ODB_file___filter( self ) :
        self.getParamValue( "updated_ODB_file___filter" )

    def set_Variable_0( self, x ) :
        valstr = x 
        self.setParamValue( "Variable_0", valstr )
    def get_Variable_0( self ) :
        self.getParamValue( "Variable_0" )

    def set_Component_0( self, x ) :
        valstr = x 
        self.setParamValue( "Component_0", valstr )
    def get_Component_0( self ) :
        self.getParamValue( "Component_0" )

    def set_Invariant_0( self, x ) :
        valstr = x 
        self.setParamValue( "Invariant_0", valstr )
    def get_Invariant_0( self ) :
        self.getParamValue( "Invariant_0" )

    def set_Location_0( self, x ) :
        valstr = x 
        self.setParamValue( "Location_0", valstr )
    def get_Location_0( self ) :
        self.getParamValue( "Location_0" )

    def set_SectionPoint_0( self, x ) :
        valstr = x 
        self.setParamValue( "SectionPoint_0", valstr )
    def get_SectionPoint_0( self ) :
        self.getParamValue( "SectionPoint_0" )

    def set_OnlyThisSectionPoint_0( self, x ) :
        valstr = x 
        self.setParamValue( "OnlyThisSectionPoint_0", valstr )
    def get_OnlyThisSectionPoint_0( self ) :
        self.getParamValue( "OnlyThisSectionPoint_0" )

    def set_DataInLocalCS_0( self, x ) :
        valstr = x 
        self.setParamValue( "DataInLocalCS_0", valstr )
    def get_DataInLocalCS_0( self ) :
        self.getParamValue( "DataInLocalCS_0" )

    def set_ConjugateData( self, x ) :
        valstr = x 
        self.setParamValue( "ConjugateData", valstr )
    def get_ConjugateData( self ) :
        self.getParamValue( "ConjugateData" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadBIFBOF
#
class  ReadBIFBOF(CoviseModule):
#==================================
    name_ =  "ReadBIFBOF"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "GridOut_3D" ,"UnstructuredGrid", "OUT")
        self.addPort( "GridOut_2D" ,"Polygons", "OUT")
        self.addPort( "vectorData" ,"Vec3", "OUT")
        self.addPort( "skalarData" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "BIFFile", "Browser", "IMM")
        self.addParam( "BIFFile___filter", "BrowserFilter", "IMM")
        self.addParam( "BOFFile", "Browser", "IMM")
        self.addParam( "BOFFile___filter", "BrowserFilter", "IMM")

    #     2. create parameter set members
    def set_BIFFile( self, x ) :
        valstr = x 
        self.setParamValue( "BIFFile", valstr )
    def get_BIFFile( self ) :
        self.getParamValue( "BIFFile" )

    def set_BIFFile___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "BIFFile___filter", valstr )
    def get_BIFFile___filter( self ) :
        self.getParamValue( "BIFFile___filter" )

    def set_BOFFile( self, x ) :
        valstr = x 
        self.setParamValue( "BOFFile", valstr )
    def get_BOFFile( self ) :
        self.getParamValue( "BOFFile" )

    def set_BOFFile___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "BOFFile___filter", valstr )
    def get_BOFFile___filter( self ) :
        self.getParamValue( "BOFFile___filter" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadCalib
#
class  ReadCalib(CoviseModule):
#==================================
    name_ =  "ReadCalib"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "mesh" ,"StructuredGrid", "OUT")
        self.addPort( "measurement" ,"StructuredGrid", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "CalibFile", "Browser", "IMM")
        self.addParam( "CalibFile___filter", "BrowserFilter", "IMM")

    #     2. create parameter set members
    def set_CalibFile( self, x ) :
        valstr = x 
        self.setParamValue( "CalibFile", valstr )
    def get_CalibFile( self ) :
        self.getParamValue( "CalibFile" )

    def set_CalibFile___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "CalibFile___filter", valstr )
    def get_CalibFile___filter( self ) :
        self.getParamValue( "CalibFile___filter" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadVolume
#
class  ReadVolume(CoviseModule):
#==================================
    name_ =  "ReadVolume"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "grid" ,"UniformGrid", "OUT")
        self.addPort( "channel0" ,"Float", "OUT")
        self.addPort( "channel1" ,"Float", "OUT")
        self.addPort( "channel2" ,"Float", "OUT")
        self.addPort( "channel3" ,"Float", "OUT")
        self.addPort( "channel4" ,"Float", "OUT")
        self.addPort( "channel5" ,"Float", "OUT")
        self.addPort( "channel6" ,"Float", "OUT")
        self.addPort( "channel7" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "FilePath", "Browser", "IMM")
        self.addParam( "FilePath___filter", "BrowserFilter", "IMM")
        self.addParam( "SequenceBegin", "IntScalar", "IMM")
        self.addParam( "SequenceEnd", "IntScalar", "IMM")
        self.addParam( "SequenceInc", "IntScalar", "IMM")
        self.addParam( "CustomSize", "Boolean", "IMM")
        self.addParam( "VolumeWidth", "FloatScalar", "IMM")
        self.addParam( "VolumeHeight", "FloatScalar", "IMM")
        self.addParam( "VolumeDepth", "FloatScalar", "IMM")
        self.addParam( "ReadRaw", "Boolean", "IMM")
        self.addParam( "ReadBS", "Boolean", "IMM")
        self.addParam( "NumVoxelX", "IntScalar", "IMM")
        self.addParam( "NumVoxelY", "IntScalar", "IMM")
        self.addParam( "NumVoxelZ", "IntScalar", "IMM")
        self.addParam( "BytePerChannel", "IntScalar", "IMM")
        self.addParam( "NumberOfChannels", "IntScalar", "IMM")
        self.addParam( "HeaderSize", "IntScalar", "IMM")
        self.addParam( "minValue", "IntScalar", "IMM")
        self.addParam( "maxValue", "IntScalar", "IMM")

    #     2. create parameter set members
    def set_FilePath( self, x ) :
        valstr = x 
        self.setParamValue( "FilePath", valstr )
    def get_FilePath( self ) :
        self.getParamValue( "FilePath" )

    def set_FilePath___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "FilePath___filter", valstr )
    def get_FilePath___filter( self ) :
        self.getParamValue( "FilePath___filter" )

    def set_SequenceBegin( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "SequenceBegin", valstr )
    def get_SequenceBegin( self ) :
        self.getParamValue( "SequenceBegin" )

    def set_SequenceEnd( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "SequenceEnd", valstr )
    def get_SequenceEnd( self ) :
        self.getParamValue( "SequenceEnd" )

    def set_SequenceInc( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "SequenceInc", valstr )
    def get_SequenceInc( self ) :
        self.getParamValue( "SequenceInc" )

    def set_CustomSize( self, x ) :
        valstr = x 
        self.setParamValue( "CustomSize", valstr )
    def get_CustomSize( self ) :
        self.getParamValue( "CustomSize" )

    def set_VolumeWidth( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "VolumeWidth", valstr )
    def get_VolumeWidth( self ) :
        self.getParamValue( "VolumeWidth" )

    def set_VolumeHeight( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "VolumeHeight", valstr )
    def get_VolumeHeight( self ) :
        self.getParamValue( "VolumeHeight" )

    def set_VolumeDepth( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "VolumeDepth", valstr )
    def get_VolumeDepth( self ) :
        self.getParamValue( "VolumeDepth" )

    def set_ReadRaw( self, x ) :
        valstr = x 
        self.setParamValue( "ReadRaw", valstr )
    def get_ReadRaw( self ) :
        self.getParamValue( "ReadRaw" )

    def set_ReadBS( self, x ) :
        valstr = x 
        self.setParamValue( "ReadBS", valstr )
    def get_ReadBS( self ) :
        self.getParamValue( "ReadBS" )

    def set_NumVoxelX( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "NumVoxelX", valstr )
    def get_NumVoxelX( self ) :
        self.getParamValue( "NumVoxelX" )

    def set_NumVoxelY( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "NumVoxelY", valstr )
    def get_NumVoxelY( self ) :
        self.getParamValue( "NumVoxelY" )

    def set_NumVoxelZ( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "NumVoxelZ", valstr )
    def get_NumVoxelZ( self ) :
        self.getParamValue( "NumVoxelZ" )

    def set_BytePerChannel( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "BytePerChannel", valstr )
    def get_BytePerChannel( self ) :
        self.getParamValue( "BytePerChannel" )

    def set_NumberOfChannels( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "NumberOfChannels", valstr )
    def get_NumberOfChannels( self ) :
        self.getParamValue( "NumberOfChannels" )

    def set_HeaderSize( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "HeaderSize", valstr )
    def get_HeaderSize( self ) :
        self.getParamValue( "HeaderSize" )

    def set_minValue( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "minValue", valstr )
    def get_minValue( self ) :
        self.getParamValue( "minValue" )

    def set_maxValue( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "maxValue", valstr )
    def get_maxValue( self ) :
        self.getParamValue( "maxValue" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/WriteVolume
#
class  WriteVolume(CoviseModule):
#==================================
    name_ =  "WriteVolume"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'FileType': {'Extended volume file (xvf)': 1, 'Raw volume file (rvf)': 2, 'ASCII volume file (avf)': 3, 'Raw volume data (dat)': 4}, 'DataFormat': {'16 bits per voxel': 2, '8 bits per voxel': 1}}

        # IN ports
        self.addPort( "grid" ,"UniformGrid", "IN")
        self.addPort( "channel0" ,"Float|Vec3|RGBA", "IN")
        self.addPort( "channel1" ,"Float", "IN")
        self.addPort( "channel2" ,"Float", "IN")
        self.addPort( "channel3" ,"Float", "IN")
        self.addPort( "channel4" ,"Float", "IN")
        self.addPort( "channel5" ,"Float", "IN")
        self.addPort( "channel6" ,"Float", "IN")
        self.addPort( "channel7" ,"Float", "IN")

        # OUT ports

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "FileName", "Browser", "IMM")
        self.addParam( "FileName___filter", "BrowserFilter", "IMM")
        self.addParam( "OverwriteExisting", "Boolean", "IMM")
        self.addParam( "FileType", "Choice", "IMM")
        self.addParam( "DataFormat", "Choice", "IMM")
        self.addParam( "MinimumValue", "FloatScalar", "IMM")
        self.addParam( "MaximumValue", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_FileName( self, x ) :
        valstr = x 
        self.setParamValue( "FileName", valstr )
    def get_FileName( self ) :
        self.getParamValue( "FileName" )

    def set_FileName___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "FileName___filter", valstr )
    def get_FileName___filter( self ) :
        self.getParamValue( "FileName___filter" )

    def set_OverwriteExisting( self, x ) :
        valstr = x 
        self.setParamValue( "OverwriteExisting", valstr )
    def get_OverwriteExisting( self ) :
        self.getParamValue( "OverwriteExisting" )

    def set_FileType( self, x ) :
        valstr = x 
        self.setParamValue( "FileType", valstr )
    def get_FileType( self ) :
        self.getParamValue( "FileType" )

    def set_DataFormat( self, x ) :
        valstr = x 
        self.setParamValue( "DataFormat", valstr )
    def get_DataFormat( self ) :
        self.getParamValue( "DataFormat" )

    def set_MinimumValue( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "MinimumValue", valstr )
    def get_MinimumValue( self ) :
        self.getParamValue( "MinimumValue" )

    def set_MaximumValue( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "MaximumValue", valstr )
    def get_MaximumValue( self ) :
        self.getParamValue( "MaximumValue" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/GenDat
#
class  GenDat(CoviseModule):
#==================================
    name_ =  "GenDat"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'Function': {'Pipe': 4, 'Sines': 1, 'Random': 3, 'Ramps': 2}, 'Coord_Representation': {'Rectilinear': 2, 'Structured': 3, 'Uniform': 1}, 'Coord_Type': {'Torus': 6, 'Random': 3, 'Uniform': 1, 'Half cylinder': 4, 'Full cylinder': 5, 'Rectilinear': 2}, 'Orientation': {'Random': 4, 'Colin': 2, 'Opt3': 3, 'Opt1': 1, 'Expand': 6, 'Circular': 5}, 'Coord_Range': {'start to end': 3, '0 to size': 2, '-1 to 1': 1}}

        # IN ports

        # OUT ports
        self.addPort( "GridOut0" ,"UniformGrid|RectilinearGrid|StructuredGrid", "OUT")
        self.addPort( "DataOut0" ,"Float", "OUT")
        self.addPort( "DataOut1" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "Coord_Type", "Choice", "IMM")
        self.addParam( "Coord_Representation", "Choice", "IMM")
        self.addParam( "Coord_Range", "Choice", "IMM")
        self.addParam( "Function", "Choice", "IMM")
        self.addParam( "Orientation", "Choice", "IMM")
        self.addParam( "xSize", "IntSlider", "IMM")
        self.addParam( "ySize", "IntSlider", "IMM")
        self.addParam( "zSize", "IntSlider", "IMM")
        self.addParam( "start", "FloatVector", "IMM")
        self.addParam( "end", "FloatVector", "IMM")
        self.addParam( "timestep", "IntSlider", "IMM")
        self.addParam( "color", "Color", "IMM")

    #     2. create parameter set members
    def set_Coord_Type( self, x ) :
        valstr = x 
        self.setParamValue( "Coord_Type", valstr )
    def get_Coord_Type( self ) :
        self.getParamValue( "Coord_Type" )

    def set_Coord_Representation( self, x ) :
        valstr = x 
        self.setParamValue( "Coord_Representation", valstr )
    def get_Coord_Representation( self ) :
        self.getParamValue( "Coord_Representation" )

    def set_Coord_Range( self, x ) :
        valstr = x 
        self.setParamValue( "Coord_Range", valstr )
    def get_Coord_Range( self ) :
        self.getParamValue( "Coord_Range" )

    def set_Function( self, x ) :
        valstr = x 
        self.setParamValue( "Function", valstr )
    def get_Function( self ) :
        self.getParamValue( "Function" )

    def set_Orientation( self, x ) :
        valstr = x 
        self.setParamValue( "Orientation", valstr )
    def get_Orientation( self ) :
        self.getParamValue( "Orientation" )

    def set_xSize( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "xSize", valstr )
    def get_xSize( self ) :
        self.getParamValue( "xSize" )

    def set_ySize( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "ySize", valstr )
    def get_ySize( self ) :
        self.getParamValue( "ySize" )

    def set_zSize( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "zSize", valstr )
    def get_zSize( self ) :
        self.getParamValue( "zSize" )

    def set_start( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "start", valstr )
    def get_start( self ) :
        self.getParamValue( "start" )

    def set_end( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "end", valstr )
    def get_end( self ) :
        self.getParamValue( "end" )

    def set_timestep( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "timestep", valstr )
    def get_timestep( self ) :
        self.getParamValue( "timestep" )

    def set_color( self, r, g, b, a ) :
        valstr =  "%f" % r + " %f" % g + " %f" % b + " %f" % a 
        self.setParamValue( "color", valstr )
    def get_color( self ) :
        self.getParamValue( "color" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadCadmould
#
class  ReadCadmould(CoviseModule):
#==================================
    name_ =  "ReadCadmould"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'fillField': {'automatic': 1}, 'Choice_4': {'---': 1}, 'Choice_5': {'---': 1}, 'Choice_6': {'---': 1}, 'Choice_7': {'---': 1}, 'Choice_0': {'---': 1}, 'Choice_1': {'---': 1}, 'Choice_2': {'---': 1}, 'Choice_3': {'---': 1}}

        # IN ports

        # OUT ports
        self.addPort( "stMesh" ,"UnstructuredGrid", "OUT")
        self.addPort( "trMesh" ,"UnstructuredGrid", "OUT")
        self.addPort( "thick" ,"Float", "OUT")
        self.addPort( "Data_0" ,"Float|IntArr", "OUT")
        self.addPort( "Data_1" ,"Float|IntArr", "OUT")
        self.addPort( "Data_2" ,"Float|IntArr", "OUT")
        self.addPort( "Data_3" ,"Float|IntArr", "OUT")
        self.addPort( "Data_4" ,"Float|IntArr", "OUT")
        self.addPort( "Data_5" ,"Float|IntArr", "OUT")
        self.addPort( "Data_6" ,"Float|IntArr", "OUT")
        self.addPort( "Data_7" ,"Float|IntArr", "OUT")
        self.addPort( "fiMesh" ,"UnstructuredGrid", "OUT")
        self.addPort( "fiValuw" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "filename", "Browser", "IMM")
        self.addParam( "filename___filter", "BrowserFilter", "IMM")
        self.addParam( "Choice_0", "Choice", "IMM")
        self.addParam( "Choice_1", "Choice", "IMM")
        self.addParam( "Choice_2", "Choice", "IMM")
        self.addParam( "Choice_3", "Choice", "IMM")
        self.addParam( "Choice_4", "Choice", "IMM")
        self.addParam( "Choice_5", "Choice", "IMM")
        self.addParam( "Choice_6", "Choice", "IMM")
        self.addParam( "Choice_7", "Choice", "IMM")
        self.addParam( "fillTimeStep", "IntScalar", "IMM")
        self.addParam( "fillField", "Choice", "IMM")
        self.addParam( "noDataColor", "String", "IMM")

    #     2. create parameter set members
    def set_filename( self, x ) :
        valstr = x 
        self.setParamValue( "filename", valstr )
    def get_filename( self ) :
        self.getParamValue( "filename" )

    def set_filename___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "filename___filter", valstr )
    def get_filename___filter( self ) :
        self.getParamValue( "filename___filter" )

    def set_Choice_0( self, x ) :
        valstr = x 
        self.setParamValue( "Choice_0", valstr )
    def get_Choice_0( self ) :
        self.getParamValue( "Choice_0" )

    def set_Choice_1( self, x ) :
        valstr = x 
        self.setParamValue( "Choice_1", valstr )
    def get_Choice_1( self ) :
        self.getParamValue( "Choice_1" )

    def set_Choice_2( self, x ) :
        valstr = x 
        self.setParamValue( "Choice_2", valstr )
    def get_Choice_2( self ) :
        self.getParamValue( "Choice_2" )

    def set_Choice_3( self, x ) :
        valstr = x 
        self.setParamValue( "Choice_3", valstr )
    def get_Choice_3( self ) :
        self.getParamValue( "Choice_3" )

    def set_Choice_4( self, x ) :
        valstr = x 
        self.setParamValue( "Choice_4", valstr )
    def get_Choice_4( self ) :
        self.getParamValue( "Choice_4" )

    def set_Choice_5( self, x ) :
        valstr = x 
        self.setParamValue( "Choice_5", valstr )
    def get_Choice_5( self ) :
        self.getParamValue( "Choice_5" )

    def set_Choice_6( self, x ) :
        valstr = x 
        self.setParamValue( "Choice_6", valstr )
    def get_Choice_6( self ) :
        self.getParamValue( "Choice_6" )

    def set_Choice_7( self, x ) :
        valstr = x 
        self.setParamValue( "Choice_7", valstr )
    def get_Choice_7( self ) :
        self.getParamValue( "Choice_7" )

    def set_fillTimeStep( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "fillTimeStep", valstr )
    def get_fillTimeStep( self ) :
        self.getParamValue( "fillTimeStep" )

    def set_fillField( self, x ) :
        valstr = x 
        self.setParamValue( "fillField", valstr )
    def get_fillField( self ) :
        self.getParamValue( "fillField" )

    def set_noDataColor( self, x ) :
        valstr = x 
        self.setParamValue( "noDataColor", valstr )
    def get_noDataColor( self ) :
        self.getParamValue( "noDataColor" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadFluent
#
class  ReadFluent(CoviseModule):
#==================================
    name_ =  "ReadFluent"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'select_data_3': {'(none)': 1}, 'select_data_2': {'(none)': 1}, 'select_data_1': {'(none)': 1}}

        # IN ports

        # OUT ports
        self.addPort( "grid" ,"StructuredGrid|UnstructuredGrid", "OUT")
        self.addPort( "polygons" ,"Polygons", "OUT")
        self.addPort( "data1" ,"Float|Vec3", "OUT")
        self.addPort( "data2" ,"Float|Vec3", "OUT")
        self.addPort( "data3" ,"Float|Vec3", "OUT")
        self.addPort( "lines" ,"Lines", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "CasePath", "Browser", "IMM")
        self.addParam( "CasePath___filter", "BrowserFilter", "IMM")
        self.addParam( "DataPath", "Browser", "IMM")
        self.addParam( "DataPath___filter", "BrowserFilter", "IMM")
        self.addParam( "select_data_1", "Choice", "IMM")
        self.addParam( "select_data_2", "Choice", "IMM")
        self.addParam( "select_data_3", "Choice", "IMM")
        self.addParam( "timesteps", "IntScalar", "IMM")
        self.addParam( "file_increment", "IntScalar", "IMM")
        self.addParam( "skipped_files", "IntScalar", "IMM")

    #     2. create parameter set members
    def set_CasePath( self, x ) :
        valstr = x 
        self.setParamValue( "CasePath", valstr )
    def get_CasePath( self ) :
        self.getParamValue( "CasePath" )

    def set_CasePath___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "CasePath___filter", valstr )
    def get_CasePath___filter( self ) :
        self.getParamValue( "CasePath___filter" )

    def set_DataPath( self, x ) :
        valstr = x 
        self.setParamValue( "DataPath", valstr )
    def get_DataPath( self ) :
        self.getParamValue( "DataPath" )

    def set_DataPath___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "DataPath___filter", valstr )
    def get_DataPath___filter( self ) :
        self.getParamValue( "DataPath___filter" )

    def set_select_data_1( self, x ) :
        valstr = x 
        self.setParamValue( "select_data_1", valstr )
    def get_select_data_1( self ) :
        self.getParamValue( "select_data_1" )

    def set_select_data_2( self, x ) :
        valstr = x 
        self.setParamValue( "select_data_2", valstr )
    def get_select_data_2( self ) :
        self.getParamValue( "select_data_2" )

    def set_select_data_3( self, x ) :
        valstr = x 
        self.setParamValue( "select_data_3", valstr )
    def get_select_data_3( self ) :
        self.getParamValue( "select_data_3" )

    def set_timesteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "timesteps", valstr )
    def get_timesteps( self ) :
        self.getParamValue( "timesteps" )

    def set_file_increment( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "file_increment", valstr )
    def get_file_increment( self ) :
        self.getParamValue( "file_increment" )

    def set_skipped_files( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "skipped_files", valstr )
    def get_skipped_files( self ) :
        self.getParamValue( "skipped_files" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadObj
#
class  ReadObj(CoviseModule):
#==================================
    name_ =  "ReadObj"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "polygons" ,"Polygons", "OUT")
        self.addPort( "colors" ,"RGBA", "OUT")
        self.addPort( "normals" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "objFile", "Browser", "IMM")
        self.addParam( "mtlFile", "Browser", "IMM")

    #     2. create parameter set members
    def set_objFile( self, x ) :
        valstr = x 
        self.setParamValue( "objFile", valstr )
    def get_objFile( self ) :
        self.getParamValue( "objFile" )

    def set_mtlFile( self, x ) :
        valstr = x 
        self.setParamValue( "mtlFile", valstr )
    def get_mtlFile( self ) :
        self.getParamValue( "mtlFile" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadStl
#
class  ReadStl(CoviseModule):
#==================================
    name_ =  "ReadStl"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'color_type': {'Autodetect': 1, 'Magics style': 2, 'VisCAM style': 3}, 'Format': {'Unix': 4, 'Autodetect': 1, 'ASCII': 2, 'Intel': 3}}

        # IN ports

        # OUT ports
        self.addPort( "mesh" ,"Polygons", "OUT")
        self.addPort( "Normals" ,"Vec3", "OUT")
        self.addPort( "Feature_lines" ,"Lines", "OUT")
        self.addPort( "colors" ,"RGBA", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "file_path", "Browser", "IMM")
        self.addParam( "file_path___filter", "BrowserFilter", "IMM")
        self.addParam( "Format", "Choice", "IMM")
        self.addParam( "color_type", "Choice", "IMM")
        self.addParam( "color", "String", "IMM")
        self.addParam( "RemoveDoubleVertices", "Boolean", "IMM")
        self.addParam( "ShowFeatureLines", "Boolean", "IMM")
        self.addParam( "FeatureAngle", "FloatSlider", "IMM")
        self.addParam( "FlipNormals", "Boolean", "IMM")

    #     2. create parameter set members
    def set_file_path( self, x ) :
        valstr = x 
        self.setParamValue( "file_path", valstr )
    def get_file_path( self ) :
        self.getParamValue( "file_path" )

    def set_file_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "file_path___filter", valstr )
    def get_file_path___filter( self ) :
        self.getParamValue( "file_path___filter" )

    def set_Format( self, x ) :
        valstr = x 
        self.setParamValue( "Format", valstr )
    def get_Format( self ) :
        self.getParamValue( "Format" )

    def set_color_type( self, x ) :
        valstr = x 
        self.setParamValue( "color_type", valstr )
    def get_color_type( self ) :
        self.getParamValue( "color_type" )

    def set_color( self, x ) :
        valstr = x 
        self.setParamValue( "color", valstr )
    def get_color( self ) :
        self.getParamValue( "color" )

    def set_RemoveDoubleVertices( self, x ) :
        valstr = x 
        self.setParamValue( "RemoveDoubleVertices", valstr )
    def get_RemoveDoubleVertices( self ) :
        self.getParamValue( "RemoveDoubleVertices" )

    def set_ShowFeatureLines( self, x ) :
        valstr = x 
        self.setParamValue( "ShowFeatureLines", valstr )
    def get_ShowFeatureLines( self ) :
        self.getParamValue( "ShowFeatureLines" )

    def set_FeatureAngle( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "FeatureAngle", valstr )
    def get_FeatureAngle( self ) :
        self.getParamValue( "FeatureAngle" )

    def set_FlipNormals( self, x ) :
        valstr = x 
        self.setParamValue( "FlipNormals", valstr )
    def get_FlipNormals( self ) :
        self.getParamValue( "FlipNormals" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/RWCoviseASCII
#
class  RWCoviseASCII(CoviseModule):
#==================================
    name_ =  "RWCoviseASCII"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "DataIn" ,"Geometry|IntArr|Polygons|Lines|Float|Vec3|UniformGrid|RectilinearGrid|TriangleStrips|StructuredGrid|UnstructuredGrid|Points|Vec3|Float|RGBA|USR_DistFenflossBoco", "IN")

        # OUT ports
        self.addPort( "DataOut" ,"IntArr|Polygons|Lines|Float|Vec3|UniformGrid|RectilinearGrid|TriangleStrips|StructuredGrid|UnstructuredGrid|Points|Vec3|Float|RGBA|USR_DistFenflossBoco", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "path", "Browser", "IMM")
        self.addParam( "path___filter", "BrowserFilter", "IMM")
        self.addParam( "new", "Boolean", "IMM")

    #     2. create parameter set members
    def set_path( self, x ) :
        valstr = x 
        self.setParamValue( "path", valstr )
    def get_path( self ) :
        self.getParamValue( "path" )

    def set_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "path___filter", valstr )
    def get_path___filter( self ) :
        self.getParamValue( "path___filter" )

    def set_new( self, x ) :
        valstr = x 
        self.setParamValue( "new", valstr )
    def get_new( self ) :
        self.getParamValue( "new" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/RWCoviseGroup
#
class  RWCoviseGroup(CoviseModule):
#==================================
    name_ =  "RWCoviseGroup"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'file_12': {'---': 1}, 'file_9': {'---': 1}, 'file_8': {'---': 1}, 'file_5': {'---': 1}, 'file_4': {'---': 1}, 'file_7': {'---': 1}, 'file_6': {'---': 1}, 'file_1': {'---': 1}, 'file_0': {'---': 1}, 'file_3': {'---': 1}, 'file_2': {'---': 1}, 'file_11': {'---': 1}, 'file_10': {'---': 1}, 'file_15': {'---': 1}, 'file_14': {'---': 1}, 'file_13': {'---': 1}}

        # IN ports
        self.addPort( "DataIn_0" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_1" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_2" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_3" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_4" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_5" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_6" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_7" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_8" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_9" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_10" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_11" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_12" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_13" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_14" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")
        self.addPort( "DataIn_15" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "IN")

        # OUT ports
        self.addPort( "DataOut_0" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_1" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_2" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_3" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_4" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_5" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_6" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_7" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_8" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_9" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_10" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_11" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_12" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_13" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_14" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")
        self.addPort( "DataOut_15" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Spheres|Texture|IntArr|RGBA", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "group_file", "Browser", "IMM")
        self.addParam( "group_file___filter", "BrowserFilter", "IMM")
        self.addParam( "file_0", "Choice", "IMM")
        self.addParam( "file_1", "Choice", "IMM")
        self.addParam( "file_2", "Choice", "IMM")
        self.addParam( "file_3", "Choice", "IMM")
        self.addParam( "file_4", "Choice", "IMM")
        self.addParam( "file_5", "Choice", "IMM")
        self.addParam( "file_6", "Choice", "IMM")
        self.addParam( "file_7", "Choice", "IMM")
        self.addParam( "file_8", "Choice", "IMM")
        self.addParam( "file_9", "Choice", "IMM")
        self.addParam( "file_10", "Choice", "IMM")
        self.addParam( "file_11", "Choice", "IMM")
        self.addParam( "file_12", "Choice", "IMM")
        self.addParam( "file_13", "Choice", "IMM")
        self.addParam( "file_14", "Choice", "IMM")
        self.addParam( "file_15", "Choice", "IMM")
        self.addParam( "description_0", "String", "IMM")
        self.addParam( "description_1", "String", "IMM")
        self.addParam( "description_2", "String", "IMM")
        self.addParam( "description_3", "String", "IMM")
        self.addParam( "description_4", "String", "IMM")
        self.addParam( "description_5", "String", "IMM")
        self.addParam( "description_6", "String", "IMM")
        self.addParam( "description_7", "String", "IMM")
        self.addParam( "description_8", "String", "IMM")
        self.addParam( "description_9", "String", "IMM")
        self.addParam( "description_10", "String", "IMM")
        self.addParam( "description_11", "String", "IMM")
        self.addParam( "description_12", "String", "IMM")
        self.addParam( "description_13", "String", "IMM")
        self.addParam( "description_14", "String", "IMM")
        self.addParam( "description_15", "String", "IMM")

    #     2. create parameter set members
    def set_group_file( self, x ) :
        valstr = x 
        self.setParamValue( "group_file", valstr )
    def get_group_file( self ) :
        self.getParamValue( "group_file" )

    def set_group_file___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "group_file___filter", valstr )
    def get_group_file___filter( self ) :
        self.getParamValue( "group_file___filter" )

    def set_file_0( self, x ) :
        valstr = x 
        self.setParamValue( "file_0", valstr )
    def get_file_0( self ) :
        self.getParamValue( "file_0" )

    def set_file_1( self, x ) :
        valstr = x 
        self.setParamValue( "file_1", valstr )
    def get_file_1( self ) :
        self.getParamValue( "file_1" )

    def set_file_2( self, x ) :
        valstr = x 
        self.setParamValue( "file_2", valstr )
    def get_file_2( self ) :
        self.getParamValue( "file_2" )

    def set_file_3( self, x ) :
        valstr = x 
        self.setParamValue( "file_3", valstr )
    def get_file_3( self ) :
        self.getParamValue( "file_3" )

    def set_file_4( self, x ) :
        valstr = x 
        self.setParamValue( "file_4", valstr )
    def get_file_4( self ) :
        self.getParamValue( "file_4" )

    def set_file_5( self, x ) :
        valstr = x 
        self.setParamValue( "file_5", valstr )
    def get_file_5( self ) :
        self.getParamValue( "file_5" )

    def set_file_6( self, x ) :
        valstr = x 
        self.setParamValue( "file_6", valstr )
    def get_file_6( self ) :
        self.getParamValue( "file_6" )

    def set_file_7( self, x ) :
        valstr = x 
        self.setParamValue( "file_7", valstr )
    def get_file_7( self ) :
        self.getParamValue( "file_7" )

    def set_file_8( self, x ) :
        valstr = x 
        self.setParamValue( "file_8", valstr )
    def get_file_8( self ) :
        self.getParamValue( "file_8" )

    def set_file_9( self, x ) :
        valstr = x 
        self.setParamValue( "file_9", valstr )
    def get_file_9( self ) :
        self.getParamValue( "file_9" )

    def set_file_10( self, x ) :
        valstr = x 
        self.setParamValue( "file_10", valstr )
    def get_file_10( self ) :
        self.getParamValue( "file_10" )

    def set_file_11( self, x ) :
        valstr = x 
        self.setParamValue( "file_11", valstr )
    def get_file_11( self ) :
        self.getParamValue( "file_11" )

    def set_file_12( self, x ) :
        valstr = x 
        self.setParamValue( "file_12", valstr )
    def get_file_12( self ) :
        self.getParamValue( "file_12" )

    def set_file_13( self, x ) :
        valstr = x 
        self.setParamValue( "file_13", valstr )
    def get_file_13( self ) :
        self.getParamValue( "file_13" )

    def set_file_14( self, x ) :
        valstr = x 
        self.setParamValue( "file_14", valstr )
    def get_file_14( self ) :
        self.getParamValue( "file_14" )

    def set_file_15( self, x ) :
        valstr = x 
        self.setParamValue( "file_15", valstr )
    def get_file_15( self ) :
        self.getParamValue( "file_15" )

    def set_description_0( self, x ) :
        valstr = x 
        self.setParamValue( "description_0", valstr )
    def get_description_0( self ) :
        self.getParamValue( "description_0" )

    def set_description_1( self, x ) :
        valstr = x 
        self.setParamValue( "description_1", valstr )
    def get_description_1( self ) :
        self.getParamValue( "description_1" )

    def set_description_2( self, x ) :
        valstr = x 
        self.setParamValue( "description_2", valstr )
    def get_description_2( self ) :
        self.getParamValue( "description_2" )

    def set_description_3( self, x ) :
        valstr = x 
        self.setParamValue( "description_3", valstr )
    def get_description_3( self ) :
        self.getParamValue( "description_3" )

    def set_description_4( self, x ) :
        valstr = x 
        self.setParamValue( "description_4", valstr )
    def get_description_4( self ) :
        self.getParamValue( "description_4" )

    def set_description_5( self, x ) :
        valstr = x 
        self.setParamValue( "description_5", valstr )
    def get_description_5( self ) :
        self.getParamValue( "description_5" )

    def set_description_6( self, x ) :
        valstr = x 
        self.setParamValue( "description_6", valstr )
    def get_description_6( self ) :
        self.getParamValue( "description_6" )

    def set_description_7( self, x ) :
        valstr = x 
        self.setParamValue( "description_7", valstr )
    def get_description_7( self ) :
        self.getParamValue( "description_7" )

    def set_description_8( self, x ) :
        valstr = x 
        self.setParamValue( "description_8", valstr )
    def get_description_8( self ) :
        self.getParamValue( "description_8" )

    def set_description_9( self, x ) :
        valstr = x 
        self.setParamValue( "description_9", valstr )
    def get_description_9( self ) :
        self.getParamValue( "description_9" )

    def set_description_10( self, x ) :
        valstr = x 
        self.setParamValue( "description_10", valstr )
    def get_description_10( self ) :
        self.getParamValue( "description_10" )

    def set_description_11( self, x ) :
        valstr = x 
        self.setParamValue( "description_11", valstr )
    def get_description_11( self ) :
        self.getParamValue( "description_11" )

    def set_description_12( self, x ) :
        valstr = x 
        self.setParamValue( "description_12", valstr )
    def get_description_12( self ) :
        self.getParamValue( "description_12" )

    def set_description_13( self, x ) :
        valstr = x 
        self.setParamValue( "description_13", valstr )
    def get_description_13( self ) :
        self.getParamValue( "description_13" )

    def set_description_14( self, x ) :
        valstr = x 
        self.setParamValue( "description_14", valstr )
    def get_description_14( self ) :
        self.getParamValue( "description_14" )

    def set_description_15( self, x ) :
        valstr = x 
        self.setParamValue( "description_15", valstr )
    def get_description_15( self ) :
        self.getParamValue( "description_15" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadCFX
#
class  ReadCFX(CoviseModule):
#==================================
    name_ =  "ReadCFX"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'boundary_scalar_data': {'No Scalar data': 1}, 'boundary_info': {'No Scalar data': 1}, 'transform_direction': {'abs2rel': 2, 'none': 1, 'rel2abs': 3}, 'scalar_data': {'No Scalar data': 1}, 'vector_data': {'No Vector data': 1}, 'boundary_vector_data': {'No Vector data': 1}, 'domains': {'No Domain': 1}, 'rotation_axis': {'y': 2, 'x': 1, 'z': 3}}

        # IN ports

        # OUT ports
        self.addPort( "GridOut0" ,"UnstructuredGrid", "OUT")
        self.addPort( "DataOut0" ,"Float", "OUT")
        self.addPort( "DataOut1" ,"Vec3", "OUT")
        self.addPort( "GridOut1" ,"Polygons", "OUT")
        self.addPort( "DataOut2" ,"Float", "OUT")
        self.addPort( "GridOut2" ,"Polygons", "OUT")
        self.addPort( "DataOut3" ,"Float", "OUT")
        self.addPort( "DataOut4" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "result", "Browser", "IMM")
        self.addParam( "result___filter", "BrowserFilter", "IMM")
        self.addParam( "domains", "Choice", "IMM")
        self.addParam( "RegionsSelection", "String", "IMM")
        self.addParam( "BoundarySelection", "String", "IMM")
        self.addParam( "scalar_data", "Choice", "IMM")
        self.addParam( "vector_data", "Choice", "IMM")
        self.addParam( "timesteps", "IntScalar", "IMM")
        self.addParam( "first_timestep", "IntScalar", "IMM")
        self.addParam( "readGrid", "Boolean", "IMM")
        self.addParam( "readRegions", "Boolean", "IMM")
        self.addParam( "readBoundaries", "Boolean", "IMM")
        self.addParam( "boundary_scalar_data", "Choice", "IMM")
        self.addParam( "boundary_vector_data", "Choice", "IMM")
        self.addParam( "grid_is_time_dependent", "Boolean", "IMM")
        self.addParam( "zone_with_time_dependent_grid", "IntScalar", "IMM")
        self.addParam( "rotAxis", "FloatVector", "IMM")
        self.addParam( "point_on_rotAxis", "FloatVector", "IMM")
        self.addParam( "rot_Angle_per_timestep", "FloatScalar", "IMM")
        self.addParam( "transform_velocity", "Boolean", "IMM")
        self.addParam( "transform_direction", "Choice", "IMM")
        self.addParam( "rotation_axis", "Choice", "IMM")
        self.addParam( "zone_to_transform_velocity", "IntScalar", "IMM")
        self.addParam( "angular_velocity", "FloatScalar", "IMM")
        self.addParam( "rotate_velocity", "Boolean", "IMM")
        self.addParam( "boundary_info", "Choice", "IMM")

    #     2. create parameter set members
    def set_result( self, x ) :
        valstr = x 
        self.setParamValue( "result", valstr )
    def get_result( self ) :
        self.getParamValue( "result" )

    def set_result___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "result___filter", valstr )
    def get_result___filter( self ) :
        self.getParamValue( "result___filter" )

    def set_domains( self, x ) :
        valstr = x 
        self.setParamValue( "domains", valstr )
    def get_domains( self ) :
        self.getParamValue( "domains" )

    def set_RegionsSelection( self, x ) :
        valstr = x 
        self.setParamValue( "RegionsSelection", valstr )
    def get_RegionsSelection( self ) :
        self.getParamValue( "RegionsSelection" )

    def set_BoundarySelection( self, x ) :
        valstr = x 
        self.setParamValue( "BoundarySelection", valstr )
    def get_BoundarySelection( self ) :
        self.getParamValue( "BoundarySelection" )

    def set_scalar_data( self, x ) :
        valstr = x 
        self.setParamValue( "scalar_data", valstr )
    def get_scalar_data( self ) :
        self.getParamValue( "scalar_data" )

    def set_vector_data( self, x ) :
        valstr = x 
        self.setParamValue( "vector_data", valstr )
    def get_vector_data( self ) :
        self.getParamValue( "vector_data" )

    def set_timesteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "timesteps", valstr )
    def get_timesteps( self ) :
        self.getParamValue( "timesteps" )

    def set_first_timestep( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "first_timestep", valstr )
    def get_first_timestep( self ) :
        self.getParamValue( "first_timestep" )

    def set_readGrid( self, x ) :
        valstr = x 
        self.setParamValue( "readGrid", valstr )
    def get_readGrid( self ) :
        self.getParamValue( "readGrid" )

    def set_readRegions( self, x ) :
        valstr = x 
        self.setParamValue( "readRegions", valstr )
    def get_readRegions( self ) :
        self.getParamValue( "readRegions" )

    def set_readBoundaries( self, x ) :
        valstr = x 
        self.setParamValue( "readBoundaries", valstr )
    def get_readBoundaries( self ) :
        self.getParamValue( "readBoundaries" )

    def set_boundary_scalar_data( self, x ) :
        valstr = x 
        self.setParamValue( "boundary_scalar_data", valstr )
    def get_boundary_scalar_data( self ) :
        self.getParamValue( "boundary_scalar_data" )

    def set_boundary_vector_data( self, x ) :
        valstr = x 
        self.setParamValue( "boundary_vector_data", valstr )
    def get_boundary_vector_data( self ) :
        self.getParamValue( "boundary_vector_data" )

    def set_grid_is_time_dependent( self, x ) :
        valstr = x 
        self.setParamValue( "grid_is_time_dependent", valstr )
    def get_grid_is_time_dependent( self ) :
        self.getParamValue( "grid_is_time_dependent" )

    def set_zone_with_time_dependent_grid( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "zone_with_time_dependent_grid", valstr )
    def get_zone_with_time_dependent_grid( self ) :
        self.getParamValue( "zone_with_time_dependent_grid" )

    def set_rotAxis( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "rotAxis", valstr )
    def get_rotAxis( self ) :
        self.getParamValue( "rotAxis" )

    def set_point_on_rotAxis( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "point_on_rotAxis", valstr )
    def get_point_on_rotAxis( self ) :
        self.getParamValue( "point_on_rotAxis" )

    def set_rot_Angle_per_timestep( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "rot_Angle_per_timestep", valstr )
    def get_rot_Angle_per_timestep( self ) :
        self.getParamValue( "rot_Angle_per_timestep" )

    def set_transform_velocity( self, x ) :
        valstr = x 
        self.setParamValue( "transform_velocity", valstr )
    def get_transform_velocity( self ) :
        self.getParamValue( "transform_velocity" )

    def set_transform_direction( self, x ) :
        valstr = x 
        self.setParamValue( "transform_direction", valstr )
    def get_transform_direction( self ) :
        self.getParamValue( "transform_direction" )

    def set_rotation_axis( self, x ) :
        valstr = x 
        self.setParamValue( "rotation_axis", valstr )
    def get_rotation_axis( self ) :
        self.getParamValue( "rotation_axis" )

    def set_zone_to_transform_velocity( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "zone_to_transform_velocity", valstr )
    def get_zone_to_transform_velocity( self ) :
        self.getParamValue( "zone_to_transform_velocity" )

    def set_angular_velocity( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "angular_velocity", valstr )
    def get_angular_velocity( self ) :
        self.getParamValue( "angular_velocity" )

    def set_rotate_velocity( self, x ) :
        valstr = x 
        self.setParamValue( "rotate_velocity", valstr )
    def get_rotate_velocity( self ) :
        self.getParamValue( "rotate_velocity" )

    def set_boundary_info( self, x ) :
        valstr = x 
        self.setParamValue( "boundary_info", valstr )
    def get_boundary_info( self ) :
        self.getParamValue( "boundary_info" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/CoverDocument
#
class  CoverDocument(CoviseModule):
#==================================
    name_ =  "CoverDocument"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "Document" ,"Points", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "Filename", "Browser", "IMM")
        self.addParam( "Filename___filter", "BrowserFilter", "IMM")
        self.addParam( "Title", "String", "IMM")

    #     2. create parameter set members
    def set_Filename( self, x ) :
        valstr = x 
        self.setParamValue( "Filename", valstr )
    def get_Filename( self ) :
        self.getParamValue( "Filename" )

    def set_Filename___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "Filename___filter", valstr )
    def get_Filename___filter( self ) :
        self.getParamValue( "Filename___filter" )

    def set_Title( self, x ) :
        valstr = x 
        self.setParamValue( "Title", valstr )
    def get_Title( self ) :
        self.getParamValue( "Title" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/LoadCadData
#
class  LoadCadData(CoviseModule):
#==================================
    name_ =  "LoadCadData"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "model" ,"Points", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "modelPath", "Browser", "IMM")
        self.addParam( "modelPath___filter", "BrowserFilter", "IMM")
        self.addParam( "scale", "FloatScalar", "IMM")
        self.addParam( "resize", "FloatVector", "IMM")
        self.addParam( "rotangle", "FloatScalar", "IMM")
        self.addParam( "transvec", "FloatVector", "IMM")
        self.addParam( "rotsvec", "FloatVector", "IMM")
        self.addParam( "backface", "Boolean", "IMM")
        self.addParam( "orientation_iv", "Boolean", "IMM")
        self.addParam( "convert_xforms_iv", "Boolean", "IMM")

    #     2. create parameter set members
    def set_modelPath( self, x ) :
        valstr = x 
        self.setParamValue( "modelPath", valstr )
    def get_modelPath( self ) :
        self.getParamValue( "modelPath" )

    def set_modelPath___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "modelPath___filter", valstr )
    def get_modelPath___filter( self ) :
        self.getParamValue( "modelPath___filter" )

    def set_scale( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "scale", valstr )
    def get_scale( self ) :
        self.getParamValue( "scale" )

    def set_resize( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "resize", valstr )
    def get_resize( self ) :
        self.getParamValue( "resize" )

    def set_rotangle( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "rotangle", valstr )
    def get_rotangle( self ) :
        self.getParamValue( "rotangle" )

    def set_transvec( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "transvec", valstr )
    def get_transvec( self ) :
        self.getParamValue( "transvec" )

    def set_rotsvec( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "rotsvec", valstr )
    def get_rotsvec( self ) :
        self.getParamValue( "rotsvec" )

    def set_backface( self, x ) :
        valstr = x 
        self.setParamValue( "backface", valstr )
    def get_backface( self ) :
        self.getParamValue( "backface" )

    def set_orientation_iv( self, x ) :
        valstr = x 
        self.setParamValue( "orientation_iv", valstr )
    def get_orientation_iv( self ) :
        self.getParamValue( "orientation_iv" )

    def set_convert_xforms_iv( self, x ) :
        valstr = x 
        self.setParamValue( "convert_xforms_iv", valstr )
    def get_convert_xforms_iv( self ) :
        self.getParamValue( "convert_xforms_iv" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadElmer
#
class  ReadElmer(CoviseModule):
#==================================
    name_ =  "ReadElmer"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "mesh" ,"UnstructuredGrid", "OUT")
        self.addPort( "velocity" ,"Vec3", "OUT")
        self.addPort( "pressure" ,"Float", "OUT")
        self.addPort( "ke" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "file_path", "Browser", "IMM")
        self.addParam( "file_path___filter", "BrowserFilter", "IMM")

    #     2. create parameter set members
    def set_file_path( self, x ) :
        valstr = x 
        self.setParamValue( "file_path", valstr )
    def get_file_path( self ) :
        self.getParamValue( "file_path" )

    def set_file_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "file_path___filter", valstr )
    def get_file_path___filter( self ) :
        self.getParamValue( "file_path___filter" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadANSYS
#
class  ReadANSYS(CoviseModule):
#==================================
    name_ =  "ReadANSYS"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'Derived_Solution': {'Stresses': 2, 'none': 1, 'Thermal strains': 6, 'Field fluxes': 7, 'Volume and energies': 8, 'Magnetic flux density': 9, 'Plastic strains': 4, 'Elastic strains': 3, 'Creep strains': 5}, 'Solution': {'Please enter your choice': 1, 'ElementData': 4, 'NodeData': 3, 'OnlyGeometry': 2}, 'SolidShellComponents': {'TIGE': 12, 'none': 1, 'T2': 9, 'YZ': 6, 'T3': 10, 'T1': 8, 'YY': 3, 'XX': 2, 'XY': 5, 'ZX': 7, 'ZZ': 4, 'TI': 11}, 'VolEnergy': {'Volume': 1, 'KENE': 3, 'SENE': 2}, 'DOF_Solution': {'none': 1}, 'TopBottom': {'Top': 1, 'Average': 3, 'Bottom': 2}, 'BeamComponents': {'Zm': 6, 'none': 1, 'Ym': 4, 'Axial': 2, 'Yp': 3, 'Zp': 5}, 'AxiShellComponents': {'Meridional-hoop': 5, 'none': 1, 'ThroughThickness': 3, 'Hoop': 4, 'Meridional': 2}, 'MagFluxDens': {'B': 1, 'BX': 2, 'BY': 3, 'BZ': 4, 'BSUM': 5}, 'ThermalFlux': {'QY': 3, 'QX': 2, 'none': 1, 'QZ': 4, 'Q': 5}}

        # IN ports
        self.addPort( "FileName" ,"Text", "IN")

        # OUT ports
        self.addPort( "Grid" ,"UnstructuredGrid", "OUT")
        self.addPort( "Data" ,"Float|Vec3|IntArr", "OUT")
        self.addPort( "Materials" ,"IntArr", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "RST_file", "Browser", "IMM")
        self.addParam( "RST_file___filter", "BrowserFilter", "IMM")
        self.addParam( "timeSteps", "IntVector", "IMM")
        self.addParam( "ScaleGridDisplacement", "FloatScalar", "IMM")
        self.addParam( "Solution", "Choice", "IMM")
        self.addParam( "DOF_Solution", "Choice", "IMM")
        self.addParam( "Derived_Solution", "Choice", "IMM")
        self.addParam( "SolidShellComponents", "Choice", "IMM")
        self.addParam( "BeamComponents", "Choice", "IMM")
        self.addParam( "AxiShellComponents", "Choice", "IMM")
        self.addParam( "TopBottom", "Choice", "IMM")
        self.addParam( "ThermalFlux", "Choice", "IMM")
        self.addParam( "VolEnergy", "Choice", "IMM")
        self.addParam( "MagFluxDens", "Choice", "IMM")
        self.addParam( "OutputNodeDecode", "Boolean", "IMM")
        self.addParam( "AlwaysVertexBased", "Boolean", "IMM")

    #     2. create parameter set members
    def set_RST_file( self, x ) :
        valstr = x 
        self.setParamValue( "RST_file", valstr )
    def get_RST_file( self ) :
        self.getParamValue( "RST_file" )

    def set_RST_file___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "RST_file___filter", valstr )
    def get_RST_file___filter( self ) :
        self.getParamValue( "RST_file___filter" )

    def set_timeSteps( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "timeSteps", valstr )
    def get_timeSteps( self ) :
        self.getParamValue( "timeSteps" )

    def set_ScaleGridDisplacement( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "ScaleGridDisplacement", valstr )
    def get_ScaleGridDisplacement( self ) :
        self.getParamValue( "ScaleGridDisplacement" )

    def set_Solution( self, x ) :
        valstr = x 
        self.setParamValue( "Solution", valstr )
    def get_Solution( self ) :
        self.getParamValue( "Solution" )

    def set_DOF_Solution( self, x ) :
        valstr = x 
        self.setParamValue( "DOF_Solution", valstr )
    def get_DOF_Solution( self ) :
        self.getParamValue( "DOF_Solution" )

    def set_Derived_Solution( self, x ) :
        valstr = x 
        self.setParamValue( "Derived_Solution", valstr )
    def get_Derived_Solution( self ) :
        self.getParamValue( "Derived_Solution" )

    def set_SolidShellComponents( self, x ) :
        valstr = x 
        self.setParamValue( "SolidShellComponents", valstr )
    def get_SolidShellComponents( self ) :
        self.getParamValue( "SolidShellComponents" )

    def set_BeamComponents( self, x ) :
        valstr = x 
        self.setParamValue( "BeamComponents", valstr )
    def get_BeamComponents( self ) :
        self.getParamValue( "BeamComponents" )

    def set_AxiShellComponents( self, x ) :
        valstr = x 
        self.setParamValue( "AxiShellComponents", valstr )
    def get_AxiShellComponents( self ) :
        self.getParamValue( "AxiShellComponents" )

    def set_TopBottom( self, x ) :
        valstr = x 
        self.setParamValue( "TopBottom", valstr )
    def get_TopBottom( self ) :
        self.getParamValue( "TopBottom" )

    def set_ThermalFlux( self, x ) :
        valstr = x 
        self.setParamValue( "ThermalFlux", valstr )
    def get_ThermalFlux( self ) :
        self.getParamValue( "ThermalFlux" )

    def set_VolEnergy( self, x ) :
        valstr = x 
        self.setParamValue( "VolEnergy", valstr )
    def get_VolEnergy( self ) :
        self.getParamValue( "VolEnergy" )

    def set_MagFluxDens( self, x ) :
        valstr = x 
        self.setParamValue( "MagFluxDens", valstr )
    def get_MagFluxDens( self ) :
        self.getParamValue( "MagFluxDens" )

    def set_OutputNodeDecode( self, x ) :
        valstr = x 
        self.setParamValue( "OutputNodeDecode", valstr )
    def get_OutputNodeDecode( self ) :
        self.getParamValue( "OutputNodeDecode" )

    def set_AlwaysVertexBased( self, x ) :
        valstr = x 
        self.setParamValue( "AlwaysVertexBased", valstr )
    def get_AlwaysVertexBased( self ) :
        self.getParamValue( "AlwaysVertexBased" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadFamu
#
class  ReadFamu(CoviseModule):
#==================================
    name_ =  "ReadFamu"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "mesh" ,"UnstructuredGrid", "OUT")
        self.addPort( "data0" ,"Float|Vec3", "OUT")
        self.addPort( "data1" ,"Float|Vec3", "OUT")
        self.addPort( "data2" ,"Float|Vec3", "OUT")
        self.addPort( "data3" ,"Float|Vec3", "OUT")
        self.addPort( "data4" ,"Float|Vec3", "OUT")
        self.addPort( "data5" ,"Float|Vec3", "OUT")
        self.addPort( "data6" ,"Float|Vec3", "OUT")
        self.addPort( "data7" ,"Float|Vec3", "OUT")
        self.addPort( "data8" ,"Float|Vec3", "OUT")
        self.addPort( "data9" ,"Float|Vec3", "OUT")
        self.addPort( "data10" ,"Float|Vec3", "OUT")
        self.addPort( "data11" ,"Float|Vec3", "OUT")
        self.addPort( "data12" ,"Float|Vec3", "OUT")
        self.addPort( "data13" ,"Float|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "MeshFileName", "Browser", "IMM")
        self.addParam( "MeshFileName___filter", "BrowserFilter", "IMM")
        self.addParam( "ResultFileName", "Browser", "IMM")
        self.addParam( "ResultFileName___filter", "BrowserFilter", "IMM")
        self.addParam( "StartSimulation", "Boolean", "IMM")
        self.addParam( "PlaneFileName", "Browser", "IMM")
        self.addParam( "PlaneFileName___filter", "BrowserFilter", "IMM")
        self.addParam( "FirstFile", "Browser", "IMM")
        self.addParam( "FirstFile___filter", "BrowserFilter", "IMM")
        self.addParam( "SecondFile", "Browser", "IMM")
        self.addParam( "SecondFile___filter", "BrowserFilter", "IMM")
        self.addParam( "ThirdFile", "Browser", "IMM")
        self.addParam( "ThirdFile___filter", "BrowserFilter", "IMM")
        self.addParam( "TargetFile", "Browser", "IMM")
        self.addParam( "TargetFile___filter", "BrowserFilter", "IMM")
        self.addParam( "FamuExePath", "Browser", "IMM")
        self.addParam( "FamuExePath___filter", "BrowserFilter", "IMM")
        self.addParam( "FamuArguments", "String", "IMM")
        self.addParam( "SubdivideElements", "Boolean", "IMM")
        self.addParam( "DisplacementTimes1000", "Boolean", "IMM")
        self.addParam( "SymmetryRotAngle", "FloatScalar", "IMM")
        self.addParam( "OriginalSymmSteps", "IntScalar", "IMM")
        self.addParam( "NoOfTimestepsToRead", "IntScalar", "IMM")
        self.addParam( "NoOfTimestepsToSkip", "IntScalar", "IMM")
        self.addParam( "CollectorsToLoad", "String", "IMM")
        self.addParam( "BottomLeftPoint", "FloatVector", "IMM")
        self.addParam( "BottomRightPoint", "FloatVector", "IMM")
        self.addParam( "TopRightPoint", "FloatVector", "IMM")
        self.addParam( "TopLeftPoint", "FloatVector", "IMM")
        self.addParam( "MoveDistances", "FloatVector", "IMM")
        self.addParam( "ScaleFactor", "FloatSlider", "IMM")
        self.addParam( "RotateDegXY", "FloatSlider", "IMM")
        self.addParam( "RotateDegYZ", "FloatSlider", "IMM")
        self.addParam( "RotateDegXZ", "FloatSlider", "IMM")
        self.addParam( "ResetElectrode", "Boolean", "IMM")
        self.addParam( "MoveIsolator", "FloatVector", "IMM")
        self.addParam( "ScaleIsolator", "FloatVector", "IMM")

    #     2. create parameter set members
    def set_MeshFileName( self, x ) :
        valstr = x 
        self.setParamValue( "MeshFileName", valstr )
    def get_MeshFileName( self ) :
        self.getParamValue( "MeshFileName" )

    def set_MeshFileName___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "MeshFileName___filter", valstr )
    def get_MeshFileName___filter( self ) :
        self.getParamValue( "MeshFileName___filter" )

    def set_ResultFileName( self, x ) :
        valstr = x 
        self.setParamValue( "ResultFileName", valstr )
    def get_ResultFileName( self ) :
        self.getParamValue( "ResultFileName" )

    def set_ResultFileName___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "ResultFileName___filter", valstr )
    def get_ResultFileName___filter( self ) :
        self.getParamValue( "ResultFileName___filter" )

    def set_StartSimulation( self, x ) :
        valstr = x 
        self.setParamValue( "StartSimulation", valstr )
    def get_StartSimulation( self ) :
        self.getParamValue( "StartSimulation" )

    def set_PlaneFileName( self, x ) :
        valstr = x 
        self.setParamValue( "PlaneFileName", valstr )
    def get_PlaneFileName( self ) :
        self.getParamValue( "PlaneFileName" )

    def set_PlaneFileName___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "PlaneFileName___filter", valstr )
    def get_PlaneFileName___filter( self ) :
        self.getParamValue( "PlaneFileName___filter" )

    def set_FirstFile( self, x ) :
        valstr = x 
        self.setParamValue( "FirstFile", valstr )
    def get_FirstFile( self ) :
        self.getParamValue( "FirstFile" )

    def set_FirstFile___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "FirstFile___filter", valstr )
    def get_FirstFile___filter( self ) :
        self.getParamValue( "FirstFile___filter" )

    def set_SecondFile( self, x ) :
        valstr = x 
        self.setParamValue( "SecondFile", valstr )
    def get_SecondFile( self ) :
        self.getParamValue( "SecondFile" )

    def set_SecondFile___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "SecondFile___filter", valstr )
    def get_SecondFile___filter( self ) :
        self.getParamValue( "SecondFile___filter" )

    def set_ThirdFile( self, x ) :
        valstr = x 
        self.setParamValue( "ThirdFile", valstr )
    def get_ThirdFile( self ) :
        self.getParamValue( "ThirdFile" )

    def set_ThirdFile___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "ThirdFile___filter", valstr )
    def get_ThirdFile___filter( self ) :
        self.getParamValue( "ThirdFile___filter" )

    def set_TargetFile( self, x ) :
        valstr = x 
        self.setParamValue( "TargetFile", valstr )
    def get_TargetFile( self ) :
        self.getParamValue( "TargetFile" )

    def set_TargetFile___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "TargetFile___filter", valstr )
    def get_TargetFile___filter( self ) :
        self.getParamValue( "TargetFile___filter" )

    def set_FamuExePath( self, x ) :
        valstr = x 
        self.setParamValue( "FamuExePath", valstr )
    def get_FamuExePath( self ) :
        self.getParamValue( "FamuExePath" )

    def set_FamuExePath___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "FamuExePath___filter", valstr )
    def get_FamuExePath___filter( self ) :
        self.getParamValue( "FamuExePath___filter" )

    def set_FamuArguments( self, x ) :
        valstr = x 
        self.setParamValue( "FamuArguments", valstr )
    def get_FamuArguments( self ) :
        self.getParamValue( "FamuArguments" )

    def set_SubdivideElements( self, x ) :
        valstr = x 
        self.setParamValue( "SubdivideElements", valstr )
    def get_SubdivideElements( self ) :
        self.getParamValue( "SubdivideElements" )

    def set_DisplacementTimes1000( self, x ) :
        valstr = x 
        self.setParamValue( "DisplacementTimes1000", valstr )
    def get_DisplacementTimes1000( self ) :
        self.getParamValue( "DisplacementTimes1000" )

    def set_SymmetryRotAngle( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "SymmetryRotAngle", valstr )
    def get_SymmetryRotAngle( self ) :
        self.getParamValue( "SymmetryRotAngle" )

    def set_OriginalSymmSteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "OriginalSymmSteps", valstr )
    def get_OriginalSymmSteps( self ) :
        self.getParamValue( "OriginalSymmSteps" )

    def set_NoOfTimestepsToRead( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "NoOfTimestepsToRead", valstr )
    def get_NoOfTimestepsToRead( self ) :
        self.getParamValue( "NoOfTimestepsToRead" )

    def set_NoOfTimestepsToSkip( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "NoOfTimestepsToSkip", valstr )
    def get_NoOfTimestepsToSkip( self ) :
        self.getParamValue( "NoOfTimestepsToSkip" )

    def set_CollectorsToLoad( self, x ) :
        valstr = x 
        self.setParamValue( "CollectorsToLoad", valstr )
    def get_CollectorsToLoad( self ) :
        self.getParamValue( "CollectorsToLoad" )

    def set_BottomLeftPoint( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "BottomLeftPoint", valstr )
    def get_BottomLeftPoint( self ) :
        self.getParamValue( "BottomLeftPoint" )

    def set_BottomRightPoint( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "BottomRightPoint", valstr )
    def get_BottomRightPoint( self ) :
        self.getParamValue( "BottomRightPoint" )

    def set_TopRightPoint( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "TopRightPoint", valstr )
    def get_TopRightPoint( self ) :
        self.getParamValue( "TopRightPoint" )

    def set_TopLeftPoint( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "TopLeftPoint", valstr )
    def get_TopLeftPoint( self ) :
        self.getParamValue( "TopLeftPoint" )

    def set_MoveDistances( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "MoveDistances", valstr )
    def get_MoveDistances( self ) :
        self.getParamValue( "MoveDistances" )

    def set_ScaleFactor( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "ScaleFactor", valstr )
    def get_ScaleFactor( self ) :
        self.getParamValue( "ScaleFactor" )

    def set_RotateDegXY( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "RotateDegXY", valstr )
    def get_RotateDegXY( self ) :
        self.getParamValue( "RotateDegXY" )

    def set_RotateDegYZ( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "RotateDegYZ", valstr )
    def get_RotateDegYZ( self ) :
        self.getParamValue( "RotateDegYZ" )

    def set_RotateDegXZ( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "RotateDegXZ", valstr )
    def get_RotateDegXZ( self ) :
        self.getParamValue( "RotateDegXZ" )

    def set_ResetElectrode( self, x ) :
        valstr = x 
        self.setParamValue( "ResetElectrode", valstr )
    def get_ResetElectrode( self ) :
        self.getParamValue( "ResetElectrode" )

    def set_MoveIsolator( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "MoveIsolator", valstr )
    def get_MoveIsolator( self ) :
        self.getParamValue( "MoveIsolator" )

    def set_ScaleIsolator( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "ScaleIsolator", valstr )
    def get_ScaleIsolator( self ) :
        self.getParamValue( "ScaleIsolator" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadNastran
#
class  ReadNastran(CoviseModule):
#==================================
    name_ =  "ReadNastran"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "MESH" ,"UnstructuredGrid", "OUT")
        self.addPort( "TYPE" ,"IntArr", "OUT")
        self.addPort( "PLOTEL" ,"Lines", "OUT")
        self.addPort( "CONM2" ,"Polygons", "OUT")
        self.addPort( "FORCE" ,"Lines", "OUT")
        self.addPort( "MOMENT" ,"Lines", "OUT")
        self.addPort( "GRAV" ,"Lines", "OUT")
        self.addPort( "TEMP" ,"Float", "OUT")
        self.addPort( "RBAR" ,"Lines", "OUT")
        self.addPort( "RBE2" ,"Lines", "OUT")
        self.addPort( "SPC1" ,"Lines", "OUT")
        self.addPort( "OQG1" ,"Vec3", "OUT")
        self.addPort( "OUGV1" ,"Vec3", "OUT")
        self.addPort( "OEF1" ,"Vec3", "OUT")
        self.addPort( "OES1" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "output2_path", "Browser", "IMM")
        self.addParam( "output2_path___filter", "BrowserFilter", "IMM")
        self.addParam( "plotel_color", "String", "IMM")
        self.addParam( "conm2_color", "String", "IMM")
        self.addParam( "conm2_scale", "FloatScalar", "IMM")
        self.addParam( "force_color", "String", "IMM")
        self.addParam( "grav_color", "String", "IMM")
        self.addParam( "moment_color", "String", "IMM")
        self.addParam( "rbar_color", "String", "IMM")
        self.addParam( "rbe2_color", "String", "IMM")
        self.addParam( "spc1_color", "String", "IMM")
        self.addParam( "spc1_scale", "FloatScalar", "IMM")
        self.addParam( "mode", "IntScalar", "IMM")
        self.addParam( "fibre_distance", "IntScalar", "IMM")
        self.addParam( "try_skipping", "Boolean", "IMM")
        self.addParam( "disp_transient", "Boolean", "IMM")

    #     2. create parameter set members
    def set_output2_path( self, x ) :
        valstr = x 
        self.setParamValue( "output2_path", valstr )
    def get_output2_path( self ) :
        self.getParamValue( "output2_path" )

    def set_output2_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "output2_path___filter", valstr )
    def get_output2_path___filter( self ) :
        self.getParamValue( "output2_path___filter" )

    def set_plotel_color( self, x ) :
        valstr = x 
        self.setParamValue( "plotel_color", valstr )
    def get_plotel_color( self ) :
        self.getParamValue( "plotel_color" )

    def set_conm2_color( self, x ) :
        valstr = x 
        self.setParamValue( "conm2_color", valstr )
    def get_conm2_color( self ) :
        self.getParamValue( "conm2_color" )

    def set_conm2_scale( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "conm2_scale", valstr )
    def get_conm2_scale( self ) :
        self.getParamValue( "conm2_scale" )

    def set_force_color( self, x ) :
        valstr = x 
        self.setParamValue( "force_color", valstr )
    def get_force_color( self ) :
        self.getParamValue( "force_color" )

    def set_grav_color( self, x ) :
        valstr = x 
        self.setParamValue( "grav_color", valstr )
    def get_grav_color( self ) :
        self.getParamValue( "grav_color" )

    def set_moment_color( self, x ) :
        valstr = x 
        self.setParamValue( "moment_color", valstr )
    def get_moment_color( self ) :
        self.getParamValue( "moment_color" )

    def set_rbar_color( self, x ) :
        valstr = x 
        self.setParamValue( "rbar_color", valstr )
    def get_rbar_color( self ) :
        self.getParamValue( "rbar_color" )

    def set_rbe2_color( self, x ) :
        valstr = x 
        self.setParamValue( "rbe2_color", valstr )
    def get_rbe2_color( self ) :
        self.getParamValue( "rbe2_color" )

    def set_spc1_color( self, x ) :
        valstr = x 
        self.setParamValue( "spc1_color", valstr )
    def get_spc1_color( self ) :
        self.getParamValue( "spc1_color" )

    def set_spc1_scale( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "spc1_scale", valstr )
    def get_spc1_scale( self ) :
        self.getParamValue( "spc1_scale" )

    def set_mode( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "mode", valstr )
    def get_mode( self ) :
        self.getParamValue( "mode" )

    def set_fibre_distance( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "fibre_distance", valstr )
    def get_fibre_distance( self ) :
        self.getParamValue( "fibre_distance" )

    def set_try_skipping( self, x ) :
        valstr = x 
        self.setParamValue( "try_skipping", valstr )
    def get_try_skipping( self ) :
        self.getParamValue( "try_skipping" )

    def set_disp_transient( self, x ) :
        valstr = x 
        self.setParamValue( "disp_transient", valstr )
    def get_disp_transient( self ) :
        self.getParamValue( "disp_transient" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadPlot3D
#
class  ReadPlot3D(CoviseModule):
#==================================
    name_ =  "ReadPlot3D"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'gridtype': {'Unstructured': 2, 'IBLANKed': 3, 'Structured': 1}, 'subtype': {'Single': 1, 'Multi': 2}, 'datatype': {'Function': 3, 'Solution': 1, 'Scalar/Vector': 2}}

        # IN ports

        # OUT ports
        self.addPort( "grid" ,"StructuredGrid|UnstructuredGrid", "OUT")
        self.addPort( "data1" ,"Float|Vec3|Float|Vec3", "OUT")
        self.addPort( "data2" ,"Float|Vec3|Vec3", "OUT")
        self.addPort( "data3" ,"Float|Float", "OUT")
        self.addPort( "data4" ,"Float|Float", "OUT")
        self.addPort( "data5" ,"Float|Float", "OUT")
        self.addPort( "data6" ,"Float|Float", "OUT")
        self.addPort( "data7" ,"Float|Float", "OUT")
        self.addPort( "iblank" ,"IntArr", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "grid_path", "Browser", "IMM")
        self.addParam( "data_path", "Browser", "IMM")
        self.addParam( "gridtype", "Choice", "IMM")
        self.addParam( "subtype", "Choice", "IMM")
        self.addParam( "datatype", "Choice", "IMM")

    #     2. create parameter set members
    def set_grid_path( self, x ) :
        valstr = x 
        self.setParamValue( "grid_path", valstr )
    def get_grid_path( self ) :
        self.getParamValue( "grid_path" )

    def set_data_path( self, x ) :
        valstr = x 
        self.setParamValue( "data_path", valstr )
    def get_data_path( self ) :
        self.getParamValue( "data_path" )

    def set_gridtype( self, x ) :
        valstr = x 
        self.setParamValue( "gridtype", valstr )
    def get_gridtype( self ) :
        self.getParamValue( "gridtype" )

    def set_subtype( self, x ) :
        valstr = x 
        self.setParamValue( "subtype", valstr )
    def get_subtype( self ) :
        self.getParamValue( "subtype" )

    def set_datatype( self, x ) :
        valstr = x 
        self.setParamValue( "datatype", valstr )
    def get_datatype( self ) :
        self.getParamValue( "datatype" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/ReadVTF
#
class  ReadVTF(CoviseModule):
#==================================
    name_ =  "ReadVTF"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'port_2': {'---': 1}, 'port_3': {'---': 1}, 'port_4': {'---': 1}, 'port_5': {'---': 1}}

        # IN ports

        # OUT ports
        self.addPort( "Grid" ,"UnstructuredGrid", "OUT")
        self.addPort( "Polygons" ,"Polygons", "OUT")
        self.addPort( "dataout1" ,"Float|Vec3", "OUT")
        self.addPort( "dataout2" ,"Float|Vec3", "OUT")
        self.addPort( "dataout3" ,"Float|Vec3", "OUT")
        self.addPort( "dataout4" ,"Float|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "Filename", "Browser", "IMM")
        self.addParam( "Filename___filter", "BrowserFilter", "IMM")
        self.addParam( "Selection", "String", "IMM")
        self.addParam( "port_2", "Choice", "IMM")
        self.addParam( "port_3", "Choice", "IMM")
        self.addParam( "port_4", "Choice", "IMM")
        self.addParam( "port_5", "Choice", "IMM")

    #     2. create parameter set members
    def set_Filename( self, x ) :
        valstr = x 
        self.setParamValue( "Filename", valstr )
    def get_Filename( self ) :
        self.getParamValue( "Filename" )

    def set_Filename___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "Filename___filter", valstr )
    def get_Filename___filter( self ) :
        self.getParamValue( "Filename___filter" )

    def set_Selection( self, x ) :
        valstr = x 
        self.setParamValue( "Selection", valstr )
    def get_Selection( self ) :
        self.getParamValue( "Selection" )

    def set_port_2( self, x ) :
        valstr = x 
        self.setParamValue( "port_2", valstr )
    def get_port_2( self ) :
        self.getParamValue( "port_2" )

    def set_port_3( self, x ) :
        valstr = x 
        self.setParamValue( "port_3", valstr )
    def get_port_3( self ) :
        self.getParamValue( "port_3" )

    def set_port_4( self, x ) :
        valstr = x 
        self.setParamValue( "port_4", valstr )
    def get_port_4( self ) :
        self.getParamValue( "port_4" )

    def set_port_5( self, x ) :
        valstr = x 
        self.setParamValue( "port_5", valstr )
    def get_port_5( self ) :
        self.getParamValue( "port_5" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/RWCovise
#
class  RWCovise(CoviseModule):
#==================================
    name_ =  "RWCovise"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'rotation_axis': {'y': 2, 'x': 1, 'z': 3}}

        # IN ports
        self.addPort( "mesh_in" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Tensor|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Texture|IntArr|RGBA|USR_DistFenflossBoco|Int|OctTree|OctTreeP", "IN")

        # OUT ports
        self.addPort( "mesh" ,"UniformGrid|Text|Points|Spheres|UnstructuredGrid|RectilinearGrid|StructuredGrid|Tensor|Float|Vec3|Polygons|TriangleStrips|Geometry|Lines|PixelImage|Texture|IntArr|RGBA|USR_DistFenflossBoco|Int|OctTree|OctTreeP", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "grid_path", "Browser", "IMM")
        self.addParam( "grid_path___filter", "BrowserFilter", "IMM")
        self.addParam( "forceReading", "Boolean", "IMM")
        self.addParam( "firstStepNo", "IntScalar", "IMM")
        self.addParam( "numSteps", "IntScalar", "IMM")
        self.addParam( "skipSteps", "IntScalar", "IMM")
        self.addParam( "stepNo", "IntScalar", "IMM")
        self.addParam( "rotate_output", "Boolean", "IMM")
        self.addParam( "rotation_axis", "Choice", "IMM")
        self.addParam( "rot_speed", "FloatScalar", "IMM")
        self.addParam( "increment_filename", "Boolean", "IMM")

    #     2. create parameter set members
    def set_grid_path( self, x ) :
        valstr = x 
        self.setParamValue( "grid_path", valstr )
    def get_grid_path( self ) :
        self.getParamValue( "grid_path" )

    def set_grid_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "grid_path___filter", valstr )
    def get_grid_path___filter( self ) :
        self.getParamValue( "grid_path___filter" )

    def set_forceReading( self, x ) :
        valstr = x 
        self.setParamValue( "forceReading", valstr )
    def get_forceReading( self ) :
        self.getParamValue( "forceReading" )

    def set_firstStepNo( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "firstStepNo", valstr )
    def get_firstStepNo( self ) :
        self.getParamValue( "firstStepNo" )

    def set_numSteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "numSteps", valstr )
    def get_numSteps( self ) :
        self.getParamValue( "numSteps" )

    def set_skipSteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "skipSteps", valstr )
    def get_skipSteps( self ) :
        self.getParamValue( "skipSteps" )

    def set_stepNo( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "stepNo", valstr )
    def get_stepNo( self ) :
        self.getParamValue( "stepNo" )

    def set_rotate_output( self, x ) :
        valstr = x 
        self.setParamValue( "rotate_output", valstr )
    def get_rotate_output( self ) :
        self.getParamValue( "rotate_output" )

    def set_rotation_axis( self, x ) :
        valstr = x 
        self.setParamValue( "rotation_axis", valstr )
    def get_rotation_axis( self ) :
        self.getParamValue( "rotation_axis" )

    def set_rot_speed( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "rot_speed", valstr )
    def get_rot_speed( self ) :
        self.getParamValue( "rot_speed" )

    def set_increment_filename( self, x ) :
        valstr = x 
        self.setParamValue( "increment_filename", valstr )
    def get_increment_filename( self ) :
        self.getParamValue( "increment_filename" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/IO_Module/WritePolygon
#
class  WritePolygon(CoviseModule):
#==================================
    name_ =  "WritePolygon"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "DataIn" ,"Geometry|IntArr|Polygons|Lines|Float|Vec3|UniformGrid|RectilinearGrid|TriangleStrips|StructuredGrid|UnstructuredGrid|Points|Vec3|Float|RGBA|USR_DistFenflossBoco", "IN")

        # OUT ports

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "path", "Browser", "IMM")
        self.addParam( "path___filter", "BrowserFilter", "IMM")
        self.addParam( "new", "Boolean", "IMM")

    #     2. create parameter set members
    def set_path( self, x ) :
        valstr = x 
        self.setParamValue( "path", valstr )
    def get_path( self ) :
        self.getParamValue( "path" )

    def set_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "path___filter", valstr )
    def get_path___filter( self ) :
        self.getParamValue( "path___filter" )

    def set_new( self, x ) :
        valstr = x 
        self.setParamValue( "new", valstr )
    def get_new( self ) :
        self.getParamValue( "new" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/CreateDisp
#
class  CreateDisp(CoviseModule):
#==================================
    name_ =  "CreateDisp"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "gridIn" ,"coDoUnstructuredGrid|coDoPolygons", "IN")

        # OUT ports
        self.addPort( "vodata" ,"Set_Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "Eps_xx", "FloatScalar", "IMM")
        self.addParam( "Eps_yy", "FloatScalar", "IMM")
        self.addParam( "Eps_zz", "FloatScalar", "IMM")
        self.addParam( "Eps_xy", "FloatScalar", "IMM")
        self.addParam( "Eps_xz", "FloatScalar", "IMM")
        self.addParam( "Eps_yz", "FloatScalar", "IMM")
        self.addParam( "disp", "FloatVector", "IMM")

    #     2. create parameter set members
    def set_Eps_xx( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "Eps_xx", valstr )
    def get_Eps_xx( self ) :
        self.getParamValue( "Eps_xx" )

    def set_Eps_yy( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "Eps_yy", valstr )
    def get_Eps_yy( self ) :
        self.getParamValue( "Eps_yy" )

    def set_Eps_zz( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "Eps_zz", valstr )
    def get_Eps_zz( self ) :
        self.getParamValue( "Eps_zz" )

    def set_Eps_xy( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "Eps_xy", valstr )
    def get_Eps_xy( self ) :
        self.getParamValue( "Eps_xy" )

    def set_Eps_xz( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "Eps_xz", valstr )
    def get_Eps_xz( self ) :
        self.getParamValue( "Eps_xz" )

    def set_Eps_yz( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "Eps_yz", valstr )
    def get_Eps_yz( self ) :
        self.getParamValue( "Eps_yz" )

    def set_disp( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "disp", valstr )
    def get_disp( self ) :
        self.getParamValue( "disp" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/CollectTimesteps
#
class  CollectTimesteps(CoviseModule):
#==================================
    name_ =  "CollectTimesteps"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'Line_9': {' --- ': 1}, 'Line_8': {' --- ': 1}, 'Line_1': {' --- ': 1}, 'Line_0': {' --- ': 1}, 'Line_3': {' --- ': 1}, 'Line_2': {' --- ': 1}, 'Line_5': {' --- ': 1}, 'Line_4': {' --- ': 1}, 'Line_7': {' --- ': 1}, 'Line_6': {' --- ': 1}}

        # IN ports
        self.addPort( "inPort" ,"StepData", "IN")

        # OUT ports
        self.addPort( "out_port" ,"Vec2", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "startOver", "Boolean", "IMM")
        self.addParam( "numSteps", "IntScalar", "IMM")
        self.addParam( "title", "String", "IMM")
        self.addParam( "xAxis", "String", "IMM")
        self.addParam( "yAxis", "String", "IMM")
        self.addParam( "min", "FloatScalar", "IMM")
        self.addParam( "max", "FloatScalar", "IMM")
        self.addParam( "Line_0", "Choice", "IMM")
        self.addParam( "Line_1", "Choice", "IMM")
        self.addParam( "Line_2", "Choice", "IMM")
        self.addParam( "Line_3", "Choice", "IMM")
        self.addParam( "Line_4", "Choice", "IMM")
        self.addParam( "Line_5", "Choice", "IMM")
        self.addParam( "Line_6", "Choice", "IMM")
        self.addParam( "Line_7", "Choice", "IMM")
        self.addParam( "Line_8", "Choice", "IMM")
        self.addParam( "Line_9", "Choice", "IMM")

    #     2. create parameter set members
    def set_startOver( self, x ) :
        valstr = x 
        self.setParamValue( "startOver", valstr )
    def get_startOver( self ) :
        self.getParamValue( "startOver" )

    def set_numSteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "numSteps", valstr )
    def get_numSteps( self ) :
        self.getParamValue( "numSteps" )

    def set_title( self, x ) :
        valstr = x 
        self.setParamValue( "title", valstr )
    def get_title( self ) :
        self.getParamValue( "title" )

    def set_xAxis( self, x ) :
        valstr = x 
        self.setParamValue( "xAxis", valstr )
    def get_xAxis( self ) :
        self.getParamValue( "xAxis" )

    def set_yAxis( self, x ) :
        valstr = x 
        self.setParamValue( "yAxis", valstr )
    def get_yAxis( self ) :
        self.getParamValue( "yAxis" )

    def set_min( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "min", valstr )
    def get_min( self ) :
        self.getParamValue( "min" )

    def set_max( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "max", valstr )
    def get_max( self ) :
        self.getParamValue( "max" )

    def set_Line_0( self, x ) :
        valstr = x 
        self.setParamValue( "Line_0", valstr )
    def get_Line_0( self ) :
        self.getParamValue( "Line_0" )

    def set_Line_1( self, x ) :
        valstr = x 
        self.setParamValue( "Line_1", valstr )
    def get_Line_1( self ) :
        self.getParamValue( "Line_1" )

    def set_Line_2( self, x ) :
        valstr = x 
        self.setParamValue( "Line_2", valstr )
    def get_Line_2( self ) :
        self.getParamValue( "Line_2" )

    def set_Line_3( self, x ) :
        valstr = x 
        self.setParamValue( "Line_3", valstr )
    def get_Line_3( self ) :
        self.getParamValue( "Line_3" )

    def set_Line_4( self, x ) :
        valstr = x 
        self.setParamValue( "Line_4", valstr )
    def get_Line_4( self ) :
        self.getParamValue( "Line_4" )

    def set_Line_5( self, x ) :
        valstr = x 
        self.setParamValue( "Line_5", valstr )
    def get_Line_5( self ) :
        self.getParamValue( "Line_5" )

    def set_Line_6( self, x ) :
        valstr = x 
        self.setParamValue( "Line_6", valstr )
    def get_Line_6( self ) :
        self.getParamValue( "Line_6" )

    def set_Line_7( self, x ) :
        valstr = x 
        self.setParamValue( "Line_7", valstr )
    def get_Line_7( self ) :
        self.getParamValue( "Line_7" )

    def set_Line_8( self, x ) :
        valstr = x 
        self.setParamValue( "Line_8", valstr )
    def get_Line_8( self ) :
        self.getParamValue( "Line_8" )

    def set_Line_9( self, x ) :
        valstr = x 
        self.setParamValue( "Line_9", valstr )
    def get_Line_9( self ) :
        self.getParamValue( "Line_9" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/BlockCollect
#
class  BlockCollect(CoviseModule):
#==================================
    name_ =  "BlockCollect"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'mode': {'Set of Elements': 1, 'Merge Blocks': 3, 'Set of Timesteps': 4, 'Set of Blocks': 5, 'Cat Timesteps': 2}}

        # IN ports
        self.addPort( "inport_0" ,"coDistributedObject", "IN")
        self.addPort( "inport_1" ,"coDistributedObject", "IN")
        self.addPort( "inport_2" ,"coDistributedObject", "IN")
        self.addPort( "inport_3" ,"coDistributedObject", "IN")
        self.addPort( "inport_4" ,"coDistributedObject", "IN")
        self.addPort( "inport_5" ,"coDistributedObject", "IN")
        self.addPort( "inport_6" ,"coDistributedObject", "IN")
        self.addPort( "inport_7" ,"coDistributedObject", "IN")
        self.addPort( "inport_8" ,"coDistributedObject", "IN")
        self.addPort( "inport_9" ,"coDistributedObject", "IN")
        self.addPort( "inport_10" ,"coDistributedObject", "IN")
        self.addPort( "inport_11" ,"coDistributedObject", "IN")
        self.addPort( "inport_12" ,"coDistributedObject", "IN")
        self.addPort( "inport_13" ,"coDistributedObject", "IN")
        self.addPort( "inport_14" ,"coDistributedObject", "IN")

        # OUT ports
        self.addPort( "set_out" ,"coDistributedObject", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "mode", "Choice", "IMM")

    #     2. create parameter set members
    def set_mode( self, x ) :
        valstr = x 
        self.setParamValue( "mode", valstr )
    def get_mode( self ) :
        self.getParamValue( "mode" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/Calc
#
class  Calc(CoviseModule):
#==================================
    name_ =  "Calc"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "DataIn0" ,"Float", "IN")
        self.addPort( "DataIn1" ,"Float", "IN")
        self.addPort( "DataIn2" ,"Vec3|UnstructuredGrid|Polygons", "IN")
        self.addPort( "DataIn3" ,"Vec3|UnstructuredGrid|Polygons", "IN")

        # OUT ports
        self.addPort( "DataOut0" ,"Float|Float", "OUT")
        self.addPort( "DataOut1" ,"Vec3|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "expression", "String", "IMM")

    #     2. create parameter set members
    def set_expression( self, x ) :
        valstr = x 
        self.setParamValue( "expression", valstr )
    def get_expression( self ) :
        self.getParamValue( "expression" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/CheckObj
#
class  CheckObj(CoviseModule):
#==================================
    name_ =  "CheckObj"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"UnstructuredGrid|Polygons|Lines|TriangleStrips", "IN")

        # OUT ports

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "ReportAllErrors", "Boolean", "IMM")

    #     2. create parameter set members
    def set_ReportAllErrors( self, x ) :
        valstr = x 
        self.setParamValue( "ReportAllErrors", valstr )
    def get_ReportAllErrors( self ) :
        self.getParamValue( "ReportAllErrors" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/DerivOperators
#
class  DerivOperators(CoviseModule):
#==================================
    name_ =  "DerivOperators"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'whatToDo': {'gradient': 1, 'gradient magnitude': 4, 'curl': 3, 'divergence': 2}}

        # IN ports
        self.addPort( "GridIn0" ,"UnstructuredGrid", "IN")
        self.addPort( "DataIn0" ,"Float|Vec3", "IN")

        # OUT ports
        self.addPort( "DataOut0" ,"Float|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "whatToDo", "Choice", "IMM")

    #     2. create parameter set members
    def set_whatToDo( self, x ) :
        valstr = x 
        self.setParamValue( "whatToDo", valstr )
    def get_whatToDo( self ) :
        self.getParamValue( "whatToDo" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/DisplaceUsg
#
class  DisplaceUsg(CoviseModule):
#==================================
    name_ =  "DisplaceUsg"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"UnstructuredGrid|Polygons|Lines", "IN")
        self.addPort( "DataIn0" ,"Vec3", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"UnstructuredGrid|Polygons|Lines", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "scale", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_scale( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "scale", valstr )
    def get_scale( self ) :
        self.getParamValue( "scale" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/FixPart
#
class  FixPart(CoviseModule):
#==================================
    name_ =  "FixPart"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"UnstructuredGrid", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"UnstructuredGrid", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "PartID", "IntScalar", "IMM")

    #     2. create parameter set members
    def set_PartID( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "PartID", valstr )
    def get_PartID( self ) :
        self.getParamValue( "PartID" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/FixUsg
#
class  FixUsg(CoviseModule):
#==================================
    name_ =  "FixUsg"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'optimize': {'speed': 1, 'memory': 2}, 'algorithm': {'BoundingBox': 1, 'None': 2}}

        # IN ports
        self.addPort( "GridIn0" ,"UnstructuredGrid|Polygons|Lines", "IN")
        self.addPort( "DataIn0" ,"Float|Vec3", "IN")
        self.addPort( "DataIn1" ,"Float|Vec3", "IN")
        self.addPort( "DataIn2" ,"Float|Vec3", "IN")
        self.addPort( "DataIn3" ,"Float|Vec3", "IN")
        self.addPort( "DataIn4" ,"Float|Vec3", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"UnstructuredGrid|Polygons|Lines", "OUT")
        self.addPort( "DataOut0" ,"Float|Vec3", "OUT")
        self.addPort( "DataOut1" ,"Float|Vec3", "OUT")
        self.addPort( "DataOut2" ,"Float|Vec3", "OUT")
        self.addPort( "DataOut3" ,"Float|Vec3", "OUT")
        self.addPort( "DataOut4" ,"Float|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "maxvertices", "IntScalar", "IMM")
        self.addParam( "delta", "FloatScalar", "IMM")
        self.addParam( "algorithm", "Choice", "IMM")
        self.addParam( "optimize", "Choice", "IMM")

    #     2. create parameter set members
    def set_maxvertices( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "maxvertices", valstr )
    def get_maxvertices( self ) :
        self.getParamValue( "maxvertices" )

    def set_delta( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "delta", valstr )
    def get_delta( self ) :
        self.getParamValue( "delta" )

    def set_algorithm( self, x ) :
        valstr = x 
        self.setParamValue( "algorithm", valstr )
    def get_algorithm( self ) :
        self.getParamValue( "algorithm" )

    def set_optimize( self, x ) :
        valstr = x 
        self.setParamValue( "optimize", valstr )
    def get_optimize( self ) :
        self.getParamValue( "optimize" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/GenNormals
#
class  GenNormals(CoviseModule):
#==================================
    name_ =  "GenNormals"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'LineNormalStyle': {'BisectLargeAngle': 1, 'BisectSmallAngle': 2, 'Orthogonal': 3}}

        # IN ports
        self.addPort( "GridIn0" ,"Polygons|Lines", "IN")

        # OUT ports
        self.addPort( "DataOut0" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "LineNormalStyle", "Choice", "IMM")

    #     2. create parameter set members
    def set_LineNormalStyle( self, x ) :
        valstr = x 
        self.setParamValue( "LineNormalStyle", valstr )
    def get_LineNormalStyle( self ) :
        self.getParamValue( "LineNormalStyle" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/GridSurface
#
class  GridSurface(CoviseModule):
#==================================
    name_ =  "GridSurface"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"StructuredGrid|UnstructuredGrid|Polygons", "IN")
        self.addPort( "DataIn0" ,"Float", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"Polygons", "OUT")
        self.addPort( "DataOut0" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/MakeOctTree
#
class  MakeOctTree(CoviseModule):
#==================================
    name_ =  "MakeOctTree"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "inGrid" ,"UnstructuredGrid|Polygons", "IN")

        # OUT ports
        self.addPort( "outOctTree" ,"OctTree|OctTreeP", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "normal_size", "IntScalar", "IMM")
        self.addParam( "max_no_levels", "IntScalar", "IMM")
        self.addParam( "min_small_enough", "IntScalar", "IMM")
        self.addParam( "crit_level", "IntScalar", "IMM")
        self.addParam( "limit_fX", "IntScalar", "IMM")
        self.addParam( "limit_fY", "IntScalar", "IMM")
        self.addParam( "limit_fZ", "IntScalar", "IMM")

    #     2. create parameter set members
    def set_normal_size( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "normal_size", valstr )
    def get_normal_size( self ) :
        self.getParamValue( "normal_size" )

    def set_max_no_levels( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "max_no_levels", valstr )
    def get_max_no_levels( self ) :
        self.getParamValue( "max_no_levels" )

    def set_min_small_enough( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "min_small_enough", valstr )
    def get_min_small_enough( self ) :
        self.getParamValue( "min_small_enough" )

    def set_crit_level( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "crit_level", valstr )
    def get_crit_level( self ) :
        self.getParamValue( "crit_level" )

    def set_limit_fX( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "limit_fX", valstr )
    def get_limit_fX( self ) :
        self.getParamValue( "limit_fX" )

    def set_limit_fY( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "limit_fY", valstr )
    def get_limit_fY( self ) :
        self.getParamValue( "limit_fY" )

    def set_limit_fZ( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "limit_fZ", valstr )
    def get_limit_fZ( self ) :
        self.getParamValue( "limit_fZ" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/Material
#
class  Material(CoviseModule):
#==================================
    name_ =  "Material"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "grid" ,"StructuredGrid|UnstructuredGrid|RectilinearGrid|UniformGrid|Points|Lines|Polygons|TriangleStrips|Spheres", "IN")
        self.addPort( "colors" ,"Vec3|Vec3|RGBA|Float", "IN")
        self.addPort( "normals" ,"Vec3|Vec3", "IN")
        self.addPort( "textures" ,"Texture", "IN")

        # OUT ports
        self.addPort( "geometry" ,"Geometry", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "Material", "Material", "IMM")

    #     2. create parameter set members
    def set_Material( sefl, x ) :
        valstr = x 
        self.setParamValue( "Material", valstr )
    def get_Material( self ) :
        self.getParamValue( "Material" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/PipelineCollect
#
class  PipelineCollect(CoviseModule):
#==================================
    name_ =  "PipelineCollect"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "inport_0" ,"coDistributedObject", "IN")
        self.addPort( "inport_1" ,"coDistributedObject", "IN")
        self.addPort( "inport_2" ,"coDistributedObject", "IN")
        self.addPort( "inport_3" ,"coDistributedObject", "IN")
        self.addPort( "inport_4" ,"coDistributedObject", "IN")

        # OUT ports
        self.addPort( "outport_0" ,"coDistributedObject", "OUT")
        self.addPort( "outport_1" ,"coDistributedObject", "OUT")
        self.addPort( "outport_2" ,"coDistributedObject", "OUT")
        self.addPort( "outport_3" ,"coDistributedObject", "OUT")
        self.addPort( "outport_4" ,"coDistributedObject", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "skip", "IntScalar", "IMM")

    #     2. create parameter set members
    def set_skip( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "skip", valstr )
    def get_skip( self ) :
        self.getParamValue( "skip" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/ShowFaceNormal
#
class  ShowFaceNormal(CoviseModule):
#==================================
    name_ =  "ShowFaceNormal"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "inPort" ,"Polygons|TriangleStrips", "IN")

        # OUT ports
        self.addPort( "points" ,"Points", "OUT")
        self.addPort( "vectors" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/ShowUsg
#
class  ShowUsg(CoviseModule):
#==================================
    name_ =  "ShowUsg"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "meshIn" ,"UnstructuredGrid", "IN")
        self.addPort( "colors" ,"Vec3|Vec3|RGBA", "IN")

        # OUT ports
        self.addPort( "geometry" ,"Geometry", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/Sphere
#
class  Sphere(CoviseModule):
#==================================
    name_ =  "Sphere"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'render_method': {'CPU Billboards': 2, 'ARB Point Sprites': 4, 'Cg Shader': 3, 'Polygons': 1, 'Particle Cloud': 5}}

        # IN ports
        self.addPort( "points" ,"Points|UnstructuredGrid|StructuredGrid", "IN")
        self.addPort( "data" ,"Float|Vec3", "IN")
        self.addPort( "colors_in" ,"Float|RGBA|Vec3|IntArr|Int|Byte|Mat3|Tensor|Vec2", "IN")

        # OUT ports
        self.addPort( "spheres" ,"TriangleStrips|Polygons|Spheres", "OUT")
        self.addPort( "dataOut" ,"Float|RGBA|Vec3|IntArr|Int|Byte|Mat3|Tensor|Vec2", "OUT")
        self.addPort( "normals" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "radius", "FloatScalar", "IMM")
        self.addParam( "scale", "FloatScalar", "IMM")
        self.addParam( "render_method", "Choice", "IMM")

    #     2. create parameter set members
    def set_radius( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "radius", valstr )
    def get_radius( self ) :
        self.getParamValue( "radius" )

    def set_scale( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "scale", valstr )
    def get_scale( self ) :
        self.getParamValue( "scale" )

    def set_render_method( self, x ) :
        valstr = x 
        self.setParamValue( "render_method", valstr )
    def get_render_method( self ) :
        self.getParamValue( "render_method" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/TensorScal
#
class  TensorScal(CoviseModule):
#==================================
    name_ =  "TensorScal"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'option': {'Spur': 1, 'Stress effective value': 2}}

        # IN ports
        self.addPort( "vdataIn" ,"Tensor", "IN")

        # OUT ports
        self.addPort( "sdataOut" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "option", "Choice", "IMM")

    #     2. create parameter set members
    def set_option( self, x ) :
        valstr = x 
        self.setParamValue( "option", valstr )
    def get_option( self ) :
        self.getParamValue( "option" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/Tube
#
class  Tube(CoviseModule):
#==================================
    name_ =  "Tube"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'Option': {'open_cylinder': 1, 'closed_cylinder': 2, 'arrows': 3}}

        # IN ports
        self.addPort( "Lines" ,"Lines", "IN")
        self.addPort( "Data" ,"Float|Float", "IN")
        self.addPort( "Diameter" ,"Float", "IN")

        # OUT ports
        self.addPort( "Tubes" ,"Polygons", "OUT")
        self.addPort( "DataOut" ,"Float", "OUT")
        self.addPort( "Normals" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "Radius", "FloatScalar", "IMM")
        self.addParam( "Parts", "IntScalar", "IMM")
        self.addParam( "Option", "Choice", "IMM")
        self.addParam( "LimitRadius", "Boolean", "IMM")
        self.addParam( "max_Radius", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_Radius( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "Radius", valstr )
    def get_Radius( self ) :
        self.getParamValue( "Radius" )

    def set_Parts( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "Parts", valstr )
    def get_Parts( self ) :
        self.getParamValue( "Parts" )

    def set_Option( self, x ) :
        valstr = x 
        self.setParamValue( "Option", valstr )
    def get_Option( self ) :
        self.getParamValue( "Option" )

    def set_LimitRadius( self, x ) :
        valstr = x 
        self.setParamValue( "LimitRadius", valstr )
    def get_LimitRadius( self ) :
        self.getParamValue( "LimitRadius" )

    def set_max_Radius( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "max_Radius", valstr )
    def get_max_Radius( self ) :
        self.getParamValue( "max_Radius" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/ImageToTexture
#
class  ImageToTexture(CoviseModule):
#==================================
    name_ =  "ImageToTexture"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'ImageOrientation': {'Portrait': 2, 'Landscape': 3, 'Free': 1}, 'AutoOrManual': {'Manual': 2, 'Automatic': 1}, 'ImageSize': {'Set manually physical image size': 1, 'Fit to geometry': 2, 'Try using image size info, otherwise fit to geometry': 3}}

        # IN ports
        self.addPort( "GridIn0" ,"Polygons", "IN")
        self.addPort( "DataIn0" ,"Vec3", "IN")
        self.addPort( "InFileName" ,"Text", "IN")

        # OUT ports
        self.addPort( "TextureOut0" ,"Texture", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "TIFF_file", "Browser", "IMM")
        self.addParam( "TIFF_file___filter", "BrowserFilter", "IMM")
        self.addParam( "Geometry_file", "Browser", "IMM")
        self.addParam( "Geometry_file___filter", "BrowserFilter", "IMM")
        self.addParam( "ImageSize", "Choice", "IMM")
        self.addParam( "ImageOrientation", "Choice", "IMM")
        self.addParam( "PhysImageW", "FloatScalar", "IMM")
        self.addParam( "PhysImageH", "FloatScalar", "IMM")
        self.addParam( "MinMaxX", "FloatVector", "IMM")
        self.addParam( "MinMaxY", "FloatVector", "IMM")
        self.addParam( "AutoOrManual", "Choice", "IMM")
        self.addParam( "XPixelImageSize", "IntScalar", "IMM")
        self.addParam( "YPixelImageSize", "IntScalar", "IMM")
        self.addParam( "GroupGeometry", "Boolean", "IMM")
        self.addParam( "MirrorImage", "Boolean", "IMM")

    #     2. create parameter set members
    def set_TIFF_file( self, x ) :
        valstr = x 
        self.setParamValue( "TIFF_file", valstr )
    def get_TIFF_file( self ) :
        self.getParamValue( "TIFF_file" )

    def set_TIFF_file___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "TIFF_file___filter", valstr )
    def get_TIFF_file___filter( self ) :
        self.getParamValue( "TIFF_file___filter" )

    def set_Geometry_file( self, x ) :
        valstr = x 
        self.setParamValue( "Geometry_file", valstr )
    def get_Geometry_file( self ) :
        self.getParamValue( "Geometry_file" )

    def set_Geometry_file___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "Geometry_file___filter", valstr )
    def get_Geometry_file___filter( self ) :
        self.getParamValue( "Geometry_file___filter" )

    def set_ImageSize( self, x ) :
        valstr = x 
        self.setParamValue( "ImageSize", valstr )
    def get_ImageSize( self ) :
        self.getParamValue( "ImageSize" )

    def set_ImageOrientation( self, x ) :
        valstr = x 
        self.setParamValue( "ImageOrientation", valstr )
    def get_ImageOrientation( self ) :
        self.getParamValue( "ImageOrientation" )

    def set_PhysImageW( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "PhysImageW", valstr )
    def get_PhysImageW( self ) :
        self.getParamValue( "PhysImageW" )

    def set_PhysImageH( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "PhysImageH", valstr )
    def get_PhysImageH( self ) :
        self.getParamValue( "PhysImageH" )

    def set_MinMaxX( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "MinMaxX", valstr )
    def get_MinMaxX( self ) :
        self.getParamValue( "MinMaxX" )

    def set_MinMaxY( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "MinMaxY", valstr )
    def get_MinMaxY( self ) :
        self.getParamValue( "MinMaxY" )

    def set_AutoOrManual( self, x ) :
        valstr = x 
        self.setParamValue( "AutoOrManual", valstr )
    def get_AutoOrManual( self ) :
        self.getParamValue( "AutoOrManual" )

    def set_XPixelImageSize( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "XPixelImageSize", valstr )
    def get_XPixelImageSize( self ) :
        self.getParamValue( "XPixelImageSize" )

    def set_YPixelImageSize( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "YPixelImageSize", valstr )
    def get_YPixelImageSize( self ) :
        self.getParamValue( "YPixelImageSize" )

    def set_GroupGeometry( self, x ) :
        valstr = x 
        self.setParamValue( "GroupGeometry", valstr )
    def get_GroupGeometry( self ) :
        self.getParamValue( "GroupGeometry" )

    def set_MirrorImage( self, x ) :
        valstr = x 
        self.setParamValue( "MirrorImage", valstr )
    def get_MirrorImage( self ) :
        self.getParamValue( "MirrorImage" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/AddAttribute
#
class  AddAttribute(CoviseModule):
#==================================
    name_ =  "AddAttribute"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "inObject" ,"coDistributedObject", "IN")

        # OUT ports
        self.addPort( "outObject" ,"coDistributedObject", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "attrName", "String", "IMM")
        self.addParam( "attrVal", "String", "IMM")

    #     2. create parameter set members
    def set_attrName( self, x ) :
        valstr = x 
        self.setParamValue( "attrName", valstr )
    def get_attrName( self ) :
        self.getParamValue( "attrName" )

    def set_attrVal( self, x ) :
        valstr = x 
        self.setParamValue( "attrVal", valstr )
    def get_attrVal( self ) :
        self.getParamValue( "attrVal" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/BoundingBox
#
class  BoundingBox(CoviseModule):
#==================================
    name_ =  "BoundingBox"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"UniformGrid|RectilinearGrid|StructuredGrid|UnstructuredGrid|Polygons|Points|Lines|TriangleStrips", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"Lines", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/MakePlots
#
class  MakePlots(CoviseModule):
#==================================
    name_ =  "MakePlots"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "inPort_x" ,"Float", "IN")
        self.addPort( "inPort_y_0" ,"Float", "IN")
        self.addPort( "inPort_y_1" ,"Float", "IN")
        self.addPort( "inPort_y_2" ,"Float", "IN")
        self.addPort( "inPort_y_3" ,"Float", "IN")
        self.addPort( "inPort_y_4" ,"Float", "IN")
        self.addPort( "inPort_y_5" ,"Float", "IN")

        # OUT ports
        self.addPort( "outPlots" ,"Vec2", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "title", "String", "IMM")
        self.addParam( "xAxis", "String", "IMM")
        self.addParam( "yAxis", "String", "IMM")
        self.addParam( "auto", "Boolean", "IMM")
        self.addParam( "Xlimits", "FloatVector", "IMM")
        self.addParam( "Ylimits", "FloatVector", "IMM")
        self.addParam( "Xticks", "IntVector", "IMM")
        self.addParam( "Yticks", "IntVector", "IMM")

    #     2. create parameter set members
    def set_title( self, x ) :
        valstr = x 
        self.setParamValue( "title", valstr )
    def get_title( self ) :
        self.getParamValue( "title" )

    def set_xAxis( self, x ) :
        valstr = x 
        self.setParamValue( "xAxis", valstr )
    def get_xAxis( self ) :
        self.getParamValue( "xAxis" )

    def set_yAxis( self, x ) :
        valstr = x 
        self.setParamValue( "yAxis", valstr )
    def get_yAxis( self ) :
        self.getParamValue( "yAxis" )

    def set_auto( self, x ) :
        valstr = x 
        self.setParamValue( "auto", valstr )
    def get_auto( self ) :
        self.getParamValue( "auto" )

    def set_Xlimits( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Xlimits", valstr )
    def get_Xlimits( self ) :
        self.getParamValue( "Xlimits" )

    def set_Ylimits( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Ylimits", valstr )
    def get_Ylimits( self ) :
        self.getParamValue( "Ylimits" )

    def set_Xticks( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "Xticks", valstr )
    def get_Xticks( self ) :
        self.getParamValue( "Xticks" )

    def set_Yticks( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "Yticks", valstr )
    def get_Yticks( self ) :
        self.getParamValue( "Yticks" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/MakeTransient
#
class  MakeTransient(CoviseModule):
#==================================
    name_ =  "MakeTransient"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "inport" ,"coDistributedObject", "IN")
        self.addPort( "accordingTo" ,"coDistributedObject", "IN")

        # OUT ports
        self.addPort( "outport" ,"coDistributedObject", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "timesteps", "IntScalar", "IMM")

    #     2. create parameter set members
    def set_timesteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "timesteps", valstr )
    def get_timesteps( self ) :
        self.getParamValue( "timesteps" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/MinMax
#
class  MinMax(CoviseModule):
#==================================
    name_ =  "MinMax"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "Data" ,"Float|Vec3", "IN")

        # OUT ports
        self.addPort( "plot2d" ,"Vec2", "OUT")
        self.addPort( "DataOut1" ,"Float", "OUT")
        self.addPort( "minmax" ,"MinMax_Data", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "NumBuck", "IntSlider", "IMM")

    #     2. create parameter set members
    def set_NumBuck( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "NumBuck", valstr )
    def get_NumBuck( self ) :
        self.getParamValue( "NumBuck" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/Probe3D
#
class  Probe3D(CoviseModule):
#==================================
    name_ =  "Probe3D"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'dimensionality': {'poly': 2, '3d': 1}, 'probe_type': {'cube': 3, 'square': 2, 'point': 1}}

        # IN ports
        self.addPort( "meshIn" ,"UniformGrid|RectilinearGrid|StructuredGrid|UnstructuredGrid", "IN")
        self.addPort( "gdataIn" ,"Float|Float", "IN")
        self.addPort( "gOcttreesIn" ,"OctTree", "IN")
        self.addPort( "polyIn" ,"Polygons", "IN")
        self.addPort( "pdataIn" ,"Float", "IN")
        self.addPort( "pOcttreesIn" ,"OctTreeP", "IN")
        self.addPort( "colorMapIn" ,"ColorMap", "IN")

        # OUT ports
        self.addPort( "ggeometry" ,"Geometry", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "dimensionality", "Choice", "IMM")
        self.addParam( "probe_type", "Choice", "IMM")
        self.addParam( "startpoint1", "FloatVector", "IMM")
        self.addParam( "startpoint2", "FloatVector", "IMM")
        self.addParam( "direction", "FloatVector", "IMM")
        self.addParam( "numsidepoints", "IntSlider", "IMM")

    #     2. create parameter set members
    def set_dimensionality( self, x ) :
        valstr = x 
        self.setParamValue( "dimensionality", valstr )
    def get_dimensionality( self ) :
        self.getParamValue( "dimensionality" )

    def set_probe_type( self, x ) :
        valstr = x 
        self.setParamValue( "probe_type", valstr )
    def get_probe_type( self ) :
        self.getParamValue( "probe_type" )

    def set_startpoint1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "startpoint1", valstr )
    def get_startpoint1( self ) :
        self.getParamValue( "startpoint1" )

    def set_startpoint2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "startpoint2", valstr )
    def get_startpoint2( self ) :
        self.getParamValue( "startpoint2" )

    def set_direction( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "direction", valstr )
    def get_direction( self ) :
        self.getParamValue( "direction" )

    def set_numsidepoints( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "numsidepoints", valstr )
    def get_numsidepoints( self ) :
        self.getParamValue( "numsidepoints" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/ShowGrid
#
class  ShowGrid(CoviseModule):
#==================================
    name_ =  "ShowGrid"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'options': {'hull': 2, 'Bounding_box': 11, 'three_sides_--+': 9, 'Element': 13, 'three_sides_-++': 7, 'three_sides_+++': 3, 'Edges': 12, 'three_sides_++-': 4, 'three_sides_-+-': 8, 'three_sides_+-+': 5, 'three_sides_---': 10, 'all_lines': 1, 'three_sides_+--': 6}}

        # IN ports
        self.addPort( "meshIn" ,"StructuredGrid|RectilinearGrid|UniformGrid|UnstructuredGrid|Polygons", "IN")

        # OUT ports
        self.addPort( "lines" ,"Lines", "OUT")
        self.addPort( "points" ,"Points", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "options", "Choice", "IMM")
        self.addParam( "pos", "IntSlider", "IMM")

    #     2. create parameter set members
    def set_options( self, x ) :
        valstr = x 
        self.setParamValue( "options", valstr )
    def get_options( self ) :
        self.getParamValue( "options" )

    def set_pos( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "pos", valstr )
    def get_pos( self ) :
        self.getParamValue( "pos" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/Solutions
#
class  Solutions(CoviseModule):
#==================================
    name_ =  "Solutions"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'base': {'Please choose a reference base': 1, 'cref': 3, 'Tref': 2}, 'calctype': {'P_STATIC': 2, 'M': 4, 'T_STATIC': 6, 'P_TOTAL': 3, 'T_TOTAL': 7, 'VELOCITY': 1, 'CP': 5, 'MACH': 8}}

        # IN ports
        self.addPort( "density" ,"Float", "IN")
        self.addPort( "MomentumDirection" ,"Vec3", "IN")
        self.addPort( "energy" ,"Float", "IN")
        self.addPort( "rhou" ,"Float", "IN")
        self.addPort( "rhov" ,"Float", "IN")
        self.addPort( "rhow" ,"Float", "IN")

        # OUT ports
        self.addPort( "solution" ,"Float|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "calctype", "Choice", "IMM")
        self.addParam( "gamma", "FloatScalar", "IMM")
        self.addParam( "cp", "FloatScalar", "IMM")
        self.addParam( "base", "Choice", "IMM")
        self.addParam( "Tref", "FloatScalar", "IMM")
        self.addParam( "cref", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_calctype( self, x ) :
        valstr = x 
        self.setParamValue( "calctype", valstr )
    def get_calctype( self ) :
        self.getParamValue( "calctype" )

    def set_gamma( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "gamma", valstr )
    def get_gamma( self ) :
        self.getParamValue( "gamma" )

    def set_cp( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "cp", valstr )
    def get_cp( self ) :
        self.getParamValue( "cp" )

    def set_base( self, x ) :
        valstr = x 
        self.setParamValue( "base", valstr )
    def get_base( self ) :
        self.getParamValue( "base" )

    def set_Tref( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "Tref", valstr )
    def get_Tref( self ) :
        self.getParamValue( "Tref" )

    def set_cref( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "cref", valstr )
    def get_cref( self ) :
        self.getParamValue( "cref" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/SplitGeometry
#
class  SplitGeometry(CoviseModule):
#==================================
    name_ =  "SplitGeometry"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "DataIn0" ,"Geometry", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"UniformGrid|RectilinearGrid|StructuredGrid|UnstructuredGrid|Points|Spheres|Lines|Polygons|TriangleStrips", "OUT")
        self.addPort( "DataOut0" ,"RGBA|Int|Float|Vec2|Vec3|Tensor", "OUT")
        self.addPort( "DataOut1" ,"Vec3", "OUT")
        self.addPort( "DataOut2" ,"Texture", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/Transform
#
class  Transform(CoviseModule):
#==================================
    name_ =  "Transform"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'Transform': {'Scale': 5, 'TimeDependent': 8, 'MultiRot': 6, 'Please enter your choice': 1, 'Rotate': 4, 'Mirror': 2, 'Tile': 7, 'Translate': 3}, 'TilingPlane': {'ZX': 3, 'XY': 1, 'YZ': 2}, 'InDataType_3': {'TrueVectorOrScalar': 1, 'PseudoVectorOrScalar': 2, 'Displacements': 3}, 'InDataType_0': {'TrueVectorOrScalar': 1, 'PseudoVectorOrScalar': 2, 'Displacements': 3}, 'InDataType_1': {'TrueVectorOrScalar': 1, 'PseudoVectorOrScalar': 2, 'Displacements': 3}, 'InDataType_2': {'TrueVectorOrScalar': 1, 'PseudoVectorOrScalar': 2, 'Displacements': 3}, 'scale_type': {'X-axis': 2, 'Y-axis': 3, 'Z-axis': 4, 'Uniform': 1}}

        # IN ports
        self.addPort( "geo_in" ,"Polygons|TriangleStrips|Points|Lines|UnstructuredGrid|UniformGrid|RectilinearGrid|StructuredGrid", "IN")
        self.addPort( "data_in0" ,"Float|Vec3|Float|Vec3", "IN")
        self.addPort( "data_in1" ,"Float|Vec3|Float|Vec3", "IN")
        self.addPort( "data_in2" ,"Float|Vec3|Float|Vec3", "IN")
        self.addPort( "data_in3" ,"Float|Vec3|Float|Vec3", "IN")

        # OUT ports
        self.addPort( "geo_out" ,"Polygons|TriangleStrips|Points|Lines|UnstructuredGrid|UniformGrid|RectilinearGrid|StructuredGrid", "OUT")
        self.addPort( "data_out0" ,"Float|Vec3|Float|Vec3", "OUT")
        self.addPort( "data_out1" ,"Float|Vec3|Float|Vec3", "OUT")
        self.addPort( "data_out2" ,"Float|Vec3|Float|Vec3", "OUT")
        self.addPort( "data_out3" ,"Float|Vec3|Float|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "Transform", "Choice", "IMM")
        self.addParam( "normal_of_mirror_plane", "FloatVector", "IMM")
        self.addParam( "distance_to_origin", "FloatScalar", "IMM")
        self.addParam( "MirroredAndOriginal", "Boolean", "IMM")
        self.addParam( "vector_of_translation", "FloatVector", "IMM")
        self.addParam( "axis_of_rotation", "FloatVector", "IMM")
        self.addParam( "one_point_on_the_axis", "FloatVector", "IMM")
        self.addParam( "angle_of_rotation", "FloatScalar", "IMM")
        self.addParam( "scale_type", "Choice", "IMM")
        self.addParam( "scaling_factor", "FloatScalar", "IMM")
        self.addParam( "new_origin", "FloatVector", "IMM")
        self.addParam( "axis_of_multi_rotation", "FloatVector", "IMM")
        self.addParam( "_one_point_on_the_axis", "FloatVector", "IMM")
        self.addParam( "angle_of_multi_rotation", "FloatScalar", "IMM")
        self.addParam( "number_of_rotations", "IntScalar", "IMM")
        self.addParam( "TilingPlane", "Choice", "IMM")
        self.addParam( "flipTile", "Boolean", "IMM")
        self.addParam( "TilingMin", "IntVector", "IMM")
        self.addParam( "TilingMax", "IntVector", "IMM")
        self.addParam( "EUC_file", "Browser", "IMM")
        self.addParam( "EUC_file___filter", "BrowserFilter", "IMM")
        self.addParam( "InDataType_0", "Choice", "IMM")
        self.addParam( "InDataType_1", "Choice", "IMM")
        self.addParam( "InDataType_2", "Choice", "IMM")
        self.addParam( "InDataType_3", "Choice", "IMM")
        self.addParam( "createSet", "Boolean", "IMM")

    #     2. create parameter set members
    def set_Transform( self, x ) :
        valstr = x 
        self.setParamValue( "Transform", valstr )
    def get_Transform( self ) :
        self.getParamValue( "Transform" )

    def set_normal_of_mirror_plane( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "normal_of_mirror_plane", valstr )
    def get_normal_of_mirror_plane( self ) :
        self.getParamValue( "normal_of_mirror_plane" )

    def set_distance_to_origin( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "distance_to_origin", valstr )
    def get_distance_to_origin( self ) :
        self.getParamValue( "distance_to_origin" )

    def set_MirroredAndOriginal( self, x ) :
        valstr = x 
        self.setParamValue( "MirroredAndOriginal", valstr )
    def get_MirroredAndOriginal( self ) :
        self.getParamValue( "MirroredAndOriginal" )

    def set_vector_of_translation( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vector_of_translation", valstr )
    def get_vector_of_translation( self ) :
        self.getParamValue( "vector_of_translation" )

    def set_axis_of_rotation( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "axis_of_rotation", valstr )
    def get_axis_of_rotation( self ) :
        self.getParamValue( "axis_of_rotation" )

    def set_one_point_on_the_axis( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "one_point_on_the_axis", valstr )
    def get_one_point_on_the_axis( self ) :
        self.getParamValue( "one_point_on_the_axis" )

    def set_angle_of_rotation( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "angle_of_rotation", valstr )
    def get_angle_of_rotation( self ) :
        self.getParamValue( "angle_of_rotation" )

    def set_scale_type( self, x ) :
        valstr = x 
        self.setParamValue( "scale_type", valstr )
    def get_scale_type( self ) :
        self.getParamValue( "scale_type" )

    def set_scaling_factor( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "scaling_factor", valstr )
    def get_scaling_factor( self ) :
        self.getParamValue( "scaling_factor" )

    def set_new_origin( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "new_origin", valstr )
    def get_new_origin( self ) :
        self.getParamValue( "new_origin" )

    def set_axis_of_multi_rotation( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "axis_of_multi_rotation", valstr )
    def get_axis_of_multi_rotation( self ) :
        self.getParamValue( "axis_of_multi_rotation" )

    def set__one_point_on_the_axis( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "_one_point_on_the_axis", valstr )
    def get__one_point_on_the_axis( self ) :
        self.getParamValue( "_one_point_on_the_axis" )

    def set_angle_of_multi_rotation( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "angle_of_multi_rotation", valstr )
    def get_angle_of_multi_rotation( self ) :
        self.getParamValue( "angle_of_multi_rotation" )

    def set_number_of_rotations( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "number_of_rotations", valstr )
    def get_number_of_rotations( self ) :
        self.getParamValue( "number_of_rotations" )

    def set_TilingPlane( self, x ) :
        valstr = x 
        self.setParamValue( "TilingPlane", valstr )
    def get_TilingPlane( self ) :
        self.getParamValue( "TilingPlane" )

    def set_flipTile( self, x ) :
        valstr = x 
        self.setParamValue( "flipTile", valstr )
    def get_flipTile( self ) :
        self.getParamValue( "flipTile" )

    def set_TilingMin( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "TilingMin", valstr )
    def get_TilingMin( self ) :
        self.getParamValue( "TilingMin" )

    def set_TilingMax( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "TilingMax", valstr )
    def get_TilingMax( self ) :
        self.getParamValue( "TilingMax" )

    def set_EUC_file( self, x ) :
        valstr = x 
        self.setParamValue( "EUC_file", valstr )
    def get_EUC_file( self ) :
        self.getParamValue( "EUC_file" )

    def set_EUC_file___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "EUC_file___filter", valstr )
    def get_EUC_file___filter( self ) :
        self.getParamValue( "EUC_file___filter" )

    def set_InDataType_0( self, x ) :
        valstr = x 
        self.setParamValue( "InDataType_0", valstr )
    def get_InDataType_0( self ) :
        self.getParamValue( "InDataType_0" )

    def set_InDataType_1( self, x ) :
        valstr = x 
        self.setParamValue( "InDataType_1", valstr )
    def get_InDataType_1( self ) :
        self.getParamValue( "InDataType_1" )

    def set_InDataType_2( self, x ) :
        valstr = x 
        self.setParamValue( "InDataType_2", valstr )
    def get_InDataType_2( self ) :
        self.getParamValue( "InDataType_2" )

    def set_InDataType_3( self, x ) :
        valstr = x 
        self.setParamValue( "InDataType_3", valstr )
    def get_InDataType_3( self ) :
        self.getParamValue( "InDataType_3" )

    def set_createSet( self, x ) :
        valstr = x 
        self.setParamValue( "createSet", valstr )
    def get_createSet( self ) :
        self.getParamValue( "createSet" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/VectorScal
#
class  VectorScal(CoviseModule):
#==================================
    name_ =  "VectorScal"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'option': {'Y-Component': 3, 'Alpha': 5, 'Length': 1, 'X-Component': 2, 'Z-Component': 4}}

        # IN ports
        self.addPort( "vdataIn" ,"TriangleStrips|Polygons|UnstructuredGrid|Vec3|RGBA", "IN")

        # OUT ports
        self.addPort( "sdataOut" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "option", "Choice", "IMM")

    #     2. create parameter set members
    def set_option( self, x ) :
        valstr = x 
        self.setParamValue( "option", valstr )
    def get_option( self ) :
        self.getParamValue( "option" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tools/Collect
#
class  Collect(CoviseModule):
#==================================
    name_ =  "Collect"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"StructuredGrid|UnstructuredGrid|RectilinearGrid|UniformGrid|Points|Spheres|Lines|Polygons|TriangleStrips", "IN")
        self.addPort( "DataIn0" ,"Float|Vec3|RGBA", "IN")
        self.addPort( "DataIn1" ,"Vec3", "IN")
        self.addPort( "TextureIn0" ,"Texture", "IN")

        # OUT ports
        self.addPort( "GeometryOut0" ,"Geometry", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "nodemask", "String", "IMM")
        self.addParam( "varName", "String", "IMM")

    #     2. create parameter set members
    def set_nodemask( self, x ) :
        valstr = x 
        self.setParamValue( "nodemask", valstr )
    def get_nodemask( self ) :
        self.getParamValue( "nodemask" )

    def set_varName( self, x ) :
        valstr = x 
        self.setParamValue( "varName", valstr )
    def get_varName( self ) :
        self.getParamValue( "varName" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/WriteASC
#
class  WriteASC(CoviseModule):
#==================================
    name_ =  "WriteASC"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "dataIn" ,"UnstructuredGrid|UniformGrid|Vec2|Points|Float|Float|Vec3|Vec3|Tensor|Polygons|Lines|IntArr|RGBA|Text|ColorMap", "IN")

        # OUT ports

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "path", "Browser", "IMM")
        self.addParam( "new", "Boolean", "IMM")
        self.addParam( "verbose", "Boolean", "IMM")

    #     2. create parameter set members
    def set_path( self, x ) :
        valstr = x 
        self.setParamValue( "path", valstr )
    def get_path( self ) :
        self.getParamValue( "path" )

    def set_new( self, x ) :
        valstr = x 
        self.setParamValue( "new", valstr )
    def get_new( self ) :
        self.getParamValue( "new" )

    def set_verbose( self, x ) :
        valstr = x 
        self.setParamValue( "verbose", valstr )
    def get_verbose( self ) :
        self.getParamValue( "verbose" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/ReadDx
#
class  ReadDx(CoviseModule):
#==================================
    name_ =  "ReadDx"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'ModeForTimesteps': {'None': 1, 'StepFile': 2, 'Normal': 3}}

        # IN ports

        # OUT ports
        self.addPort( "grid" ,"StructuredGrid|UnstructuredGrid|Polygons", "OUT")
        self.addPort( "ScalarA" ,"Float", "OUT")
        self.addPort( "ScalarB" ,"Float", "OUT")
        self.addPort( "ScalarC" ,"Float", "OUT")
        self.addPort( "ScalarD" ,"Float", "OUT")
        self.addPort( "ScalarE" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "ModeForTimesteps", "Choice", "IMM")
        self.addParam( "timesteps", "IntScalar", "IMM")
        self.addParam( "skipped_files", "IntScalar", "IMM")
        self.addParam( "fullpath", "Browser", "IMM")
        self.addParam( "fullpath___filter", "BrowserFilter", "IMM")
        self.addParam( "ScaleX", "FloatSlider", "IMM")
        self.addParam( "ScaleY", "FloatSlider", "IMM")
        self.addParam( "ScaleZ", "FloatSlider", "IMM")
        self.addParam( "DefaultIsLittleEndian", "Boolean", "IMM")

    #     2. create parameter set members
    def set_ModeForTimesteps( self, x ) :
        valstr = x 
        self.setParamValue( "ModeForTimesteps", valstr )
    def get_ModeForTimesteps( self ) :
        self.getParamValue( "ModeForTimesteps" )

    def set_timesteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "timesteps", valstr )
    def get_timesteps( self ) :
        self.getParamValue( "timesteps" )

    def set_skipped_files( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "skipped_files", valstr )
    def get_skipped_files( self ) :
        self.getParamValue( "skipped_files" )

    def set_fullpath( self, x ) :
        valstr = x 
        self.setParamValue( "fullpath", valstr )
    def get_fullpath( self ) :
        self.getParamValue( "fullpath" )

    def set_fullpath___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "fullpath___filter", valstr )
    def get_fullpath___filter( self ) :
        self.getParamValue( "fullpath___filter" )

    def set_ScaleX( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "ScaleX", valstr )
    def get_ScaleX( self ) :
        self.getParamValue( "ScaleX" )

    def set_ScaleY( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "ScaleY", valstr )
    def get_ScaleY( self ) :
        self.getParamValue( "ScaleY" )

    def set_ScaleZ( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "ScaleZ", valstr )
    def get_ScaleZ( self ) :
        self.getParamValue( "ScaleZ" )

    def set_DefaultIsLittleEndian( self, x ) :
        valstr = x 
        self.setParamValue( "DefaultIsLittleEndian", valstr )
    def get_DefaultIsLittleEndian( self ) :
        self.getParamValue( "DefaultIsLittleEndian" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/SortPoints
#
class  SortPoints(CoviseModule):
#==================================
    name_ =  "SortPoints"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "points" ,"Points", "IN")
        self.addPort( "data" ,"Int|Float", "IN")

        # OUT ports
        self.addPort( "pointsLower" ,"Points", "OUT")
        self.addPort( "dataLower" ,"Int|Float", "OUT")
        self.addPort( "pointsMiddle" ,"Points", "OUT")
        self.addPort( "dataMiddle" ,"Int|Float", "OUT")
        self.addPort( "pointsUpper" ,"Points", "OUT")
        self.addPort( "dataUpper" ,"Int|Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "lowerBound", "FloatScalar", "IMM")
        self.addParam( "upperBound", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_lowerBound( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "lowerBound", valstr )
    def get_lowerBound( self ) :
        self.getParamValue( "lowerBound" )

    def set_upperBound( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "upperBound", valstr )
    def get_upperBound( self ) :
        self.getParamValue( "upperBound" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/RWCoviseBlock
#
class  RWCoviseBlock(CoviseModule):
#==================================
    name_ =  "RWCoviseBlock"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "geometry_in" ,"Polygons|Lines", "IN")
        self.addPort( "data_in" ,"Float|Vec3", "IN")

        # OUT ports

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "file_path", "Browser", "IMM")
        self.addParam( "file_path___filter", "BrowserFilter", "IMM")
        self.addParam( "readFinished", "Boolean", "IMM")

    #     2. create parameter set members
    def set_file_path( self, x ) :
        valstr = x 
        self.setParamValue( "file_path", valstr )
    def get_file_path( self ) :
        self.getParamValue( "file_path" )

    def set_file_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "file_path___filter", valstr )
    def get_file_path___filter( self ) :
        self.getParamValue( "file_path___filter" )

    def set_readFinished( self, x ) :
        valstr = x 
        self.setParamValue( "readFinished", valstr )
    def get_readFinished( self ) :
        self.getParamValue( "readFinished" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/Animate
#
class  Animate(CoviseModule):
#==================================
    name_ =  "Animate"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "Grid" ,"UnstructuredGrid|Polygons|StructuredGrid|RectilinearGrid", "IN")
        self.addPort( "velocity" ,"Vec3|Vec3", "IN")

        # OUT ports
        self.addPort( "outGrid" ,"UnstructuredGrid|UniformGrid|StructuredGrid|RectilinearGrid", "OUT")
        self.addPort( "outVelo" ,"Vec3|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "angle", "FloatScalar", "IMM")
        self.addParam( "startAngle", "FloatScalar", "IMM")
        self.addParam( "axis", "FloatVector", "IMM")
        self.addParam( "pos", "FloatVector", "IMM")

    #     2. create parameter set members
    def set_angle( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "angle", valstr )
    def get_angle( self ) :
        self.getParamValue( "angle" )

    def set_startAngle( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "startAngle", valstr )
    def get_startAngle( self ) :
        self.getParamValue( "startAngle" )

    def set_axis( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "axis", valstr )
    def get_axis( self ) :
        self.getParamValue( "axis" )

    def set_pos( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "pos", valstr )
    def get_pos( self ) :
        self.getParamValue( "pos" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/DataToGrid
#
class  DataToGrid(CoviseModule):
#==================================
    name_ =  "DataToGrid"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'DataDirection': {'X-axis': 1, 'Y-axis': 2, 'Z-axis': 3}}

        # IN ports
        self.addPort( "DataIn0" ,"Vec3", "IN")
        self.addPort( "GridIn0" ,"UniformGrid|RectilinearGrid|StructuredGrid|UnstructuredGrid", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"StructuredGrid|Points|UnstructuredGrid", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "DataDirection", "Choice", "IMM")
        self.addParam( "GenerateGrid", "Boolean", "IMM")
        self.addParam( "DimX", "IntScalar", "IMM")
        self.addParam( "DimY", "IntScalar", "IMM")
        self.addParam( "DimZ", "IntScalar", "IMM")

    #     2. create parameter set members
    def set_DataDirection( self, x ) :
        valstr = x 
        self.setParamValue( "DataDirection", valstr )
    def get_DataDirection( self ) :
        self.getParamValue( "DataDirection" )

    def set_GenerateGrid( self, x ) :
        valstr = x 
        self.setParamValue( "GenerateGrid", valstr )
    def get_GenerateGrid( self ) :
        self.getParamValue( "GenerateGrid" )

    def set_DimX( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "DimX", valstr )
    def get_DimX( self ) :
        self.getParamValue( "DimX" )

    def set_DimY( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "DimY", valstr )
    def get_DimY( self ) :
        self.getParamValue( "DimY" )

    def set_DimZ( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "DimZ", valstr )
    def get_DimZ( self ) :
        self.getParamValue( "DimZ" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/GridToData
#
class  GridToData(CoviseModule):
#==================================
    name_ =  "GridToData"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"UniformGrid|RectilinearGrid|StructuredGrid|UnstructuredGrid|Polygons|Points", "IN")

        # OUT ports
        self.addPort( "DataOut0" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/ReadASCII
#
class  ReadASCII(CoviseModule):
#==================================
    name_ =  "ReadASCII"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'GridIndexIterationOrder': {' ': 3, 'k, j, i': 2, 'i, j, k': 1}, 'GeometryType': {'Structured Grid': 4, 'Rectiliniar Grid': 3, 'Points': 1, 'Uniform Grid': 2}}

        # IN ports

        # OUT ports
        self.addPort( "Geometry" ,"Points|UniformGrid|RectilinearGrid|StructuredGrid", "OUT")
        self.addPort( "ScalarData" ,"Float", "OUT")
        self.addPort( "VectorData" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "FilePath", "Browser", "IMM")
        self.addParam( "FilePath___filter", "BrowserFilter", "IMM")
        self.addParam( "MaxLineLength", "IntScalar", "IMM")
        self.addParam( "GeometryType", "Choice", "IMM")
        self.addParam( "Header", "Boolean", "IMM")
        self.addParam( "HeaderByteOffset", "IntScalar", "IMM")
        self.addParam( "HeaderLineSkip", "IntScalar", "IMM")
        self.addParam( "DimPattern", "String", "IMM")
        self.addParam( "DimX", "IntScalar", "IMM")
        self.addParam( "UniDistX", "FloatScalar", "IMM")
        self.addParam( "DimY", "IntScalar", "IMM")
        self.addParam( "UniDistY", "FloatScalar", "IMM")
        self.addParam( "DimZ", "IntScalar", "IMM")
        self.addParam( "UniDistZ", "FloatScalar", "IMM")
        self.addParam( "DataInterleaving", "Boolean", "IMM")
        self.addParam( "NumberOfPoints", "IntScalar", "IMM")
        self.addParam( "DataByteOffset", "IntScalar", "IMM")
        self.addParam( "DataLineSkip", "IntScalar", "IMM")
        self.addParam( "DataFormat", "String", "IMM")
        self.addParam( "GridIndexIterationOrder", "Choice", "IMM")
        self.addParam( "PrintResultsToConsole", "Boolean", "IMM")
        self.addParam( "PrintDebugInfoToConsole", "Boolean", "IMM")
        self.addParam( "Scale", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_FilePath( self, x ) :
        valstr = x 
        self.setParamValue( "FilePath", valstr )
    def get_FilePath( self ) :
        self.getParamValue( "FilePath" )

    def set_FilePath___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "FilePath___filter", valstr )
    def get_FilePath___filter( self ) :
        self.getParamValue( "FilePath___filter" )

    def set_MaxLineLength( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "MaxLineLength", valstr )
    def get_MaxLineLength( self ) :
        self.getParamValue( "MaxLineLength" )

    def set_GeometryType( self, x ) :
        valstr = x 
        self.setParamValue( "GeometryType", valstr )
    def get_GeometryType( self ) :
        self.getParamValue( "GeometryType" )

    def set_Header( self, x ) :
        valstr = x 
        self.setParamValue( "Header", valstr )
    def get_Header( self ) :
        self.getParamValue( "Header" )

    def set_HeaderByteOffset( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "HeaderByteOffset", valstr )
    def get_HeaderByteOffset( self ) :
        self.getParamValue( "HeaderByteOffset" )

    def set_HeaderLineSkip( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "HeaderLineSkip", valstr )
    def get_HeaderLineSkip( self ) :
        self.getParamValue( "HeaderLineSkip" )

    def set_DimPattern( self, x ) :
        valstr = x 
        self.setParamValue( "DimPattern", valstr )
    def get_DimPattern( self ) :
        self.getParamValue( "DimPattern" )

    def set_DimX( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "DimX", valstr )
    def get_DimX( self ) :
        self.getParamValue( "DimX" )

    def set_UniDistX( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "UniDistX", valstr )
    def get_UniDistX( self ) :
        self.getParamValue( "UniDistX" )

    def set_DimY( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "DimY", valstr )
    def get_DimY( self ) :
        self.getParamValue( "DimY" )

    def set_UniDistY( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "UniDistY", valstr )
    def get_UniDistY( self ) :
        self.getParamValue( "UniDistY" )

    def set_DimZ( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "DimZ", valstr )
    def get_DimZ( self ) :
        self.getParamValue( "DimZ" )

    def set_UniDistZ( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "UniDistZ", valstr )
    def get_UniDistZ( self ) :
        self.getParamValue( "UniDistZ" )

    def set_DataInterleaving( self, x ) :
        valstr = x 
        self.setParamValue( "DataInterleaving", valstr )
    def get_DataInterleaving( self ) :
        self.getParamValue( "DataInterleaving" )

    def set_NumberOfPoints( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "NumberOfPoints", valstr )
    def get_NumberOfPoints( self ) :
        self.getParamValue( "NumberOfPoints" )

    def set_DataByteOffset( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "DataByteOffset", valstr )
    def get_DataByteOffset( self ) :
        self.getParamValue( "DataByteOffset" )

    def set_DataLineSkip( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "DataLineSkip", valstr )
    def get_DataLineSkip( self ) :
        self.getParamValue( "DataLineSkip" )

    def set_DataFormat( self, x ) :
        valstr = x 
        self.setParamValue( "DataFormat", valstr )
    def get_DataFormat( self ) :
        self.getParamValue( "DataFormat" )

    def set_GridIndexIterationOrder( self, x ) :
        valstr = x 
        self.setParamValue( "GridIndexIterationOrder", valstr )
    def get_GridIndexIterationOrder( self ) :
        self.getParamValue( "GridIndexIterationOrder" )

    def set_PrintResultsToConsole( self, x ) :
        valstr = x 
        self.setParamValue( "PrintResultsToConsole", valstr )
    def get_PrintResultsToConsole( self ) :
        self.getParamValue( "PrintResultsToConsole" )

    def set_PrintDebugInfoToConsole( self, x ) :
        valstr = x 
        self.setParamValue( "PrintDebugInfoToConsole", valstr )
    def get_PrintDebugInfoToConsole( self ) :
        self.getParamValue( "PrintDebugInfoToConsole" )

    def set_Scale( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "Scale", valstr )
    def get_Scale( self ) :
        self.getParamValue( "Scale" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/ReadFidap
#
class  ReadFidap(CoviseModule):
#==================================
    name_ =  "ReadFidap"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "mesh" ,"UnstructuredGrid", "OUT")
        self.addPort( "velocity" ,"Vec3", "OUT")
        self.addPort( "pressure" ,"Float", "OUT")
        self.addPort( "K" ,"Float", "OUT")
        self.addPort( "EPS" ,"Float", "OUT")
        self.addPort( "B_U" ,"Float", "OUT")
        self.addPort( "NUt" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "grid_path", "Browser", "IMM")

    #     2. create parameter set members
    def set_grid_path( self, x ) :
        valstr = x 
        self.setParamValue( "grid_path", valstr )
    def get_grid_path( self ) :
        self.getParamValue( "grid_path" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/ReadLat
#
class  ReadLat(CoviseModule):
#==================================
    name_ =  "ReadLat"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "Gitter" ,"StructuredGrid", "OUT")
        self.addPort( "Daten" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "Filename", "Browser", "IMM")

    #     2. create parameter set members
    def set_Filename( self, x ) :
        valstr = x 
        self.setParamValue( "Filename", valstr )
    def get_Filename( self ) :
        self.getParamValue( "Filename" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/ReadKiva
#
class  ReadKiva(CoviseModule):
#==================================
    name_ =  "ReadKiva"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'format': {'Double': 1, 'Float': 2}}

        # IN ports

        # OUT ports
        self.addPort( "mesh" ,"UnstructuredGrid", "OUT")
        self.addPort( "velocity" ,"Vec3", "OUT")
        self.addPort( "pressure" ,"Float", "OUT")
        self.addPort( "rho" ,"Float", "OUT")
        self.addPort( "vol" ,"Float", "OUT")
        self.addPort( "temperature" ,"Float", "OUT")
        self.addPort( "amu" ,"Float", "OUT")
        self.addPort( "tke" ,"Float", "OUT")
        self.addPort( "eps" ,"Float", "OUT")
        self.addPort( "particles" ,"Points", "OUT")
        self.addPort( "pvelocity" ,"Vec3", "OUT")
        self.addPort( "ptemperature" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "path", "Browser", "IMM")
        self.addParam( "path___filter", "BrowserFilter", "IMM")
        self.addParam( "format", "Choice", "IMM")
        self.addParam( "numt", "IntScalar", "IMM")
        self.addParam( "skip", "IntScalar", "IMM")
        self.addParam( "pfactor", "IntScalar", "IMM")

    #     2. create parameter set members
    def set_path( self, x ) :
        valstr = x 
        self.setParamValue( "path", valstr )
    def get_path( self ) :
        self.getParamValue( "path" )

    def set_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "path___filter", valstr )
    def get_path___filter( self ) :
        self.getParamValue( "path___filter" )

    def set_format( self, x ) :
        valstr = x 
        self.setParamValue( "format", valstr )
    def get_format( self ) :
        self.getParamValue( "format" )

    def set_numt( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "numt", valstr )
    def get_numt( self ) :
        self.getParamValue( "numt" )

    def set_skip( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "skip", valstr )
    def get_skip( self ) :
        self.getParamValue( "skip" )

    def set_pfactor( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "pfactor", valstr )
    def get_pfactor( self ) :
        self.getParamValue( "pfactor" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/ReadMovieBYU
#
class  ReadMovieBYU(CoviseModule):
#==================================
    name_ =  "ReadMovieBYU"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'gridtype': {'Unstructured': 1}, 'datatype': {'None': 1, 'Vector': 3, 'Scalar': 2, 'Displacement': 4}, 'filetype': {'Binary': 1, 'ASCII': 3, 'Fortran': 2}}

        # IN ports

        # OUT ports
        self.addPort( "poly" ,"UnstructuredGrid", "OUT")
        self.addPort( "data" ,"Float|Vec3|UnstructuredGrid", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "gridpath", "Browser", "IMM")
        self.addParam( "datapath", "Browser", "IMM")
        self.addParam( "colorpath", "Browser", "IMM")
        self.addParam( "filetype", "Choice", "IMM")
        self.addParam( "gridtype", "Choice", "IMM")
        self.addParam( "datatype", "Choice", "IMM")
        self.addParam( "timesteps", "IntScalar", "IMM")
        self.addParam( "delta", "IntScalar", "IMM")

    #     2. create parameter set members
    def set_gridpath( self, x ) :
        valstr = x 
        self.setParamValue( "gridpath", valstr )
    def get_gridpath( self ) :
        self.getParamValue( "gridpath" )

    def set_datapath( self, x ) :
        valstr = x 
        self.setParamValue( "datapath", valstr )
    def get_datapath( self ) :
        self.getParamValue( "datapath" )

    def set_colorpath( self, x ) :
        valstr = x 
        self.setParamValue( "colorpath", valstr )
    def get_colorpath( self ) :
        self.getParamValue( "colorpath" )

    def set_filetype( self, x ) :
        valstr = x 
        self.setParamValue( "filetype", valstr )
    def get_filetype( self ) :
        self.getParamValue( "filetype" )

    def set_gridtype( self, x ) :
        valstr = x 
        self.setParamValue( "gridtype", valstr )
    def get_gridtype( self ) :
        self.getParamValue( "gridtype" )

    def set_datatype( self, x ) :
        valstr = x 
        self.setParamValue( "datatype", valstr )
    def get_datatype( self ) :
        self.getParamValue( "datatype" )

    def set_timesteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "timesteps", valstr )
    def get_timesteps( self ) :
        self.getParamValue( "timesteps" )

    def set_delta( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "delta", valstr )
    def get_delta( self ) :
        self.getParamValue( "delta" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/ReadN3s
#
class  ReadN3s(CoviseModule):
#==================================
    name_ =  "ReadN3s"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'data0': {'(none)': 1}}

        # IN ports

        # OUT ports
        self.addPort( "mesh" ,"UnstructuredGrid", "OUT")
        self.addPort( "dataport1" ,"Vec3|Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "N3sGeofile", "Browser", "IMM")
        self.addParam( "N3sGeofile___filter", "BrowserFilter", "IMM")
        self.addParam( "N3sResultFile", "Browser", "IMM")
        self.addParam( "N3sResultFile___filter", "BrowserFilter", "IMM")
        self.addParam( "data0", "Choice", "IMM")

    #     2. create parameter set members
    def set_N3sGeofile( self, x ) :
        valstr = x 
        self.setParamValue( "N3sGeofile", valstr )
    def get_N3sGeofile( self ) :
        self.getParamValue( "N3sGeofile" )

    def set_N3sGeofile___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "N3sGeofile___filter", valstr )
    def get_N3sGeofile___filter( self ) :
        self.getParamValue( "N3sGeofile___filter" )

    def set_N3sResultFile( self, x ) :
        valstr = x 
        self.setParamValue( "N3sResultFile", valstr )
    def get_N3sResultFile( self ) :
        self.getParamValue( "N3sResultFile" )

    def set_N3sResultFile___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "N3sResultFile___filter", valstr )
    def get_N3sResultFile___filter( self ) :
        self.getParamValue( "N3sResultFile___filter" )

    def set_data0( self, x ) :
        valstr = x 
        self.setParamValue( "data0", valstr )
    def get_data0( self ) :
        self.getParamValue( "data0" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/ReadNasASC
#
class  ReadNasASC(CoviseModule):
#==================================
    name_ =  "ReadNasASC"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports

        # OUT ports
        self.addPort( "mesh" ,"UnstructuredGrid", "OUT")
        self.addPort( "velocity" ,"Vec3", "OUT")
        self.addPort( "pressure" ,"Float", "OUT")
        self.addPort( "temp" ,"Float", "OUT")
        self.addPort( "mach" ,"Float", "OUT")
        self.addPort( "poly" ,"Polygons", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "path", "Browser", "IMM")

    #     2. create parameter set members
    def set_path( self, x ) :
        valstr = x 
        self.setParamValue( "path", valstr )
    def get_path( self ) :
        self.getParamValue( "path" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/ReadRFL
#
class  ReadRFL(CoviseModule):
#==================================
    name_ =  "ReadRFL"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'dof_3': {'---': 1}, 'dof_2': {'---': 1}, 'dof_1': {'---': 1}, 'dof_0': {'---': 1}, 'dof_4': {'---': 1}}

        # IN ports

        # OUT ports
        self.addPort( "unsgrid" ,"UnstructuredGrid", "OUT")
        self.addPort( "data_0" ,"Float|Vec3", "OUT")
        self.addPort( "data_1" ,"Float|Vec3", "OUT")
        self.addPort( "data_2" ,"Float|Vec3", "OUT")
        self.addPort( "data_3" ,"Float|Vec3", "OUT")
        self.addPort( "data_4" ,"Float|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "rflFile", "Browser", "IMM")
        self.addParam( "rflFile___filter", "BrowserFilter", "IMM")
        self.addParam( "datasetNum", "IntSlider", "IMM")
        self.addParam( "numTimesteps", "IntSlider", "IMM")
        self.addParam( "numSkip", "IntScalar", "IMM")
        self.addParam( "dof_0", "Choice", "IMM")
        self.addParam( "dof_1", "Choice", "IMM")
        self.addParam( "dof_2", "Choice", "IMM")
        self.addParam( "dof_3", "Choice", "IMM")
        self.addParam( "dof_4", "Choice", "IMM")

    #     2. create parameter set members
    def set_rflFile( self, x ) :
        valstr = x 
        self.setParamValue( "rflFile", valstr )
    def get_rflFile( self ) :
        self.getParamValue( "rflFile" )

    def set_rflFile___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "rflFile___filter", valstr )
    def get_rflFile___filter( self ) :
        self.getParamValue( "rflFile___filter" )

    def set_datasetNum( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "datasetNum", valstr )
    def get_datasetNum( self ) :
        self.getParamValue( "datasetNum" )

    def set_numTimesteps( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "numTimesteps", valstr )
    def get_numTimesteps( self ) :
        self.getParamValue( "numTimesteps" )

    def set_numSkip( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "numSkip", valstr )
    def get_numSkip( self ) :
        self.getParamValue( "numSkip" )

    def set_dof_0( self, x ) :
        valstr = x 
        self.setParamValue( "dof_0", valstr )
    def get_dof_0( self ) :
        self.getParamValue( "dof_0" )

    def set_dof_1( self, x ) :
        valstr = x 
        self.setParamValue( "dof_1", valstr )
    def get_dof_1( self ) :
        self.getParamValue( "dof_1" )

    def set_dof_2( self, x ) :
        valstr = x 
        self.setParamValue( "dof_2", valstr )
    def get_dof_2( self ) :
        self.getParamValue( "dof_2" )

    def set_dof_3( self, x ) :
        valstr = x 
        self.setParamValue( "dof_3", valstr )
    def get_dof_3( self ) :
        self.getParamValue( "dof_3" )

    def set_dof_4( self, x ) :
        valstr = x 
        self.setParamValue( "dof_4", valstr )
    def get_dof_4( self ) :
        self.getParamValue( "dof_4" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/ReadStar
#
class  ReadStar(CoviseModule):
#==================================
    name_ =  "ReadStar"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'field_15': {'---': 1}, 'field_10': {'---': 1}, 'field_11': {'---': 1}, 'field_12': {'---': 1}, 'field_13': {'---': 1}, 'field_14': {'---': 1}, 'cellVert': {'Create VERTEX Data': 1, 'Create CELL Data': 2}, 'field_8': {'---': 1}, 'field_9': {'---': 1}, 'field_6': {'---': 1}, 'field_7': {'---': 1}, 'field_4': {'---': 1}, 'field_5': {'---': 1}, 'field_2': {'---': 1}, 'field_3': {'---': 1}, 'field_0': {'---': 1}, 'field_1': {'---': 1}}

        # IN ports

        # OUT ports
        self.addPort( "mesh" ,"UnstructuredGrid", "OUT")
        self.addPort( "data_0" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_1" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_2" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_3" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_4" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_5" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_6" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_7" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_8" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_9" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_10" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_11" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_12" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_13" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_14" ,"Float|Vec3|Points", "OUT")
        self.addPort( "data_15" ,"Float|Vec3|Points", "OUT")
        self.addPort( "type" ,"IntArr", "OUT")
        self.addPort( "cellTable" ,"IntArr", "OUT")
        self.addPort( "cpPolygons" ,"Polygons", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "mesh_path", "Browser", "IMM")
        self.addParam( "mesh_path___filter", "BrowserFilter", "IMM")
        self.addParam( "data_path", "Browser", "IMM")
        self.addParam( "data_path___filter", "BrowserFilter", "IMM")
        self.addParam( "from_to_step", "IntVector", "IMM")
        self.addParam( "timestep", "IntSlider", "IMM")
        self.addParam( "cellVert", "Choice", "IMM")
        self.addParam( "field_0", "Choice", "IMM")
        self.addParam( "field_1", "Choice", "IMM")
        self.addParam( "field_2", "Choice", "IMM")
        self.addParam( "field_3", "Choice", "IMM")
        self.addParam( "field_4", "Choice", "IMM")
        self.addParam( "field_5", "Choice", "IMM")
        self.addParam( "field_6", "Choice", "IMM")
        self.addParam( "field_7", "Choice", "IMM")
        self.addParam( "field_8", "Choice", "IMM")
        self.addParam( "field_9", "Choice", "IMM")
        self.addParam( "field_10", "Choice", "IMM")
        self.addParam( "field_11", "Choice", "IMM")
        self.addParam( "field_12", "Choice", "IMM")
        self.addParam( "field_13", "Choice", "IMM")
        self.addParam( "field_14", "Choice", "IMM")
        self.addParam( "field_15", "Choice", "IMM")

    #     2. create parameter set members
    def set_mesh_path( self, x ) :
        valstr = x 
        self.setParamValue( "mesh_path", valstr )
    def get_mesh_path( self ) :
        self.getParamValue( "mesh_path" )

    def set_mesh_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "mesh_path___filter", valstr )
    def get_mesh_path___filter( self ) :
        self.getParamValue( "mesh_path___filter" )

    def set_data_path( self, x ) :
        valstr = x 
        self.setParamValue( "data_path", valstr )
    def get_data_path( self ) :
        self.getParamValue( "data_path" )

    def set_data_path___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "data_path___filter", valstr )
    def get_data_path___filter( self ) :
        self.getParamValue( "data_path___filter" )

    def set_from_to_step( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "from_to_step", valstr )
    def get_from_to_step( self ) :
        self.getParamValue( "from_to_step" )

    def set_timestep( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "timestep", valstr )
    def get_timestep( self ) :
        self.getParamValue( "timestep" )

    def set_cellVert( self, x ) :
        valstr = x 
        self.setParamValue( "cellVert", valstr )
    def get_cellVert( self ) :
        self.getParamValue( "cellVert" )

    def set_field_0( self, x ) :
        valstr = x 
        self.setParamValue( "field_0", valstr )
    def get_field_0( self ) :
        self.getParamValue( "field_0" )

    def set_field_1( self, x ) :
        valstr = x 
        self.setParamValue( "field_1", valstr )
    def get_field_1( self ) :
        self.getParamValue( "field_1" )

    def set_field_2( self, x ) :
        valstr = x 
        self.setParamValue( "field_2", valstr )
    def get_field_2( self ) :
        self.getParamValue( "field_2" )

    def set_field_3( self, x ) :
        valstr = x 
        self.setParamValue( "field_3", valstr )
    def get_field_3( self ) :
        self.getParamValue( "field_3" )

    def set_field_4( self, x ) :
        valstr = x 
        self.setParamValue( "field_4", valstr )
    def get_field_4( self ) :
        self.getParamValue( "field_4" )

    def set_field_5( self, x ) :
        valstr = x 
        self.setParamValue( "field_5", valstr )
    def get_field_5( self ) :
        self.getParamValue( "field_5" )

    def set_field_6( self, x ) :
        valstr = x 
        self.setParamValue( "field_6", valstr )
    def get_field_6( self ) :
        self.getParamValue( "field_6" )

    def set_field_7( self, x ) :
        valstr = x 
        self.setParamValue( "field_7", valstr )
    def get_field_7( self ) :
        self.getParamValue( "field_7" )

    def set_field_8( self, x ) :
        valstr = x 
        self.setParamValue( "field_8", valstr )
    def get_field_8( self ) :
        self.getParamValue( "field_8" )

    def set_field_9( self, x ) :
        valstr = x 
        self.setParamValue( "field_9", valstr )
    def get_field_9( self ) :
        self.getParamValue( "field_9" )

    def set_field_10( self, x ) :
        valstr = x 
        self.setParamValue( "field_10", valstr )
    def get_field_10( self ) :
        self.getParamValue( "field_10" )

    def set_field_11( self, x ) :
        valstr = x 
        self.setParamValue( "field_11", valstr )
    def get_field_11( self ) :
        self.getParamValue( "field_11" )

    def set_field_12( self, x ) :
        valstr = x 
        self.setParamValue( "field_12", valstr )
    def get_field_12( self ) :
        self.getParamValue( "field_12" )

    def set_field_13( self, x ) :
        valstr = x 
        self.setParamValue( "field_13", valstr )
    def get_field_13( self ) :
        self.getParamValue( "field_13" )

    def set_field_14( self, x ) :
        valstr = x 
        self.setParamValue( "field_14", valstr )
    def get_field_14( self ) :
        self.getParamValue( "field_14" )

    def set_field_15( self, x ) :
        valstr = x 
        self.setParamValue( "field_15", valstr )
    def get_field_15( self ) :
        self.getParamValue( "field_15" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/ReadStarDrop
#
class  ReadStarDrop(CoviseModule):
#==================================
    name_ =  "ReadStarDrop"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'stickHandling': {'Both': 2, 'Only stuck': 3, 'No stuck Droplets': 1}}

        # IN ports
        self.addPort( "grid_in" ,"UnstructuredGrid", "IN")
        self.addPort( "dataIn_0" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "IN")
        self.addPort( "dataIn_1" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "IN")
        self.addPort( "dataIn_2" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "IN")
        self.addPort( "dataIn_3" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "IN")
        self.addPort( "dataIn_4" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "IN")
        self.addPort( "dataIn_5" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "IN")
        self.addPort( "dataIn_6" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "IN")
        self.addPort( "dataIn_7" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "IN")
        self.addPort( "dataIn_8" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "IN")
        self.addPort( "dataIn_9" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "IN")

        # OUT ports
        self.addPort( "grid_out" ,"UnstructuredGrid", "OUT")
        self.addPort( "dataOut_0" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "OUT")
        self.addPort( "dataOut_1" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "OUT")
        self.addPort( "dataOut_2" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "OUT")
        self.addPort( "dataOut_3" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "OUT")
        self.addPort( "dataOut_4" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "OUT")
        self.addPort( "dataOut_5" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "OUT")
        self.addPort( "dataOut_6" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "OUT")
        self.addPort( "dataOut_7" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "OUT")
        self.addPort( "dataOut_8" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "OUT")
        self.addPort( "dataOut_9" ,"Vec3|Float|Polygons|Lines|IntArr|Geometry", "OUT")
        self.addPort( "location" ,"Points", "OUT")
        self.addPort( "velocity" ,"Vec3", "OUT")
        self.addPort( "temp" ,"Float", "OUT")
        self.addPort( "diameter" ,"Float", "OUT")
        self.addPort( "mass" ,"Float", "OUT")
        self.addPort( "count" ,"Float", "OUT")
        self.addPort( "mapping" ,"IntArr", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "filename", "Browser", "IMM")
        self.addParam( "filename___filter", "BrowserFilter", "IMM")
        self.addParam( "maxPart", "IntScalar", "IMM")
        self.addParam( "numSteps", "IntScalar", "IMM")
        self.addParam( "stickHandling", "Choice", "IMM")

    #     2. create parameter set members
    def set_filename( self, x ) :
        valstr = x 
        self.setParamValue( "filename", valstr )
    def get_filename( self ) :
        self.getParamValue( "filename" )

    def set_filename___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "filename___filter", valstr )
    def get_filename___filter( self ) :
        self.getParamValue( "filename___filter" )

    def set_maxPart( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "maxPart", valstr )
    def get_maxPart( self ) :
        self.getParamValue( "maxPart" )

    def set_numSteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "numSteps", valstr )
    def get_numSteps( self ) :
        self.getParamValue( "numSteps" )

    def set_stickHandling( self, x ) :
        valstr = x 
        self.setParamValue( "stickHandling", valstr )
    def get_stickHandling( self ) :
        self.getParamValue( "stickHandling" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Unsupported/WritePatran
#
class  WritePatran(CoviseModule):
#==================================
    name_ =  "WritePatran"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "dataIn" ,"Polygons", "IN")

        # OUT ports

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "path", "Browser", "IMM")
        self.addParam( "new", "Boolean", "IMM")
        self.addParam( "verbose", "Boolean", "IMM")

    #     2. create parameter set members
    def set_path( self, x ) :
        valstr = x 
        self.setParamValue( "path", valstr )
    def get_path( self ) :
        self.getParamValue( "path" )

    def set_new( self, x ) :
        valstr = x 
        self.setParamValue( "new", valstr )
    def get_new( self ) :
        self.getParamValue( "new" )

    def set_verbose( self, x ) :
        valstr = x 
        self.setParamValue( "verbose", valstr )
    def get_verbose( self ) :
        self.getParamValue( "verbose" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Converter/Scalar2Vector
#
class  Scalar2Vector(CoviseModule):
#==================================
    name_ =  "Scalar2Vector"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'normalizeMode': {'Do not': 1, 'User defined bounds': 4, 'Ignore MAX_FLT': 2, 'Ignore user defined value': 3}}

        # IN ports
        self.addPort( "inPortU" ,"Float|Float", "IN")
        self.addPort( "inPortV" ,"Float|Float", "IN")
        self.addPort( "inPortW" ,"Float|Float", "IN")
        self.addPort( "inPortA" ,"Float", "IN")

        # OUT ports
        self.addPort( "outPort" ,"Vec3|Vec3", "OUT")
        self.addPort( "outPortRGBA" ,"RGBA", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "normalizeMode", "Choice", "IMM")
        self.addParam( "userIgnoreValue", "FloatScalar", "IMM")
        self.addParam( "userNormalizeMin", "FloatVector", "IMM")
        self.addParam( "userNormalizeMax", "FloatVector", "IMM")

    #     2. create parameter set members
    def set_normalizeMode( self, x ) :
        valstr = x 
        self.setParamValue( "normalizeMode", valstr )
    def get_normalizeMode( self ) :
        self.getParamValue( "normalizeMode" )

    def set_userIgnoreValue( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "userIgnoreValue", valstr )
    def get_userIgnoreValue( self ) :
        self.getParamValue( "userIgnoreValue" )

    def set_userNormalizeMin( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "userNormalizeMin", valstr )
    def get_userNormalizeMin( self ) :
        self.getParamValue( "userNormalizeMin" )

    def set_userNormalizeMax( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "userNormalizeMax", valstr )
    def get_userNormalizeMax( self ) :
        self.getParamValue( "userNormalizeMax" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Converter/AssembleUsg
#
class  AssembleUsg(CoviseModule):
#==================================
    name_ =  "AssembleUsg"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"UnstructuredGrid|Polygons", "IN")
        self.addPort( "DataIn0" ,"Vec3|Float", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"UnstructuredGrid|Polygons", "OUT")
        self.addPort( "DataOut0" ,"Vec3|Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Converter/StoU
#
class  StoU(CoviseModule):
#==================================
    name_ =  "StoU"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'option': {'hexahedrons': 2, 'prisms': 4, 'pyramids': 3, 'tetrahedrons': 1}}

        # IN ports
        self.addPort( "meshIn" ,"StructuredGrid|RectilinearGrid|UniformGrid", "IN")
        self.addPort( "dataIn_1" ,"Float|Vec3|IntArr", "IN")
        self.addPort( "dataIn_2" ,"Float|Vec3|IntArr", "IN")
        self.addPort( "dataIn_3" ,"Float|Vec3|IntArr", "IN")
        self.addPort( "dataIn_4" ,"Float|Vec3|IntArr", "IN")

        # OUT ports
        self.addPort( "meshOut" ,"UnstructuredGrid", "OUT")
        self.addPort( "dataOut_1" ,"Float|Vec3|IntArr", "OUT")
        self.addPort( "dataOut_2" ,"Float|Vec3|IntArr", "OUT")
        self.addPort( "dataOut_3" ,"Float|Vec3|IntArr", "OUT")
        self.addPort( "dataOut_4" ,"Float|Vec3|IntArr", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "option", "Choice", "IMM")

    #     2. create parameter set members
    def set_option( self, x ) :
        valstr = x 
        self.setParamValue( "option", valstr )
    def get_option( self ) :
        self.getParamValue( "option" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Interpolator/CellToVert
#
class  CellToVert(CoviseModule):
#==================================
    name_ =  "CellToVert"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'algorithm': {'Simple': 2, 'SqrWeight': 1}}

        # IN ports
        self.addPort( "GridIn0" ,"UnstructuredGrid|Polygons|Lines", "IN")
        self.addPort( "DataIn0" ,"Float|Vec3", "IN")

        # OUT ports
        self.addPort( "DataOut0" ,"Float|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "algorithm", "Choice", "IMM")

    #     2. create parameter set members
    def set_algorithm( self, x ) :
        valstr = x 
        self.setParamValue( "algorithm", valstr )
    def get_algorithm( self ) :
        self.getParamValue( "algorithm" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Interpolator/Interpolate
#
class  Interpolate(CoviseModule):
#==================================
    name_ =  "Interpolate"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'motion': {'linear': 1, 'sinusoidal': 2}, 'type': {'linear': 1, 'cyclic': 2}}

        # IN ports
        self.addPort( "DataIn0" ,"Float|Vec3", "IN")
        self.addPort( "DataIn1" ,"Float|Vec3", "IN")
        self.addPort( "DataIn2" ,"IntArr", "IN")

        # OUT ports
        self.addPort( "DataOut0" ,"Float|Vec3", "OUT")
        self.addPort( "DataOut1" ,"Float|Vec3", "OUT")
        self.addPort( "DataOut2" ,"IntArr", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "motion", "Choice", "IMM")
        self.addParam( "type", "Choice", "IMM")
        self.addParam( "steps", "IntSlider", "IMM")
        self.addParam( "abs", "Boolean", "IMM")
        self.addParam( "oscillate", "Boolean", "IMM")

    #     2. create parameter set members
    def set_motion( self, x ) :
        valstr = x 
        self.setParamValue( "motion", valstr )
    def get_motion( self ) :
        self.getParamValue( "motion" )

    def set_type( self, x ) :
        valstr = x 
        self.setParamValue( "type", valstr )
    def get_type( self ) :
        self.getParamValue( "type" )

    def set_steps( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "steps", valstr )
    def get_steps( self ) :
        self.getParamValue( "steps" )

    def set_abs( self, x ) :
        valstr = x 
        self.setParamValue( "abs", valstr )
    def get_abs( self ) :
        self.getParamValue( "abs" )

    def set_oscillate( self, x ) :
        valstr = x 
        self.setParamValue( "oscillate", valstr )
    def get_oscillate( self ) :
        self.getParamValue( "oscillate" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Interpolator/Sample
#
class  Sample(CoviseModule):
#==================================
    name_ =  "Sample"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'algorithm': {'no holes and expansion': 3, 'no holes and no expansion': 2, 'possible holes': 1, 'accurate and slow': 4}, 'bounding_box': {'automatic global': 2, 'automatic per timestep': 1, 'manual': 3}, 'jsize': {'1024': 9, '16': 3, '32': 4, '64': 5, 'user defined': 1, '128': 6, '8': 2, '512': 8, '256': 7}, 'outside': {'MAX_FLT': 1, 'user_defined_fill_value': 2}, 'ksize': {'1024': 9, '16': 3, '32': 4, '64': 5, 'user defined': 1, '128': 6, '8': 2, '512': 8, '256': 7}, 'point_sampling': {'normalized logarithmic': 4, 'linear': 1, 'logarithmic': 2, 'normalized linear': 3}, 'isize': {'1024': 9, '16': 3, '32': 4, '64': 5, 'user defined': 1, '128': 6, '8': 2, '512': 8, '256': 7}}

        # IN ports
        self.addPort( "GridIn" ,"UnstructuredGrid|UniformGrid|RectilinearGrid|StructuredGrid|Points", "IN")
        self.addPort( "DataIn" ,"Float|Vec3", "IN")
        self.addPort( "ReferenceGridIn" ,"UniformGrid", "IN")

        # OUT ports
        self.addPort( "GridOut" ,"UniformGrid", "OUT")
        self.addPort( "DataOut" ,"Float|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "outside", "Choice", "IMM")
        self.addParam( "fill_value", "FloatScalar", "IMM")
        self.addParam( "algorithm", "Choice", "IMM")
        self.addParam( "point_sampling", "Choice", "IMM")
        self.addParam( "isize", "Choice", "IMM")
        self.addParam( "user_defined_isize", "IntScalar", "IMM")
        self.addParam( "jsize", "Choice", "IMM")
        self.addParam( "user_defined_jsize", "IntScalar", "IMM")
        self.addParam( "ksize", "Choice", "IMM")
        self.addParam( "user_defined_ksize", "IntScalar", "IMM")
        self.addParam( "bounding_box", "Choice", "IMM")
        self.addParam( "P1_bounds", "FloatVector", "IMM")
        self.addParam( "P2_bounds", "FloatVector", "IMM")
        self.addParam( "eps", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_outside( self, x ) :
        valstr = x 
        self.setParamValue( "outside", valstr )
    def get_outside( self ) :
        self.getParamValue( "outside" )

    def set_fill_value( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "fill_value", valstr )
    def get_fill_value( self ) :
        self.getParamValue( "fill_value" )

    def set_algorithm( self, x ) :
        valstr = x 
        self.setParamValue( "algorithm", valstr )
    def get_algorithm( self ) :
        self.getParamValue( "algorithm" )

    def set_point_sampling( self, x ) :
        valstr = x 
        self.setParamValue( "point_sampling", valstr )
    def get_point_sampling( self ) :
        self.getParamValue( "point_sampling" )

    def set_isize( self, x ) :
        valstr = x 
        self.setParamValue( "isize", valstr )
    def get_isize( self ) :
        self.getParamValue( "isize" )

    def set_user_defined_isize( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "user_defined_isize", valstr )
    def get_user_defined_isize( self ) :
        self.getParamValue( "user_defined_isize" )

    def set_jsize( self, x ) :
        valstr = x 
        self.setParamValue( "jsize", valstr )
    def get_jsize( self ) :
        self.getParamValue( "jsize" )

    def set_user_defined_jsize( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "user_defined_jsize", valstr )
    def get_user_defined_jsize( self ) :
        self.getParamValue( "user_defined_jsize" )

    def set_ksize( self, x ) :
        valstr = x 
        self.setParamValue( "ksize", valstr )
    def get_ksize( self ) :
        self.getParamValue( "ksize" )

    def set_user_defined_ksize( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "user_defined_ksize", valstr )
    def get_user_defined_ksize( self ) :
        self.getParamValue( "user_defined_ksize" )

    def set_bounding_box( self, x ) :
        valstr = x 
        self.setParamValue( "bounding_box", valstr )
    def get_bounding_box( self ) :
        self.getParamValue( "bounding_box" )

    def set_P1_bounds( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "P1_bounds", valstr )
    def get_P1_bounds( self ) :
        self.getParamValue( "P1_bounds" )

    def set_P2_bounds( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "P2_bounds", valstr )
    def get_P2_bounds( self ) :
        self.getParamValue( "P2_bounds" )

    def set_eps( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "eps", valstr )
    def get_eps( self ) :
        self.getParamValue( "eps" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/ColorDistance
#
class  ColorDistance(CoviseModule):
#==================================
    name_ =  "ColorDistance"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'Metric': {'manhattan distance': 2, 'euclidian distance': 1}}

        # IN ports
        self.addPort( "Red" ,"Float", "IN")
        self.addPort( "Green" ,"Float", "IN")
        self.addPort( "Blue" ,"Float", "IN")

        # OUT ports
        self.addPort( "Data" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "ReferenceColor", "Color", "IMM")
        self.addParam( "Metric", "Choice", "IMM")
        self.addParam( "DistanceBase", "FloatSlider", "IMM")
        self.addParam( "DistanceMultiplier", "FloatSlider", "IMM")

    #     2. create parameter set members
    def set_ReferenceColor( self, r, g, b, a ) :
        valstr =  "%f" % r + " %f" % g + " %f" % b + " %f" % a 
        self.setParamValue( "ReferenceColor", valstr )
    def get_ReferenceColor( self ) :
        self.getParamValue( "ReferenceColor" )

    def set_Metric( self, x ) :
        valstr = x 
        self.setParamValue( "Metric", valstr )
    def get_Metric( self ) :
        self.getParamValue( "Metric" )

    def set_DistanceBase( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "DistanceBase", valstr )
    def get_DistanceBase( self ) :
        self.getParamValue( "DistanceBase" )

    def set_DistanceMultiplier( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "DistanceMultiplier", valstr )
    def get_DistanceMultiplier( self ) :
        self.getParamValue( "DistanceMultiplier" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/CuttingLine
#
class  CuttingLine(CoviseModule):
#==================================
    name_ =  "CuttingLine"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'cutting_direction': {'cut along i': 1, 'cut along j': 2, 'cut along k': 3}}

        # IN ports
        self.addPort( "GridIn0" ,"StructuredGrid|RectilinearGrid|UniformGrid", "IN")
        self.addPort( "DataIn0" ,"Float|Vec3", "IN")

        # OUT ports
        self.addPort( "DataOut0" ,"Vec2", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "cutting_direction", "Choice", "IMM")
        self.addParam( "i_index", "IntSlider", "IMM")
        self.addParam( "j_index", "IntSlider", "IMM")
        self.addParam( "k_index", "IntSlider", "IMM")

    #     2. create parameter set members
    def set_cutting_direction( self, x ) :
        valstr = x 
        self.setParamValue( "cutting_direction", valstr )
    def get_cutting_direction( self ) :
        self.getParamValue( "cutting_direction" )

    def set_i_index( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "i_index", valstr )
    def get_i_index( self ) :
        self.getParamValue( "i_index" )

    def set_j_index( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "j_index", valstr )
    def get_j_index( self ) :
        self.getParamValue( "j_index" )

    def set_k_index( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "k_index", valstr )
    def get_k_index( self ) :
        self.getParamValue( "k_index" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/ReduceSet
#
class  ReduceSet(CoviseModule):
#==================================
    name_ =  "ReduceSet"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "input_0" ,"coDistributedObject", "IN")
        self.addPort( "input_1" ,"coDistributedObject", "IN")
        self.addPort( "input_2" ,"coDistributedObject", "IN")
        self.addPort( "input_3" ,"coDistributedObject", "IN")
        self.addPort( "input_4" ,"coDistributedObject", "IN")
        self.addPort( "input_5" ,"coDistributedObject", "IN")
        self.addPort( "input_6" ,"coDistributedObject", "IN")
        self.addPort( "input_7" ,"coDistributedObject", "IN")

        # OUT ports
        self.addPort( "output_0" ,"coDistributedObject", "OUT")
        self.addPort( "output_1" ,"coDistributedObject", "OUT")
        self.addPort( "output_2" ,"coDistributedObject", "OUT")
        self.addPort( "output_3" ,"coDistributedObject", "OUT")
        self.addPort( "output_4" ,"coDistributedObject", "OUT")
        self.addPort( "output_5" ,"coDistributedObject", "OUT")
        self.addPort( "output_6" ,"coDistributedObject", "OUT")
        self.addPort( "output_7" ,"coDistributedObject", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "factor", "IntSlider", "IMM")

    #     2. create parameter set members
    def set_factor( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "factor", valstr )
    def get_factor( self ) :
        self.getParamValue( "factor" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/StretchSet
#
class  StretchSet(CoviseModule):
#==================================
    name_ =  "StretchSet"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "input_0" ,"coDistributedObject", "IN")
        self.addPort( "input_1" ,"coDistributedObject", "IN")
        self.addPort( "input_2" ,"coDistributedObject", "IN")
        self.addPort( "input_3" ,"coDistributedObject", "IN")
        self.addPort( "input_4" ,"coDistributedObject", "IN")
        self.addPort( "input_5" ,"coDistributedObject", "IN")
        self.addPort( "input_6" ,"coDistributedObject", "IN")
        self.addPort( "input_7" ,"coDistributedObject", "IN")

        # OUT ports
        self.addPort( "output_0" ,"coDistributedObject", "OUT")
        self.addPort( "output_1" ,"coDistributedObject", "OUT")
        self.addPort( "output_2" ,"coDistributedObject", "OUT")
        self.addPort( "output_3" ,"coDistributedObject", "OUT")
        self.addPort( "output_4" ,"coDistributedObject", "OUT")
        self.addPort( "output_5" ,"coDistributedObject", "OUT")
        self.addPort( "output_6" ,"coDistributedObject", "OUT")
        self.addPort( "output_7" ,"coDistributedObject", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "stretch", "IntSlider", "IMM")

    #     2. create parameter set members
    def set_stretch( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "stretch", valstr )
    def get_stretch( self ) :
        self.getParamValue( "stretch" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/ClipInterval
#
class  ClipInterval(CoviseModule):
#==================================
    name_ =  "ClipInterval"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"Polygons|Points", "IN")
        self.addPort( "DataIn0" ,"Float", "IN")
        self.addPort( "DataIn1" ,"Float|Vec3|Tensor", "IN")
        self.addPort( "DataIn2" ,"Float|Vec3|Tensor", "IN")
        self.addPort( "DataIn3" ,"Float|Vec3|Tensor", "IN")
        self.addPort( "DataIn4" ,"Float|Vec3|Tensor", "IN")
        self.addPort( "DataIn5" ,"Float|Vec3|Tensor", "IN")
        self.addPort( "DataIn6" ,"MinMax_Data", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"Polygons|Points", "OUT")
        self.addPort( "DataOut0" ,"Float", "OUT")
        self.addPort( "DataOut1" ,"Float|Vec3|Tensor", "OUT")
        self.addPort( "DataOut2" ,"Float|Vec3|Tensor", "OUT")
        self.addPort( "DataOut3" ,"Float|Vec3|Tensor", "OUT")
        self.addPort( "DataOut4" ,"Float|Vec3|Tensor", "OUT")
        self.addPort( "DataOut5" ,"Float|Vec3|Tensor", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "min_Slider", "FloatSlider", "IMM")
        self.addParam( "max_Slider", "FloatSlider", "IMM")
        self.addParam( "dummy", "Boolean", "IMM")

    #     2. create parameter set members
    def set_min_Slider( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "min_Slider", valstr )
    def get_min_Slider( self ) :
        self.getParamValue( "min_Slider" )

    def set_max_Slider( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "max_Slider", valstr )
    def get_max_Slider( self ) :
        self.getParamValue( "max_Slider" )

    def set_dummy( self, x ) :
        valstr = x 
        self.setParamValue( "dummy", valstr )
    def get_dummy( self ) :
        self.getParamValue( "dummy" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/ComputeTrace
#
class  ComputeTrace(CoviseModule):
#==================================
    name_ =  "ComputeTrace"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"Points|Spheres", "IN")
        self.addPort( "DataIn0" ,"Float|Byte|Int|Vec2|Vec3|RGBA|Mat3|Tensor", "IN")
        self.addPort( "IDIn0" ,"Int", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"Lines", "OUT")
        self.addPort( "DataOut0" ,"Float", "OUT")
        self.addPort( "DataOut1" ,"Float", "OUT")
        self.addPort( "DataOut2" ,"Float|Byte|Int|Vec2|Vec3|RGBA|Mat3|Tensor", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "traceParticle", "Boolean", "IMM")
        self.addParam( "selection", "String", "IMM")
        self.addParam( "start", "IntSlider", "IMM")
        self.addParam( "stop", "IntSlider", "IMM")
        self.addParam( "LeavingBoundingBox", "Boolean", "IMM")
        self.addParam( "animate", "Boolean", "IMM")
        self.addParam( "BoundingBoxDimensions", "FloatVector", "IMM")

    #     2. create parameter set members
    def set_traceParticle( self, x ) :
        valstr = x 
        self.setParamValue( "traceParticle", valstr )
    def get_traceParticle( self ) :
        self.getParamValue( "traceParticle" )

    def set_selection( self, x ) :
        valstr = x 
        self.setParamValue( "selection", valstr )
    def get_selection( self ) :
        self.getParamValue( "selection" )

    def set_start( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "start", valstr )
    def get_start( self ) :
        self.getParamValue( "start" )

    def set_stop( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "stop", valstr )
    def get_stop( self ) :
        self.getParamValue( "stop" )

    def set_LeavingBoundingBox( self, x ) :
        valstr = x 
        self.setParamValue( "LeavingBoundingBox", valstr )
    def get_LeavingBoundingBox( self ) :
        self.getParamValue( "LeavingBoundingBox" )

    def set_animate( self, x ) :
        valstr = x 
        self.setParamValue( "animate", valstr )
    def get_animate( self ) :
        self.getParamValue( "animate" )

    def set_BoundingBoxDimensions( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "BoundingBoxDimensions", valstr )
    def get_BoundingBoxDimensions( self ) :
        self.getParamValue( "BoundingBoxDimensions" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/CropUsg
#
class  CropUsg(CoviseModule):
#==================================
    name_ =  "CropUsg"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'method': {'GeoCrop': 1, 'DataCrop': 2}}

        # IN ports
        self.addPort( "GridIn0" ,"UnstructuredGrid|Polygons|Points", "IN")
        self.addPort( "DataIn0" ,"Vec3", "IN")
        self.addPort( "DataIn1" ,"Float", "IN")
        self.addPort( "DataIn2" ,"Float", "IN")
        self.addPort( "DataIn3" ,"Float", "IN")
        self.addPort( "DataIn4" ,"Float", "IN")
        self.addPort( "DataIn5" ,"Float", "IN")
        self.addPort( "DataIn6" ,"Points", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"UnstructuredGrid|Polygons|Points", "OUT")
        self.addPort( "DataOut0" ,"Vec3", "OUT")
        self.addPort( "DataOut1" ,"Float", "OUT")
        self.addPort( "DataOut2" ,"Float", "OUT")
        self.addPort( "DataOut3" ,"Float", "OUT")
        self.addPort( "DataOut4" ,"Float", "OUT")
        self.addPort( "DataOut5" ,"Float", "OUT")
        self.addPort( "DataOut6" ,"Points", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "method", "Choice", "IMM")
        self.addParam( "xMin", "FloatScalar", "IMM")
        self.addParam( "xMax", "FloatScalar", "IMM")
        self.addParam( "yMin", "FloatScalar", "IMM")
        self.addParam( "yMax", "FloatScalar", "IMM")
        self.addParam( "zMin", "FloatScalar", "IMM")
        self.addParam( "zMax", "FloatScalar", "IMM")
        self.addParam( "invert_crop", "Boolean", "IMM")
        self.addParam( "data_min", "FloatScalar", "IMM")
        self.addParam( "data_max", "FloatScalar", "IMM")
        self.addParam( "strict_selection", "Boolean", "IMM")

    #     2. create parameter set members
    def set_method( self, x ) :
        valstr = x 
        self.setParamValue( "method", valstr )
    def get_method( self ) :
        self.getParamValue( "method" )

    def set_xMin( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "xMin", valstr )
    def get_xMin( self ) :
        self.getParamValue( "xMin" )

    def set_xMax( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "xMax", valstr )
    def get_xMax( self ) :
        self.getParamValue( "xMax" )

    def set_yMin( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "yMin", valstr )
    def get_yMin( self ) :
        self.getParamValue( "yMin" )

    def set_yMax( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "yMax", valstr )
    def get_yMax( self ) :
        self.getParamValue( "yMax" )

    def set_zMin( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "zMin", valstr )
    def get_zMin( self ) :
        self.getParamValue( "zMin" )

    def set_zMax( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "zMax", valstr )
    def get_zMax( self ) :
        self.getParamValue( "zMax" )

    def set_invert_crop( self, x ) :
        valstr = x 
        self.setParamValue( "invert_crop", valstr )
    def get_invert_crop( self ) :
        self.getParamValue( "invert_crop" )

    def set_data_min( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "data_min", valstr )
    def get_data_min( self ) :
        self.getParamValue( "data_min" )

    def set_data_max( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "data_max", valstr )
    def get_data_max( self ) :
        self.getParamValue( "data_max" )

    def set_strict_selection( self, x ) :
        valstr = x 
        self.setParamValue( "strict_selection", valstr )
    def get_strict_selection( self ) :
        self.getParamValue( "strict_selection" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/CutGeometry
#
class  CutGeometry(CoviseModule):
#==================================
    name_ =  "CutGeometry"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'method': {'DataCut': 2, 'GeoCut': 1}}

        # IN ports
        self.addPort( "GridIn0" ,"Polygons|TriangleStrips|Lines", "IN")
        self.addPort( "DataIn0" ,"Float|Vec3|RGBA", "IN")
        self.addPort( "DataIn1" ,"Float|Vec3|RGBA", "IN")
        self.addPort( "DataIn2" ,"Float|Vec3|RGBA", "IN")
        self.addPort( "DataIn3" ,"Float|Vec3|RGBA", "IN")
        self.addPort( "adjustParams" ,"Text", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"Polygons|Lines", "OUT")
        self.addPort( "DataOut0" ,"Float|Vec3|RGBA", "OUT")
        self.addPort( "DataOut1" ,"Float|Vec3|RGBA", "OUT")
        self.addPort( "DataOut2" ,"Float|Vec3|RGBA", "OUT")
        self.addPort( "DataOut3" ,"Float|Vec3|RGBA", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "method", "Choice", "IMM")
        self.addParam( "distance", "FloatScalar", "IMM")
        self.addParam( "normal", "FloatVector", "IMM")
        self.addParam( "data_min", "FloatScalar", "IMM")
        self.addParam( "data_max", "FloatScalar", "IMM")
        self.addParam( "invert_cut", "Boolean", "IMM")
        self.addParam( "strict_selection", "Boolean", "IMM")

    #     2. create parameter set members
    def set_method( self, x ) :
        valstr = x 
        self.setParamValue( "method", valstr )
    def get_method( self ) :
        self.getParamValue( "method" )

    def set_distance( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "distance", valstr )
    def get_distance( self ) :
        self.getParamValue( "distance" )

    def set_normal( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "normal", valstr )
    def get_normal( self ) :
        self.getParamValue( "normal" )

    def set_data_min( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "data_min", valstr )
    def get_data_min( self ) :
        self.getParamValue( "data_min" )

    def set_data_max( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "data_max", valstr )
    def get_data_max( self ) :
        self.getParamValue( "data_max" )

    def set_invert_cut( self, x ) :
        valstr = x 
        self.setParamValue( "invert_cut", valstr )
    def get_invert_cut( self ) :
        self.getParamValue( "invert_cut" )

    def set_strict_selection( self, x ) :
        valstr = x 
        self.setParamValue( "strict_selection", valstr )
    def get_strict_selection( self ) :
        self.getParamValue( "strict_selection" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/CuttingSurface
#
class  CuttingSurface(CoviseModule):
#==================================
    name_ =  "CuttingSurface"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'option': {'Sphere': 2, 'Cylinder-Y': 4, 'Plane': 1, 'Cylinder-X': 3, 'Cylinder-Z': 5}}

        # IN ports
        self.addPort( "GridIn0" ,"UnstructuredGrid|UniformGrid|StructuredGrid|RectilinearGrid", "IN")
        self.addPort( "DataIn0" ,"Float|Vec3", "IN")
        self.addPort( "DataIn1" ,"Float", "IN")
        self.addPort( "DataIn2" ,"MinMax_Data", "IN")
        self.addPort( "DataIn3" ,"Text", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"Polygons|TriangleStrips", "OUT")
        self.addPort( "DataOut0" ,"Float|Vec3", "OUT")
        self.addPort( "DataOut1" ,"Vec3", "OUT")
        self.addPort( "DataOut2" ,"Lines", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "vertex", "FloatVector", "IMM")
        self.addParam( "point", "FloatVector", "IMM")
        self.addParam( "scalar", "FloatScalar", "IMM")
        self.addParam( "option", "Choice", "IMM")
        self.addParam( "gennormals", "Boolean", "IMM")
        self.addParam( "genstrips", "Boolean", "IMM")
        self.addParam( "genDummyS", "Boolean", "IMM")
        self.addParam( "offset", "FloatScalar", "IMM")
        self.addParam( "numiso", "IntScalar", "IMM")
        self.addParam( "isostart", "FloatScalar", "IMM")
        self.addParam( "isoend", "FloatScalar", "IMM")
        self.addParam( "vertex_ratio", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_vertex( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vertex", valstr )
    def get_vertex( self ) :
        self.getParamValue( "vertex" )

    def set_point( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "point", valstr )
    def get_point( self ) :
        self.getParamValue( "point" )

    def set_scalar( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "scalar", valstr )
    def get_scalar( self ) :
        self.getParamValue( "scalar" )

    def set_option( self, x ) :
        valstr = x 
        self.setParamValue( "option", valstr )
    def get_option( self ) :
        self.getParamValue( "option" )

    def set_gennormals( self, x ) :
        valstr = x 
        self.setParamValue( "gennormals", valstr )
    def get_gennormals( self ) :
        self.getParamValue( "gennormals" )

    def set_genstrips( self, x ) :
        valstr = x 
        self.setParamValue( "genstrips", valstr )
    def get_genstrips( self ) :
        self.getParamValue( "genstrips" )

    def set_genDummyS( self, x ) :
        valstr = x 
        self.setParamValue( "genDummyS", valstr )
    def get_genDummyS( self ) :
        self.getParamValue( "genDummyS" )

    def set_offset( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "offset", valstr )
    def get_offset( self ) :
        self.getParamValue( "offset" )

    def set_numiso( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "numiso", valstr )
    def get_numiso( self ) :
        self.getParamValue( "numiso" )

    def set_isostart( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "isostart", valstr )
    def get_isostart( self ) :
        self.getParamValue( "isostart" )

    def set_isoend( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "isoend", valstr )
    def get_isoend( self ) :
        self.getParamValue( "isoend" )

    def set_vertex_ratio( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "vertex_ratio", valstr )
    def get_vertex_ratio( self ) :
        self.getParamValue( "vertex_ratio" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/CuttingSurfaceComp
#
class  CuttingSurfaceComp(CoviseModule):
#==================================
    name_ =  "CuttingSurfaceComp"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'length': {'length*scale': 2, '1*scale': 1}, 'vector': {'OnlySurface': 2, 'SurfaceAndLines': 1, 'OnlyLines': 3}, 'option': {'Sphere': 2, 'Cylinder-Y': 4, 'Plane': 1, 'Cylinder-X': 3, 'Cylinder-Z': 5}}

        # IN ports
        self.addPort( "GridIn0" ,"UnstructuredGrid|UniformGrid|StructuredGrid|RectilinearGrid", "IN")
        self.addPort( "DataIn0" ,"Float|Vec3", "IN")
        self.addPort( "DataIn1" ,"Float", "IN")
        self.addPort( "DataIn2" ,"MinMax_Data", "IN")
        self.addPort( "DataIn3" ,"Text", "IN")
        self.addPort( "ColormapIn0" ,"ColorMap", "IN")
        self.addPort( "GridIn1" ,"UniformGrid", "IN")
        self.addPort( "DataIn4" ,"Float|Vec3", "IN")

        # OUT ports
        self.addPort( "GeometryOut0" ,"Geometry", "OUT")
        self.addPort( "GridOut0" ,"Polygons|TriangleStrips", "OUT")
        self.addPort( "DataOut0" ,"Float|Vec3", "OUT")
        self.addPort( "DataOut1" ,"Vec3", "OUT")
        self.addPort( "DataOut2" ,"Lines", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "vertex", "FloatVector", "IMM")
        self.addParam( "point", "FloatVector", "IMM")
        self.addParam( "scalar", "FloatScalar", "IMM")
        self.addParam( "option", "Choice", "IMM")
        self.addParam( "gennormals", "Boolean", "IMM")
        self.addParam( "genstrips", "Boolean", "IMM")
        self.addParam( "genDummyS", "Boolean", "IMM")
        self.addParam( "offset", "FloatScalar", "IMM")
        self.addParam( "numiso", "IntScalar", "IMM")
        self.addParam( "isostart", "FloatScalar", "IMM")
        self.addParam( "isoend", "FloatScalar", "IMM")
        self.addParam( "color_or_texture", "Boolean", "IMM")
        self.addParam( "scale", "FloatSlider", "IMM")
        self.addParam( "length", "Choice", "IMM")
        self.addParam( "num_sectors", "IntScalar", "IMM")
        self.addParam( "arrow_head_factor", "FloatScalar", "IMM")
        self.addParam( "arrow_head_angle", "FloatScalar", "IMM")
        self.addParam( "project_lines", "Boolean", "IMM")
        self.addParam( "vector", "Choice", "IMM")
        self.addParam( "vertex_ratio", "FloatScalar", "IMM")
        self.addParam( "MinMax", "FloatVector", "IMM")
        self.addParam( "autoScales", "Boolean", "IMM")

    #     2. create parameter set members
    def set_vertex( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vertex", valstr )
    def get_vertex( self ) :
        self.getParamValue( "vertex" )

    def set_point( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "point", valstr )
    def get_point( self ) :
        self.getParamValue( "point" )

    def set_scalar( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "scalar", valstr )
    def get_scalar( self ) :
        self.getParamValue( "scalar" )

    def set_option( self, x ) :
        valstr = x 
        self.setParamValue( "option", valstr )
    def get_option( self ) :
        self.getParamValue( "option" )

    def set_gennormals( self, x ) :
        valstr = x 
        self.setParamValue( "gennormals", valstr )
    def get_gennormals( self ) :
        self.getParamValue( "gennormals" )

    def set_genstrips( self, x ) :
        valstr = x 
        self.setParamValue( "genstrips", valstr )
    def get_genstrips( self ) :
        self.getParamValue( "genstrips" )

    def set_genDummyS( self, x ) :
        valstr = x 
        self.setParamValue( "genDummyS", valstr )
    def get_genDummyS( self ) :
        self.getParamValue( "genDummyS" )

    def set_offset( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "offset", valstr )
    def get_offset( self ) :
        self.getParamValue( "offset" )

    def set_numiso( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "numiso", valstr )
    def get_numiso( self ) :
        self.getParamValue( "numiso" )

    def set_isostart( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "isostart", valstr )
    def get_isostart( self ) :
        self.getParamValue( "isostart" )

    def set_isoend( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "isoend", valstr )
    def get_isoend( self ) :
        self.getParamValue( "isoend" )

    def set_color_or_texture( self, x ) :
        valstr = x 
        self.setParamValue( "color_or_texture", valstr )
    def get_color_or_texture( self ) :
        self.getParamValue( "color_or_texture" )

    def set_scale( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scale", valstr )
    def get_scale( self ) :
        self.getParamValue( "scale" )

    def set_length( self, x ) :
        valstr = x 
        self.setParamValue( "length", valstr )
    def get_length( self ) :
        self.getParamValue( "length" )

    def set_num_sectors( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "num_sectors", valstr )
    def get_num_sectors( self ) :
        self.getParamValue( "num_sectors" )

    def set_arrow_head_factor( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "arrow_head_factor", valstr )
    def get_arrow_head_factor( self ) :
        self.getParamValue( "arrow_head_factor" )

    def set_arrow_head_angle( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "arrow_head_angle", valstr )
    def get_arrow_head_angle( self ) :
        self.getParamValue( "arrow_head_angle" )

    def set_project_lines( self, x ) :
        valstr = x 
        self.setParamValue( "project_lines", valstr )
    def get_project_lines( self ) :
        self.getParamValue( "project_lines" )

    def set_vector( self, x ) :
        valstr = x 
        self.setParamValue( "vector", valstr )
    def get_vector( self ) :
        self.getParamValue( "vector" )

    def set_vertex_ratio( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "vertex_ratio", valstr )
    def get_vertex_ratio( self ) :
        self.getParamValue( "vertex_ratio" )

    def set_MinMax( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "MinMax", valstr )
    def get_MinMax( self ) :
        self.getParamValue( "MinMax" )

    def set_autoScales( self, x ) :
        valstr = x 
        self.setParamValue( "autoScales", valstr )
    def get_autoScales( self ) :
        self.getParamValue( "autoScales" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/DomainSurface
#
class  DomainSurface(CoviseModule):
#==================================
    name_ =  "DomainSurface"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'optimize': {'speed': 1, 'memory': 2}}

        # IN ports
        self.addPort( "GridIn0" ,"StructuredGrid|RectilinearGrid|UniformGrid|UnstructuredGrid", "IN")
        self.addPort( "DataIn0" ,"Float|Vec3|Mat3", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"Polygons", "OUT")
        self.addPort( "DataOut0" ,"Float|Vec3|Mat3", "OUT")
        self.addPort( "GridOut1" ,"Lines", "OUT")
        self.addPort( "DataOut1" ,"Float|Vec3|Mat3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "angle", "FloatScalar", "IMM")
        self.addParam( "vertex", "FloatVector", "IMM")
        self.addParam( "scalar", "FloatScalar", "IMM")
        self.addParam( "double", "Boolean", "IMM")
        self.addParam( "optimize", "Choice", "IMM")

    #     2. create parameter set members
    def set_angle( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "angle", valstr )
    def get_angle( self ) :
        self.getParamValue( "angle" )

    def set_vertex( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vertex", valstr )
    def get_vertex( self ) :
        self.getParamValue( "vertex" )

    def set_scalar( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "scalar", valstr )
    def get_scalar( self ) :
        self.getParamValue( "scalar" )

    def set_double( self, x ) :
        valstr = x 
        self.setParamValue( "double", valstr )
    def get_double( self ) :
        self.getParamValue( "double" )

    def set_optimize( self, x ) :
        valstr = x 
        self.setParamValue( "optimize", valstr )
    def get_optimize( self ) :
        self.getParamValue( "optimize" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/EliminatePolygons
#
class  EliminatePolygons(CoviseModule):
#==================================
    name_ =  "EliminatePolygons"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"Polygons", "IN")
        self.addPort( "GridIn1" ,"Polygons", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"Polygons", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/FilterCrop
#
class  FilterCrop(CoviseModule):
#==================================
    name_ =  "FilterCrop"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"StructuredGrid|RectilinearGrid|UniformGrid", "IN")
        self.addPort( "DataIn0" ,"Float|Vec3", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"StructuredGrid|RectilinearGrid|UniformGrid", "OUT")
        self.addPort( "DataOut0" ,"Float|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "i_min", "IntSlider", "IMM")
        self.addParam( "i_max", "IntSlider", "IMM")
        self.addParam( "j_min", "IntSlider", "IMM")
        self.addParam( "j_max", "IntSlider", "IMM")
        self.addParam( "k_min", "IntSlider", "IMM")
        self.addParam( "k_max", "IntSlider", "IMM")
        self.addParam( "sample", "IntScalar", "IMM")

    #     2. create parameter set members
    def set_i_min( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "i_min", valstr )
    def get_i_min( self ) :
        self.getParamValue( "i_min" )

    def set_i_max( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "i_max", valstr )
    def get_i_max( self ) :
        self.getParamValue( "i_max" )

    def set_j_min( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "j_min", valstr )
    def get_j_min( self ) :
        self.getParamValue( "j_min" )

    def set_j_max( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "j_max", valstr )
    def get_j_max( self ) :
        self.getParamValue( "j_max" )

    def set_k_min( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "k_min", valstr )
    def get_k_min( self ) :
        self.getParamValue( "k_min" )

    def set_k_max( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "k_max", valstr )
    def get_k_max( self ) :
        self.getParamValue( "k_max" )

    def set_sample( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "sample", valstr )
    def get_sample( self ) :
        self.getParamValue( "sample" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/GetSubset
#
class  GetSubset(CoviseModule):
#==================================
    name_ =  "GetSubset"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "DataIn0" ,"coDistributedObject", "IN")
        self.addPort( "DataIn1" ,"coDistributedObject", "IN")
        self.addPort( "DataIn2" ,"coDistributedObject", "IN")
        self.addPort( "DataIn3" ,"coDistributedObject", "IN")
        self.addPort( "DataIn4" ,"coDistributedObject", "IN")
        self.addPort( "DataIn5" ,"coDistributedObject", "IN")
        self.addPort( "DataIn6" ,"coDistributedObject", "IN")
        self.addPort( "DataIn7" ,"coDistributedObject", "IN")

        # OUT ports
        self.addPort( "DataOut0" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut1" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut2" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut3" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut4" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut5" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut6" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut7" ,"coDistributedObject", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "selection", "String", "IMM")

    #     2. create parameter set members
    def set_selection( self, x ) :
        valstr = x 
        self.setParamValue( "selection", valstr )
    def get_selection( self ) :
        self.getParamValue( "selection" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/IndexManifolds
#
class  IndexManifolds(CoviseModule):
#==================================
    name_ =  "IndexManifolds"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'DirChoice': {'direction x': 1, 'direction y': 2, 'direction z': 3}}

        # IN ports
        self.addPort( "GridIn0" ,"StructuredGrid|RectilinearGrid|UniformGrid", "IN")
        self.addPort( "DataIn0" ,"Float|Vec3|Int|RGBA", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"Polygons|TriangleStrips", "OUT")
        self.addPort( "DataOut0" ,"Float|Vec3|Int|RGBA", "OUT")
        self.addPort( "GridOut1" ,"Lines", "OUT")
        self.addPort( "DataOut1" ,"Float|Vec3|Int|RGBA", "OUT")
        self.addPort( "GridOut2" ,"Points", "OUT")
        self.addPort( "DataOut2" ,"Float|Vec3|Int|RGBA", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "DirChoice", "Choice", "IMM")
        self.addParam( "xIndex", "IntSlider", "IMM")
        self.addParam( "yIndex", "IntSlider", "IMM")
        self.addParam( "zIndex", "IntSlider", "IMM")
        self.addParam( "Generate_strips", "Boolean", "IMM")

    #     2. create parameter set members
    def set_DirChoice( self, x ) :
        valstr = x 
        self.setParamValue( "DirChoice", valstr )
    def get_DirChoice( self ) :
        self.getParamValue( "DirChoice" )

    def set_xIndex( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "xIndex", valstr )
    def get_xIndex( self ) :
        self.getParamValue( "xIndex" )

    def set_yIndex( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "yIndex", valstr )
    def get_yIndex( self ) :
        self.getParamValue( "yIndex" )

    def set_zIndex( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "zIndex", valstr )
    def get_zIndex( self ) :
        self.getParamValue( "zIndex" )

    def set_Generate_strips( self, x ) :
        valstr = x 
        self.setParamValue( "Generate_strips", valstr )
    def get_Generate_strips( self ) :
        self.getParamValue( "Generate_strips" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/LineReduce
#
class  LineReduce(CoviseModule):
#==================================
    name_ =  "LineReduce"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "linesIn" ,"Lines", "IN")
        self.addPort( "dataIn" ,"Vec3|Float", "IN")

        # OUT ports
        self.addPort( "linesOut" ,"Lines", "OUT")
        self.addPort( "dataOut" ,"Vec3|Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "maxAngle", "FloatScalar", "IMM")
        self.addParam( "maxDifference", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_maxAngle( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "maxAngle", valstr )
    def get_maxAngle( self ) :
        self.getParamValue( "maxAngle" )

    def set_maxDifference( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "maxDifference", valstr )
    def get_maxDifference( self ) :
        self.getParamValue( "maxDifference" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/PartSelect
#
class  PartSelect(CoviseModule):
#==================================
    name_ =  "PartSelect"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "inport_1" ,"StructuredGrid|Float|Vec3|UnstructuredGrid|Float|Vec3|Geometry|Polygons|Lines|Points|TriangleStrips|IntArr", "IN")
        self.addPort( "inport_2" ,"StructuredGrid|Float|Vec3|UnstructuredGrid|Float|Vec3|Geometry|Polygons|Lines|Points|TriangleStrips|IntArr", "IN")
        self.addPort( "inport_3" ,"StructuredGrid|Float|Vec3|UnstructuredGrid|Float|Vec3|Geometry|Polygons|Lines|Points|TriangleStrips|IntArr", "IN")
        self.addPort( "inport_4" ,"StructuredGrid|Float|Vec3|UnstructuredGrid|Float|Vec3|Geometry|Polygons|Lines|Points|TriangleStrips|IntArr", "IN")

        # OUT ports
        self.addPort( "outport_1" ,"StructuredGrid|Float|Vec3|UnstructuredGrid|Float|Vec3|Geometry|Polygons|Lines|Points|TriangleStrips|IntArr", "OUT")
        self.addPort( "outport_2" ,"StructuredGrid|Float|Vec3|UnstructuredGrid|Float|Vec3|Geometry|Polygons|Lines|Points|TriangleStrips|IntArr", "OUT")
        self.addPort( "outport_3" ,"StructuredGrid|Float|Vec3|UnstructuredGrid|Float|Vec3|Geometry|Polygons|Lines|Points|TriangleStrips|IntArr", "OUT")
        self.addPort( "outport_4" ,"StructuredGrid|Float|Vec3|UnstructuredGrid|Float|Vec3|Geometry|Polygons|Lines|Points|TriangleStrips|IntArr", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "numbers", "String", "IMM")

    #     2. create parameter set members
    def set_numbers( self, x ) :
        valstr = x 
        self.setParamValue( "numbers", valstr )
    def get_numbers( self ) :
        self.getParamValue( "numbers" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/PurgeCoords
#
class  PurgeCoords(CoviseModule):
#==================================
    name_ =  "PurgeCoords"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"Polygons|UnstructuredGrid", "IN")
        self.addPort( "DataIn0" ,"Int|Float|Vec2|Vec3|RGBA|Mat3|Tensor", "IN")
        self.addPort( "DataIn1" ,"Int|Float|Vec2|Vec3|RGBA|Mat3|Tensor", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"Polygons|UnstructuredGrid", "OUT")
        self.addPort( "DataOut0" ,"Int|Float|Vec2|Vec3|RGBA|Mat3|Tensor", "OUT")
        self.addPort( "DataOut1" ,"Int|Float|Vec2|Vec3|RGBA|Mat3|Tensor", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/SelectUsg
#
class  SelectUsg(CoviseModule):
#==================================
    name_ =  "SelectUsg"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'Type': {'Property': 2, 'Component': 3, 'Element': 1}}

        # IN ports
        self.addPort( "mesh" ,"UnstructuredGrid", "IN")
        self.addPort( "index" ,"IntArr", "IN")
        self.addPort( "dataIn" ,"Float|Vec3", "IN")

        # OUT ports
        self.addPort( "meshOut" ,"UnstructuredGrid", "OUT")
        self.addPort( "dataOut" ,"Float|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "Type", "Choice", "IMM")
        self.addParam( "Selection", "String", "IMM")

    #     2. create parameter set members
    def set_Type( self, x ) :
        valstr = x 
        self.setParamValue( "Type", valstr )
    def get_Type( self ) :
        self.getParamValue( "Type" )

    def set_Selection( self, x ) :
        valstr = x 
        self.setParamValue( "Selection", valstr )
    def get_Selection( self ) :
        self.getParamValue( "Selection" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/SimplifySurface
#
class  SimplifySurface(CoviseModule):
#==================================
    name_ =  "SimplifySurface"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "meshIn" ,"Polygons|TriangleStrips", "IN")
        self.addPort( "dataIn_0" ,"Float|Vec3", "IN")
        self.addPort( "normalsIn" ,"Vec3|Vec3", "IN")

        # OUT ports
        self.addPort( "meshOut" ,"Polygons", "OUT")
        self.addPort( "dataOut_0" ,"Float|Vec3", "OUT")
        self.addPort( "normalsOut" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "percent", "FloatScalar", "IMM")
        self.addParam( "max_normaldeviation", "FloatScalar", "IMM")
        self.addParam( "max_domaindeviation", "FloatSlider", "IMM")
        self.addParam( "data_relative_weight", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_percent( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "percent", valstr )
    def get_percent( self ) :
        self.getParamValue( "percent" )

    def set_max_normaldeviation( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "max_normaldeviation", valstr )
    def get_max_normaldeviation( self ) :
        self.getParamValue( "max_normaldeviation" )

    def set_max_domaindeviation( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "max_domaindeviation", valstr )
    def get_max_domaindeviation( self ) :
        self.getParamValue( "max_domaindeviation" )

    def set_data_relative_weight( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "data_relative_weight", valstr )
    def get_data_relative_weight( self ) :
        self.getParamValue( "data_relative_weight" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/SmoothSurface
#
class  SmoothSurface(CoviseModule):
#==================================
    name_ =  "SmoothSurface"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'method': {'Gaussian': 1, 'Uwe': 3, 'Taubin': 2}}

        # IN ports
        self.addPort( "meshIn" ,"Polygons|TriangleStrips", "IN")

        # OUT ports
        self.addPort( "meshOut" ,"Polygons", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "method", "Choice", "IMM")
        self.addParam( "iterations", "IntScalar", "IMM")
        self.addParam( "scale_1", "FloatScalar", "IMM")
        self.addParam( "scale_2", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_method( self, x ) :
        valstr = x 
        self.setParamValue( "method", valstr )
    def get_method( self ) :
        self.getParamValue( "method" )

    def set_iterations( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "iterations", valstr )
    def get_iterations( self ) :
        self.getParamValue( "iterations" )

    def set_scale_1( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "scale_1", valstr )
    def get_scale_1( self ) :
        self.getParamValue( "scale_1" )

    def set_scale_2( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "scale_2", valstr )
    def get_scale_2( self ) :
        self.getParamValue( "scale_2" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/SplitUsg
#
class  SplitUsg(CoviseModule):
#==================================
    name_ =  "SplitUsg"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "Grid" ,"UnstructuredGrid", "IN")
        self.addPort( "S_Data" ,"Float", "IN")
        self.addPort( "V_Data" ,"Vec3", "IN")

        # OUT ports
        self.addPort( "Grid3D" ,"UnstructuredGrid", "OUT")
        self.addPort( "S_Grid3D_Data" ,"Float", "OUT")
        self.addPort( "V_Grid3D_Data" ,"Vec3", "OUT")
        self.addPort( "Grid2D" ,"Polygons", "OUT")
        self.addPort( "S_Grid2D_Data" ,"Float", "OUT")
        self.addPort( "V_Grid2D_Data" ,"Vec3", "OUT")
        self.addPort( "Grid1D" ,"Lines", "OUT")
        self.addPort( "S_Grid1D_Data" ,"Float", "OUT")
        self.addPort( "V_Grid1D_Data" ,"Vec3", "OUT")
        self.addPort( "Grid0D" ,"Points", "OUT")
        self.addPort( "S_Grid0D_Data" ,"Float", "OUT")
        self.addPort( "V_Grid0D_Data" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Filter/VariantMarker
#
class  VariantMarker(CoviseModule):
#==================================
    name_ =  "VariantMarker"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "inObject" ,"coDistributedObject", "IN")

        # OUT ports
        self.addPort( "outObject" ,"coDistributedObject", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "varName", "String", "IMM")

    #     2. create parameter set members
    def set_varName( self, x ) :
        valstr = x 
        self.setParamValue( "varName", valstr )
    def get_varName( self ) :
        self.getParamValue( "varName" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Mapper/Colors
#
class  Colors(CoviseModule):
#==================================
    name_ =  "Colors"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'SpikeAlgo': {'Elements': 4, 'None': 1, 'Interval': 3, 'Adaptive': 2}}

        # IN ports
        self.addPort( "DataIn0" ,"Vec3|IntArr|Int|Float", "IN")
        self.addPort( "DataIn1" ,"Vec3|IntArr|Int|Float", "IN")
        self.addPort( "DataIn2" ,"Float", "IN")
        self.addPort( "ColormapIn0" ,"ColorMap|MinMax_Data", "IN")

        # OUT ports
        self.addPort( "DataOut0" ,"RGBA", "OUT")
        self.addPort( "TextureOut0" ,"Texture", "OUT")
        self.addPort( "ColormapOut0" ,"ColorMap", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "MinMax", "FloatVector", "IMM")
        self.addParam( "EditableColormap", "Colormap", "IMM")
        self.addParam( "Colormap", "ColormapChoice", "IMM")
        self.addParam( "numSteps", "IntScalar", "IMM")
        self.addParam( "autoScales", "Boolean", "IMM")
        self.addParam( "scaleNow", "Boolean", "IMM")
        self.addParam( "opacityFactor", "FloatScalar", "IMM")
        self.addParam( "annotation", "String", "IMM")
        self.addParam( "SpikeAlgo", "Choice", "IMM")
        self.addParam( "SpikeLowFract", "FloatScalar", "IMM")
        self.addParam( "SpikeTopFract", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_MinMax( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "MinMax", valstr )
    def get_MinMax( self ) :
        self.getParamValue( "MinMax" )

    def set_EditableColormap( self, x ) :
        valstr = x 
        self.setParamValue( "EditableColormap", valstr )
    def get_EditableColormap( self ) :
        self.getParamValue( "EditableColormap" )

    def set_Colormap( self, x ) :
        valstr = x 
        self.setParamValue( "Colormap", valstr )
    def get_Colormap( self ) :
        self.getParamValue( "Colormap" )

    def set_numSteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "numSteps", valstr )
    def get_numSteps( self ) :
        self.getParamValue( "numSteps" )

    def set_autoScales( self, x ) :
        valstr = x 
        self.setParamValue( "autoScales", valstr )
    def get_autoScales( self ) :
        self.getParamValue( "autoScales" )

    def set_scaleNow( self, x ) :
        valstr = x 
        self.setParamValue( "scaleNow", valstr )
    def get_scaleNow( self ) :
        self.getParamValue( "scaleNow" )

    def set_opacityFactor( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "opacityFactor", valstr )
    def get_opacityFactor( self ) :
        self.getParamValue( "opacityFactor" )

    def set_annotation( self, x ) :
        valstr = x 
        self.setParamValue( "annotation", valstr )
    def get_annotation( self ) :
        self.getParamValue( "annotation" )

    def set_SpikeAlgo( self, x ) :
        valstr = x 
        self.setParamValue( "SpikeAlgo", valstr )
    def get_SpikeAlgo( self ) :
        self.getParamValue( "SpikeAlgo" )

    def set_SpikeLowFract( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "SpikeLowFract", valstr )
    def get_SpikeLowFract( self ) :
        self.getParamValue( "SpikeLowFract" )

    def set_SpikeTopFract( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "SpikeTopFract", valstr )
    def get_SpikeTopFract( self ) :
        self.getParamValue( "SpikeTopFract" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Mapper/IsoLines
#
class  IsoLines(CoviseModule):
#==================================
    name_ =  "IsoLines"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "GridIn0" ,"Polygons", "IN")
        self.addPort( "DataIn0" ,"Float", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"Lines", "OUT")
        self.addPort( "DataOut0" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "from", "FloatScalar", "IMM")
        self.addParam( "to", "FloatScalar", "IMM")
        self.addParam( "nlines", "IntScalar", "IMM")
        self.addParam( "distance", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_from( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "from", valstr )
    def get_from( self ) :
        self.getParamValue( "from" )

    def set_to( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "to", valstr )
    def get_to( self ) :
        self.getParamValue( "to" )

    def set_nlines( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "nlines", valstr )
    def get_nlines( self ) :
        self.getParamValue( "nlines" )

    def set_distance( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "distance", valstr )
    def get_distance( self ) :
        self.getParamValue( "distance" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Mapper/VectorField
#
class  VectorField(CoviseModule):
#==================================
    name_ =  "VectorField"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'fasten': {'on_the_middle': 2, 'on_the_bottom': 1}, 'length': {'length*scale': 2, 'according_to_data': 3, '1*scale': 1}}

        # IN ports
        self.addPort( "meshIn" ,"StructuredGrid|RectilinearGrid|UniformGrid|Polygons|Lines|UnstructuredGrid|TriangleStrips|Points", "IN")
        self.addPort( "vdataIn" ,"Vec3|Vec3|Mat3", "IN")
        self.addPort( "sdataIn" ,"Float|Float", "IN")

        # OUT ports
        self.addPort( "linesOut" ,"Lines", "OUT")
        self.addPort( "dataOut" ,"Float", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "scale", "FloatSlider", "IMM")
        self.addParam( "length", "Choice", "IMM")
        self.addParam( "fasten", "Choice", "IMM")
        self.addParam( "num_sectors", "IntScalar", "IMM")

    #     2. create parameter set members
    def set_scale( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scale", valstr )
    def get_scale( self ) :
        self.getParamValue( "scale" )

    def set_length( self, x ) :
        valstr = x 
        self.setParamValue( "length", valstr )
    def get_length( self ) :
        self.getParamValue( "length" )

    def set_fasten( self, x ) :
        valstr = x 
        self.setParamValue( "fasten", valstr )
    def get_fasten( self ) :
        self.getParamValue( "fasten" )

    def set_num_sectors( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "num_sectors", valstr )
    def get_num_sectors( self ) :
        self.getParamValue( "num_sectors" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Mapper/IsoSurface
#
class  IsoSurface(CoviseModule):
#==================================
    name_ =  "IsoSurface"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'Interactor': {'Value': 2, 'Point': 1}}

        # IN ports
        self.addPort( "GridIn0" ,"UnstructuredGrid|UniformGrid|StructuredGrid|RectilinearGrid", "IN")
        self.addPort( "DataIn0" ,"Float|Float", "IN")
        self.addPort( "DataIn1" ,"Float|Vec3|Float|Vec3", "IN")
        self.addPort( "DataIn2" ,"Text", "IN")

        # OUT ports
        self.addPort( "GridOut0" ,"Polygons|TriangleStrips", "OUT")
        self.addPort( "DataOut0" ,"Float|Vec3", "OUT")
        self.addPort( "DataOut1" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "gennormals", "Boolean", "IMM")
        self.addParam( "genstrips", "Boolean", "IMM")
        self.addParam( "Interactor", "Choice", "IMM")
        self.addParam( "isopoint", "FloatVector", "IMM")
        self.addParam( "isovalue", "FloatSlider", "IMM")
        self.addParam( "autominmax", "Boolean", "IMM")

    #     2. create parameter set members
    def set_gennormals( self, x ) :
        valstr = x 
        self.setParamValue( "gennormals", valstr )
    def get_gennormals( self ) :
        self.getParamValue( "gennormals" )

    def set_genstrips( self, x ) :
        valstr = x 
        self.setParamValue( "genstrips", valstr )
    def get_genstrips( self ) :
        self.getParamValue( "genstrips" )

    def set_Interactor( self, x ) :
        valstr = x 
        self.setParamValue( "Interactor", valstr )
    def get_Interactor( self ) :
        self.getParamValue( "Interactor" )

    def set_isopoint( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "isopoint", valstr )
    def get_isopoint( self ) :
        self.getParamValue( "isopoint" )

    def set_isovalue( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "isovalue", valstr )
    def get_isovalue( self ) :
        self.getParamValue( "isovalue" )

    def set_autominmax( self, x ) :
        valstr = x 
        self.setParamValue( "autominmax", valstr )
    def get_autominmax( self ) :
        self.getParamValue( "autominmax" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Mapper/IsoSurfaceComp
#
class  IsoSurfaceComp(CoviseModule):
#==================================
    name_ =  "IsoSurfaceComp"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'vector': {'OnlySurface': 2, 'SurfaceAndLines': 1, 'OnlyLines': 3}, 'length': {'length*scale': 2, '1*scale': 1}, 'Interactor': {'Value': 2, 'Point': 1}}

        # IN ports
        self.addPort( "GridIn0" ,"UnstructuredGrid|UniformGrid|StructuredGrid|RectilinearGrid", "IN")
        self.addPort( "DataIn0" ,"Float|Float", "IN")
        self.addPort( "DataIn1" ,"Float|Vec3|Float|Vec3", "IN")
        self.addPort( "DataIn2" ,"Text", "IN")
        self.addPort( "ColormapIn0" ,"ColorMap", "IN")

        # OUT ports
        self.addPort( "GeometryOut0" ,"Geometry", "OUT")
        self.addPort( "GridOut0" ,"Polygons|TriangleStrips", "OUT")
        self.addPort( "DataOut0" ,"Float|Vec3", "OUT")
        self.addPort( "DataOut1" ,"Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "gennormals", "Boolean", "IMM")
        self.addParam( "genstrips", "Boolean", "IMM")
        self.addParam( "Interactor", "Choice", "IMM")
        self.addParam( "isopoint", "FloatVector", "IMM")
        self.addParam( "isovalue", "FloatSlider", "IMM")
        self.addParam( "autominmax", "Boolean", "IMM")
        self.addParam( "color_or_texture", "Boolean", "IMM")
        self.addParam( "scale", "FloatSlider", "IMM")
        self.addParam( "length", "Choice", "IMM")
        self.addParam( "num_sectors", "IntScalar", "IMM")
        self.addParam( "vector", "Choice", "IMM")

    #     2. create parameter set members
    def set_gennormals( self, x ) :
        valstr = x 
        self.setParamValue( "gennormals", valstr )
    def get_gennormals( self ) :
        self.getParamValue( "gennormals" )

    def set_genstrips( self, x ) :
        valstr = x 
        self.setParamValue( "genstrips", valstr )
    def get_genstrips( self ) :
        self.getParamValue( "genstrips" )

    def set_Interactor( self, x ) :
        valstr = x 
        self.setParamValue( "Interactor", valstr )
    def get_Interactor( self ) :
        self.getParamValue( "Interactor" )

    def set_isopoint( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "isopoint", valstr )
    def get_isopoint( self ) :
        self.getParamValue( "isopoint" )

    def set_isovalue( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "isovalue", valstr )
    def get_isovalue( self ) :
        self.getParamValue( "isovalue" )

    def set_autominmax( self, x ) :
        valstr = x 
        self.setParamValue( "autominmax", valstr )
    def get_autominmax( self ) :
        self.getParamValue( "autominmax" )

    def set_color_or_texture( self, x ) :
        valstr = x 
        self.setParamValue( "color_or_texture", valstr )
    def get_color_or_texture( self ) :
        self.getParamValue( "color_or_texture" )

    def set_scale( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scale", valstr )
    def get_scale( self ) :
        self.getParamValue( "scale" )

    def set_length( self, x ) :
        valstr = x 
        self.setParamValue( "length", valstr )
    def get_length( self ) :
        self.getParamValue( "length" )

    def set_num_sectors( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "num_sectors", valstr )
    def get_num_sectors( self ) :
        self.getParamValue( "num_sectors" )

    def set_vector( self, x ) :
        valstr = x 
        self.setParamValue( "vector", valstr )
    def get_vector( self ) :
        self.getParamValue( "vector" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Obsolete/GetSetelem
#
class  GetSetelem(CoviseModule):
#==================================
    name_ =  "GetSetelem"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "DataIn0" ,"coDistributedObject", "IN")
        self.addPort( "DataIn1" ,"coDistributedObject", "IN")
        self.addPort( "DataIn2" ,"coDistributedObject", "IN")
        self.addPort( "DataIn3" ,"coDistributedObject", "IN")
        self.addPort( "DataIn4" ,"coDistributedObject", "IN")
        self.addPort( "DataIn5" ,"coDistributedObject", "IN")
        self.addPort( "DataIn6" ,"coDistributedObject", "IN")
        self.addPort( "DataIn7" ,"coDistributedObject", "IN")

        # OUT ports
        self.addPort( "DataOut0" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut1" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut2" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut3" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut4" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut5" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut6" ,"coDistributedObject", "OUT")
        self.addPort( "DataOut7" ,"coDistributedObject", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "stepNo", "IntScalar", "IMM")

    #     2. create parameter set members
    def set_stepNo( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "stepNo", valstr )
    def get_stepNo( self ) :
        self.getParamValue( "stepNo" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/UnderDev/TGenDat
#
class  TGenDat(CoviseModule):
#==================================
    name_ =  "TGenDat"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'gridType': {'unstructured': 3, 'structured': 2, 'rectilinear': 1}, 'case': {'moving': 5, 'transient1': 3, 'transient2': 4, 'weird': 6, 'multiblock': 2, 'circular': 1}}

        # IN ports

        # OUT ports
        self.addPort( "grid" ,"UnstructuredGrid|StructuredGrid|RectilinearGrid", "OUT")
        self.addPort( "data" ,"Vec3|Vec3", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "gridType", "Choice", "IMM")
        self.addParam( "case", "Choice", "IMM")

    #     2. create parameter set members
    def set_gridType( self, x ) :
        valstr = x 
        self.setParamValue( "gridType", valstr )
    def get_gridType( self ) :
        self.getParamValue( "gridType" )

    def set_case( self, x ) :
        valstr = x 
        self.setParamValue( "case", valstr )
    def get_case( self ) :
        self.getParamValue( "case" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tracer/Tracer
#
class  Tracer(CoviseModule):
#==================================
    name_ =  "Tracer"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'startStyle': {'line': 1, 'plane': 2, 'cylinder': 3}, 'taskType': {'Streaklines': 4, 'Streamlines': 1, 'Moving Points': 2, 'Pathlines': 3}, 'tdirection': {'forward': 1, 'both': 3, 'backward': 2}, 'whatout': {'v': 7, 'v_x': 2, 'v_y': 3, 'v_z': 4, 'mag': 1, 'time': 5, 'id': 6}}

        # IN ports
        self.addPort( "meshIn" ,"UniformGrid|RectilinearGrid|StructuredGrid|UnstructuredGrid|Polygons", "IN")
        self.addPort( "dataIn" ,"Vec3|Vec3", "IN")
        self.addPort( "pointsIn" ,"Points|UnstructuredGrid|Polygons|TriangleStrips|Lines|Vec3", "IN")
        self.addPort( "octtreesIn" ,"OctTree|OctTreeP", "IN")
        self.addPort( "fieldIn" ,"Float|Float", "IN")

        # OUT ports
        self.addPort( "lines" ,"Lines|Points|TriangleStrips", "OUT")
        self.addPort( "dataOut" ,"Float|Vector", "OUT")
        self.addPort( "startingPoints" ,"Points", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "no_startp", "IntSlider", "IMM")
        self.addParam( "startpoint1", "FloatVector", "IMM")
        self.addParam( "startpoint2", "FloatVector", "IMM")
        self.addParam( "direction", "FloatVector", "IMM")
        self.addParam( "cyl_axis", "FloatVector", "IMM")
        self.addParam( "cyl_radius", "FloatScalar", "IMM")
        self.addParam( "cyl_height", "FloatScalar", "IMM")
        self.addParam( "cyl_bottompoint_on_axis", "FloatVector", "IMM")
        self.addParam( "Displacement", "FloatVector", "IMM")
        self.addParam( "tdirection", "Choice", "IMM")
        self.addParam( "whatout", "Choice", "IMM")
        self.addParam( "taskType", "Choice", "IMM")
        self.addParam( "startStyle", "Choice", "IMM")
        self.addParam( "trace_eps", "FloatScalar", "IMM")
        self.addParam( "trace_abs", "FloatScalar", "IMM")
        self.addParam( "grid_tol", "FloatScalar", "IMM")
        self.addParam( "trace_len", "FloatScalar", "IMM")
        self.addParam( "min_vel", "FloatScalar", "IMM")
        self.addParam( "MaxPoints", "IntScalar", "IMM")
        self.addParam( "stepDuration", "FloatScalar", "IMM")
        self.addParam( "NoCycles", "IntScalar", "IMM")
        self.addParam( "NoInterpolation", "Boolean", "IMM")
        self.addParam( "ThrowNewParticles", "Boolean", "IMM")
        self.addParam( "ParticlesReleaseRate", "FloatScalar", "IMM")
        self.addParam( "divideCell", "FloatScalar", "IMM")
        self.addParam( "maxOutOfDomain", "FloatScalar", "IMM")
        self.addParam( "NoWThreads", "IntScalar", "IMM")
        self.addParam( "SearchLevel", "IntScalar", "IMM")
        self.addParam( "SkipInitialSteps", "IntScalar", "IMM")
        self.addParam( "color", "String", "IMM")

    #     2. create parameter set members
    def set_no_startp( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "no_startp", valstr )
    def get_no_startp( self ) :
        self.getParamValue( "no_startp" )

    def set_startpoint1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "startpoint1", valstr )
    def get_startpoint1( self ) :
        self.getParamValue( "startpoint1" )

    def set_startpoint2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "startpoint2", valstr )
    def get_startpoint2( self ) :
        self.getParamValue( "startpoint2" )

    def set_direction( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "direction", valstr )
    def get_direction( self ) :
        self.getParamValue( "direction" )

    def set_cyl_axis( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "cyl_axis", valstr )
    def get_cyl_axis( self ) :
        self.getParamValue( "cyl_axis" )

    def set_cyl_radius( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "cyl_radius", valstr )
    def get_cyl_radius( self ) :
        self.getParamValue( "cyl_radius" )

    def set_cyl_height( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "cyl_height", valstr )
    def get_cyl_height( self ) :
        self.getParamValue( "cyl_height" )

    def set_cyl_bottompoint_on_axis( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "cyl_bottompoint_on_axis", valstr )
    def get_cyl_bottompoint_on_axis( self ) :
        self.getParamValue( "cyl_bottompoint_on_axis" )

    def set_Displacement( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Displacement", valstr )
    def get_Displacement( self ) :
        self.getParamValue( "Displacement" )

    def set_tdirection( self, x ) :
        valstr = x 
        self.setParamValue( "tdirection", valstr )
    def get_tdirection( self ) :
        self.getParamValue( "tdirection" )

    def set_whatout( self, x ) :
        valstr = x 
        self.setParamValue( "whatout", valstr )
    def get_whatout( self ) :
        self.getParamValue( "whatout" )

    def set_taskType( self, x ) :
        valstr = x 
        self.setParamValue( "taskType", valstr )
    def get_taskType( self ) :
        self.getParamValue( "taskType" )

    def set_startStyle( self, x ) :
        valstr = x 
        self.setParamValue( "startStyle", valstr )
    def get_startStyle( self ) :
        self.getParamValue( "startStyle" )

    def set_trace_eps( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "trace_eps", valstr )
    def get_trace_eps( self ) :
        self.getParamValue( "trace_eps" )

    def set_trace_abs( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "trace_abs", valstr )
    def get_trace_abs( self ) :
        self.getParamValue( "trace_abs" )

    def set_grid_tol( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "grid_tol", valstr )
    def get_grid_tol( self ) :
        self.getParamValue( "grid_tol" )

    def set_trace_len( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "trace_len", valstr )
    def get_trace_len( self ) :
        self.getParamValue( "trace_len" )

    def set_min_vel( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "min_vel", valstr )
    def get_min_vel( self ) :
        self.getParamValue( "min_vel" )

    def set_MaxPoints( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "MaxPoints", valstr )
    def get_MaxPoints( self ) :
        self.getParamValue( "MaxPoints" )

    def set_stepDuration( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "stepDuration", valstr )
    def get_stepDuration( self ) :
        self.getParamValue( "stepDuration" )

    def set_NoCycles( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "NoCycles", valstr )
    def get_NoCycles( self ) :
        self.getParamValue( "NoCycles" )

    def set_NoInterpolation( self, x ) :
        valstr = x 
        self.setParamValue( "NoInterpolation", valstr )
    def get_NoInterpolation( self ) :
        self.getParamValue( "NoInterpolation" )

    def set_ThrowNewParticles( self, x ) :
        valstr = x 
        self.setParamValue( "ThrowNewParticles", valstr )
    def get_ThrowNewParticles( self ) :
        self.getParamValue( "ThrowNewParticles" )

    def set_ParticlesReleaseRate( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "ParticlesReleaseRate", valstr )
    def get_ParticlesReleaseRate( self ) :
        self.getParamValue( "ParticlesReleaseRate" )

    def set_divideCell( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "divideCell", valstr )
    def get_divideCell( self ) :
        self.getParamValue( "divideCell" )

    def set_maxOutOfDomain( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "maxOutOfDomain", valstr )
    def get_maxOutOfDomain( self ) :
        self.getParamValue( "maxOutOfDomain" )

    def set_NoWThreads( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "NoWThreads", valstr )
    def get_NoWThreads( self ) :
        self.getParamValue( "NoWThreads" )

    def set_SearchLevel( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "SearchLevel", valstr )
    def get_SearchLevel( self ) :
        self.getParamValue( "SearchLevel" )

    def set_SkipInitialSteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "SkipInitialSteps", valstr )
    def get_SkipInitialSteps( self ) :
        self.getParamValue( "SkipInitialSteps" )

    def set_color( self, x ) :
        valstr = x 
        self.setParamValue( "color", valstr )
    def get_color( self ) :
        self.getParamValue( "color" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Tracer/TracerComp
#
class  TracerComp(CoviseModule):
#==================================
    name_ =  "TracerComp"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'startStyle': {'line': 1, 'plane': 2, 'free': 3}, 'taskType': {'Streaklines': 4, 'Streamlines': 1, 'Moving Points': 2, 'Pathlines': 3}, 'tdirection': {'forward': 1, 'both': 3, 'backward': 2}, 'whatout': {'v': 7, 'v_x': 2, 'v_y': 3, 'v_z': 4, 'mag': 1, 'time': 5, 'id': 6}}

        # IN ports
        self.addPort( "meshIn" ,"UniformGrid|RectilinearGrid|StructuredGrid|UnstructuredGrid|Polygons", "IN")
        self.addPort( "dataIn" ,"Vec3|Vec3", "IN")
        self.addPort( "pointsIn" ,"Points|UnstructuredGrid|Polygons|TriangleStrips|Lines|Vec3", "IN")
        self.addPort( "octtreesIn" ,"OctTree|OctTreeP", "IN")
        self.addPort( "fieldIn" ,"Float|Float", "IN")
        self.addPort( "colorMapIn" ,"ColorMap", "IN")
        self.addPort( "SampleGeom" ,"UniformGrid", "IN")
        self.addPort( "SampleData" ,"Vec3", "IN")

        # OUT ports
        self.addPort( "geometry" ,"Geometry", "OUT")
        self.addPort( "lines" ,"Lines|Points|TriangleStrips", "OUT")
        self.addPort( "dataOut" ,"Float|Vector", "OUT")
        self.addPort( "startingPoints" ,"Points", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "no_startp", "IntSlider", "IMM")
        self.addParam( "startpoint1", "FloatVector", "IMM")
        self.addParam( "startpoint2", "FloatVector", "IMM")
        self.addParam( "direction", "FloatVector", "IMM")
        self.addParam( "cyl_axis", "FloatVector", "IMM")
        self.addParam( "cyl_radius", "FloatScalar", "IMM")
        self.addParam( "cyl_height", "FloatScalar", "IMM")
        self.addParam( "cyl_bottompoint_on_axis", "FloatVector", "IMM")
        self.addParam( "Displacement", "FloatVector", "IMM")
        self.addParam( "tdirection", "Choice", "IMM")
        self.addParam( "whatout", "Choice", "IMM")
        self.addParam( "taskType", "Choice", "IMM")
        self.addParam( "startStyle", "Choice", "IMM")
        self.addParam( "trace_eps", "FloatScalar", "IMM")
        self.addParam( "trace_abs", "FloatScalar", "IMM")
        self.addParam( "grid_tol", "FloatScalar", "IMM")
        self.addParam( "trace_len", "FloatScalar", "IMM")
        self.addParam( "min_vel", "FloatScalar", "IMM")
        self.addParam( "MaxPoints", "IntScalar", "IMM")
        self.addParam( "stepDuration", "FloatScalar", "IMM")
        self.addParam( "NoCycles", "IntScalar", "IMM")
        self.addParam( "NoInterpolation", "Boolean", "IMM")
        self.addParam( "ThrowNewParticles", "Boolean", "IMM")
        self.addParam( "ParticlesReleaseRate", "FloatScalar", "IMM")
        self.addParam( "divideCell", "FloatScalar", "IMM")
        self.addParam( "maxOutOfDomain", "FloatScalar", "IMM")
        self.addParam( "NoWThreads", "IntScalar", "IMM")
        self.addParam( "SearchLevel", "IntScalar", "IMM")
        self.addParam( "SkipInitialSteps", "IntScalar", "IMM")
        self.addParam( "color", "String", "IMM")
        self.addParam( "SphereRadius", "FloatScalar", "IMM")
        self.addParam( "TubeWidth", "FloatScalar", "IMM")
        self.addParam( "TrailLength", "IntScalar", "IMM")
        self.addParam( "FreeStartPoints", "String", "IMM")
        self.addParam( "MinMax", "FloatVector", "IMM")
        self.addParam( "autoScales", "Boolean", "IMM")

    #     2. create parameter set members
    def set_no_startp( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "no_startp", valstr )
    def get_no_startp( self ) :
        self.getParamValue( "no_startp" )

    def set_startpoint1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "startpoint1", valstr )
    def get_startpoint1( self ) :
        self.getParamValue( "startpoint1" )

    def set_startpoint2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "startpoint2", valstr )
    def get_startpoint2( self ) :
        self.getParamValue( "startpoint2" )

    def set_direction( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "direction", valstr )
    def get_direction( self ) :
        self.getParamValue( "direction" )

    def set_cyl_axis( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "cyl_axis", valstr )
    def get_cyl_axis( self ) :
        self.getParamValue( "cyl_axis" )

    def set_cyl_radius( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "cyl_radius", valstr )
    def get_cyl_radius( self ) :
        self.getParamValue( "cyl_radius" )

    def set_cyl_height( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "cyl_height", valstr )
    def get_cyl_height( self ) :
        self.getParamValue( "cyl_height" )

    def set_cyl_bottompoint_on_axis( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "cyl_bottompoint_on_axis", valstr )
    def get_cyl_bottompoint_on_axis( self ) :
        self.getParamValue( "cyl_bottompoint_on_axis" )

    def set_Displacement( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Displacement", valstr )
    def get_Displacement( self ) :
        self.getParamValue( "Displacement" )

    def set_tdirection( self, x ) :
        valstr = x 
        self.setParamValue( "tdirection", valstr )
    def get_tdirection( self ) :
        self.getParamValue( "tdirection" )

    def set_whatout( self, x ) :
        valstr = x 
        self.setParamValue( "whatout", valstr )
    def get_whatout( self ) :
        self.getParamValue( "whatout" )

    def set_taskType( self, x ) :
        valstr = x 
        self.setParamValue( "taskType", valstr )
    def get_taskType( self ) :
        self.getParamValue( "taskType" )

    def set_startStyle( self, x ) :
        valstr = x 
        self.setParamValue( "startStyle", valstr )
    def get_startStyle( self ) :
        self.getParamValue( "startStyle" )

    def set_trace_eps( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "trace_eps", valstr )
    def get_trace_eps( self ) :
        self.getParamValue( "trace_eps" )

    def set_trace_abs( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "trace_abs", valstr )
    def get_trace_abs( self ) :
        self.getParamValue( "trace_abs" )

    def set_grid_tol( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "grid_tol", valstr )
    def get_grid_tol( self ) :
        self.getParamValue( "grid_tol" )

    def set_trace_len( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "trace_len", valstr )
    def get_trace_len( self ) :
        self.getParamValue( "trace_len" )

    def set_min_vel( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "min_vel", valstr )
    def get_min_vel( self ) :
        self.getParamValue( "min_vel" )

    def set_MaxPoints( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "MaxPoints", valstr )
    def get_MaxPoints( self ) :
        self.getParamValue( "MaxPoints" )

    def set_stepDuration( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "stepDuration", valstr )
    def get_stepDuration( self ) :
        self.getParamValue( "stepDuration" )

    def set_NoCycles( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "NoCycles", valstr )
    def get_NoCycles( self ) :
        self.getParamValue( "NoCycles" )

    def set_NoInterpolation( self, x ) :
        valstr = x 
        self.setParamValue( "NoInterpolation", valstr )
    def get_NoInterpolation( self ) :
        self.getParamValue( "NoInterpolation" )

    def set_ThrowNewParticles( self, x ) :
        valstr = x 
        self.setParamValue( "ThrowNewParticles", valstr )
    def get_ThrowNewParticles( self ) :
        self.getParamValue( "ThrowNewParticles" )

    def set_ParticlesReleaseRate( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "ParticlesReleaseRate", valstr )
    def get_ParticlesReleaseRate( self ) :
        self.getParamValue( "ParticlesReleaseRate" )

    def set_divideCell( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "divideCell", valstr )
    def get_divideCell( self ) :
        self.getParamValue( "divideCell" )

    def set_maxOutOfDomain( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "maxOutOfDomain", valstr )
    def get_maxOutOfDomain( self ) :
        self.getParamValue( "maxOutOfDomain" )

    def set_NoWThreads( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "NoWThreads", valstr )
    def get_NoWThreads( self ) :
        self.getParamValue( "NoWThreads" )

    def set_SearchLevel( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "SearchLevel", valstr )
    def get_SearchLevel( self ) :
        self.getParamValue( "SearchLevel" )

    def set_SkipInitialSteps( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "SkipInitialSteps", valstr )
    def get_SkipInitialSteps( self ) :
        self.getParamValue( "SkipInitialSteps" )

    def set_color( self, x ) :
        valstr = x 
        self.setParamValue( "color", valstr )
    def get_color( self ) :
        self.getParamValue( "color" )

    def set_SphereRadius( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "SphereRadius", valstr )
    def get_SphereRadius( self ) :
        self.getParamValue( "SphereRadius" )

    def set_TubeWidth( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "TubeWidth", valstr )
    def get_TubeWidth( self ) :
        self.getParamValue( "TubeWidth" )

    def set_TrailLength( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "TrailLength", valstr )
    def get_TrailLength( self ) :
        self.getParamValue( "TrailLength" )

    def set_FreeStartPoints( self, x ) :
        valstr = x 
        self.setParamValue( "FreeStartPoints", valstr )
    def get_FreeStartPoints( self ) :
        self.getParamValue( "FreeStartPoints" )

    def set_MinMax( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "MinMax", valstr )
    def get_MinMax( self ) :
        self.getParamValue( "MinMax" )

    def set_autoScales( self, x ) :
        valstr = x 
        self.setParamValue( "autoScales", valstr )
    def get_autoScales( self ) :
        self.getParamValue( "autoScales" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/SCA/ControlSCA
#
class  ControlSCA(CoviseModule):
#==================================
    name_ =  "ControlSCA"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'noppenForm': {'Circle': 3, 'Diamant': 1, 'Ellipse': 2}, 'free_or_param': {'Parametric': 3, 'Parametric or free design': 1, 'Free': 2}, 'dbaseShape': {'My knob': 1}, 'presentationMode': {'Sheet': 1, 'Roll': 2}, 'Derived_Solution': {'Stresses': 2, 'Elastic strains': 3, 'none': 1, 'Creep strains': 5, 'Plastic strains': 4}, 'Solution': {'Please enter your choice': 1, 'ElementData': 4, 'NodeData': 3, 'OnlyGeometry': 2}, 'whatExecute': {'Please, enter leaf size': 1, 'ReadANSYS': 7, 'TissueVisualisation': 5, 'Embossing': 4, 'Design': 3, 'Zug': 6, 'KnobSelect': 2}, 'tissueTyp': {'HHT': 5, 'Slush': 2, 'TAD_Toipa': 1, 'HHTConvent': 4, 'BSQ_A': 6, 'DoubleVelvet': 3}, 'DOF_Solution': {'ROTY': 7, 'ROTX': 6, 'none': 1, 'ROTZ': 8, 'UY': 3, 'UX': 2, 'UZ': 4, 'U': 5, 'ROT': 9}, 'DataBaseStrategy': {'My knob': 1}, 'TopBottom': {'Top': 1, 'Average': 3, 'Bottom': 2}, 'SheetDimensions': {'K\xfct\xfc246x230': 5, 'K\xfct\xfc246x260': 4, 'Toipa125x110': 3, 'Custom': 6, 'Toipa125x98': 1, 'Toipa140x98': 2}, 'SolidShellComponents': {'TIGE': 12, 'none': 1, 'T2': 9, 'YZ': 6, 'T3': 10, 'T1': 8, 'YY': 3, 'XX': 2, 'XY': 5, 'ZX': 7, 'ZZ': 4, 'TI': 11}}

        # IN ports

        # OUT ports
        self.addPort( "knobParams" ,"Text", "OUT")
        self.addPort( "designParams" ,"Text", "OUT")
        self.addPort( "praegeParams" ,"Text", "OUT")
        self.addPort( "zugParams" ,"Text", "OUT")
        self.addPort( "Blat" ,"Lines", "OUT")
        self.addPort( "COVERInteractor" ,"Points", "OUT")
        self.addPort( "cutX" ,"Text", "OUT")
        self.addPort( "cutY" ,"Text", "OUT")
        self.addPort( "PaperImage" ,"Text", "OUT")
        self.addPort( "BaseImage" ,"Text", "OUT")
        self.addPort( "PappeImage" ,"Text", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "SheetDimensions", "Choice", "IMM")
        self.addParam( "blatHoehe", "FloatSlider", "IMM")
        self.addParam( "blatBreite", "FloatSlider", "IMM")
        self.addParam( "whatExecute", "Choice", "IMM")
        self.addParam( "dbaseShape", "Choice", "IMM")
        self.addParam( "noppenHoehe", "FloatSlider", "IMM")
        self.addParam( "ausrundungsRadius", "FloatSlider", "IMM")
        self.addParam( "abnutzungsRadius", "FloatSlider", "IMM")
        self.addParam( "noppenWinkel", "FloatSlider", "IMM")
        self.addParam( "noppenForm", "Choice", "IMM")
        self.addParam( "laenge1", "FloatSlider", "IMM")
        self.addParam( "laenge2", "FloatSlider", "IMM")
        self.addParam( "Tolerance", "FloatScalar", "IMM")
        self.addParam( "free_or_param", "Choice", "IMM")
        self.addParam( "cad_datei", "Browser", "IMM")
        self.addParam( "cad_datei___filter", "BrowserFilter", "IMM")
        self.addParam( "grundZellenHoehe", "FloatSlider", "IMM")
        self.addParam( "grundZellenBreite", "FloatSlider", "IMM")
        self.addParam( "NumPoints", "IntScalar", "IMM")
        self.addParam( "Noppen_1", "FloatVector", "IMM")
        self.addParam( "Noppen_2", "FloatVector", "IMM")
        self.addParam( "Noppen_3", "FloatVector", "IMM")
        self.addParam( "Noppen_4", "FloatVector", "IMM")
        self.addParam( "Noppen_5", "FloatVector", "IMM")
        self.addParam( "Noppen_6", "FloatVector", "IMM")
        self.addParam( "Noppen_7", "FloatVector", "IMM")
        self.addParam( "Noppen_8", "FloatVector", "IMM")
        self.addParam( "Noppen_9", "FloatVector", "IMM")
        self.addParam( "Noppen_10", "FloatVector", "IMM")
        self.addParam( "Noppen_11", "FloatVector", "IMM")
        self.addParam( "Noppen_12", "FloatVector", "IMM")
        self.addParam( "Noppen_13", "FloatVector", "IMM")
        self.addParam( "Noppen_14", "FloatVector", "IMM")
        self.addParam( "Noppen_15", "FloatVector", "IMM")
        self.addParam( "Noppen_16", "FloatVector", "IMM")
        self.addParam( "Noppen_17", "FloatVector", "IMM")
        self.addParam( "Noppen_18", "FloatVector", "IMM")
        self.addParam( "Noppen_19", "FloatVector", "IMM")
        self.addParam( "Noppen_20", "FloatVector", "IMM")
        self.addParam( "Noppen_21", "FloatVector", "IMM")
        self.addParam( "Noppen_22", "FloatVector", "IMM")
        self.addParam( "Noppen_23", "FloatVector", "IMM")
        self.addParam( "Noppen_24", "FloatVector", "IMM")
        self.addParam( "Noppen_25", "FloatVector", "IMM")
        self.addParam( "Noppen_26", "FloatVector", "IMM")
        self.addParam( "Noppen_27", "FloatVector", "IMM")
        self.addParam( "Noppen_28", "FloatVector", "IMM")
        self.addParam( "Noppen_29", "FloatVector", "IMM")
        self.addParam( "Noppen_30", "FloatVector", "IMM")
        self.addParam( "Noppen_31", "FloatVector", "IMM")
        self.addParam( "Noppen_32", "FloatVector", "IMM")
        self.addParam( "Noppen_33", "FloatVector", "IMM")
        self.addParam( "Noppen_34", "FloatVector", "IMM")
        self.addParam( "Noppen_35", "FloatVector", "IMM")
        self.addParam( "Noppen_36", "FloatVector", "IMM")
        self.addParam( "Noppen_37", "FloatVector", "IMM")
        self.addParam( "Noppen_38", "FloatVector", "IMM")
        self.addParam( "Noppen_39", "FloatVector", "IMM")
        self.addParam( "Noppen_40", "FloatVector", "IMM")
        self.addParam( "Noppen_41", "FloatVector", "IMM")
        self.addParam( "Noppen_42", "FloatVector", "IMM")
        self.addParam( "Noppen_43", "FloatVector", "IMM")
        self.addParam( "Noppen_44", "FloatVector", "IMM")
        self.addParam( "Noppen_45", "FloatVector", "IMM")
        self.addParam( "Noppen_46", "FloatVector", "IMM")
        self.addParam( "Noppen_47", "FloatVector", "IMM")
        self.addParam( "Noppen_48", "FloatVector", "IMM")
        self.addParam( "Noppen_49", "FloatVector", "IMM")
        self.addParam( "Noppen_50", "FloatVector", "IMM")
        self.addParam( "Winkel", "FloatSlider", "IMM")
        self.addParam( "KnobDistance", "FloatSlider", "IMM")
        self.addParam( "DanzahlReplikationenX", "IntSlider", "IMM")
        self.addParam( "DanzahlReplikationenY", "IntSlider", "IMM")
        self.addParam( "startEmbossing", "Boolean", "IMM")
        self.addParam( "DataBaseStrategy", "Choice", "IMM")
        self.addParam( "tissueTyp", "Choice", "IMM")
        self.addParam( "gummiHaerte", "FloatSlider", "IMM")
        self.addParam( "anpressDruck", "FloatSlider", "IMM")
        self.addParam( "anzahlReplikationenX", "IntSlider", "IMM")
        self.addParam( "anzahlReplikationenY", "IntSlider", "IMM")
        self.addParam( "presentationMode", "Choice", "IMM")
        self.addParam( "barrelDiameter", "FloatSlider", "IMM")
        self.addParam( "thicknessInterpolation", "FloatSlider", "IMM")
        self.addParam( "NumberOfSheets", "IntSlider", "IMM")
        self.addParam( "Displacement", "IntSlider", "IMM")
        self.addParam( "NumOutPoints", "IntSlider", "IMM")
        self.addParam( "Solution", "Choice", "IMM")
        self.addParam( "DOF_Solution", "Choice", "IMM")
        self.addParam( "Derived_Solution", "Choice", "IMM")
        self.addParam( "SolidShellComponents", "Choice", "IMM")
        self.addParam( "TopBottom", "Choice", "IMM")
        self.addParam( "anzahlLinien", "IntSlider", "IMM")
        self.addParam( "anzahlPunkteProLinie", "IntSlider", "IMM")
        self.addParam( "versatz", "IntSlider", "IMM")

    #     2. create parameter set members
    def set_SheetDimensions( self, x ) :
        valstr = x 
        self.setParamValue( "SheetDimensions", valstr )
    def get_SheetDimensions( self ) :
        self.getParamValue( "SheetDimensions" )

    def set_blatHoehe( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "blatHoehe", valstr )
    def get_blatHoehe( self ) :
        self.getParamValue( "blatHoehe" )

    def set_blatBreite( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "blatBreite", valstr )
    def get_blatBreite( self ) :
        self.getParamValue( "blatBreite" )

    def set_whatExecute( self, x ) :
        valstr = x 
        self.setParamValue( "whatExecute", valstr )
    def get_whatExecute( self ) :
        self.getParamValue( "whatExecute" )

    def set_dbaseShape( self, x ) :
        valstr = x 
        self.setParamValue( "dbaseShape", valstr )
    def get_dbaseShape( self ) :
        self.getParamValue( "dbaseShape" )

    def set_noppenHoehe( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "noppenHoehe", valstr )
    def get_noppenHoehe( self ) :
        self.getParamValue( "noppenHoehe" )

    def set_ausrundungsRadius( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "ausrundungsRadius", valstr )
    def get_ausrundungsRadius( self ) :
        self.getParamValue( "ausrundungsRadius" )

    def set_abnutzungsRadius( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "abnutzungsRadius", valstr )
    def get_abnutzungsRadius( self ) :
        self.getParamValue( "abnutzungsRadius" )

    def set_noppenWinkel( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "noppenWinkel", valstr )
    def get_noppenWinkel( self ) :
        self.getParamValue( "noppenWinkel" )

    def set_noppenForm( self, x ) :
        valstr = x 
        self.setParamValue( "noppenForm", valstr )
    def get_noppenForm( self ) :
        self.getParamValue( "noppenForm" )

    def set_laenge1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "laenge1", valstr )
    def get_laenge1( self ) :
        self.getParamValue( "laenge1" )

    def set_laenge2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "laenge2", valstr )
    def get_laenge2( self ) :
        self.getParamValue( "laenge2" )

    def set_Tolerance( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "Tolerance", valstr )
    def get_Tolerance( self ) :
        self.getParamValue( "Tolerance" )

    def set_free_or_param( self, x ) :
        valstr = x 
        self.setParamValue( "free_or_param", valstr )
    def get_free_or_param( self ) :
        self.getParamValue( "free_or_param" )

    def set_cad_datei( self, x ) :
        valstr = x 
        self.setParamValue( "cad_datei", valstr )
    def get_cad_datei( self ) :
        self.getParamValue( "cad_datei" )

    def set_cad_datei___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "cad_datei___filter", valstr )
    def get_cad_datei___filter( self ) :
        self.getParamValue( "cad_datei___filter" )

    def set_grundZellenHoehe( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "grundZellenHoehe", valstr )
    def get_grundZellenHoehe( self ) :
        self.getParamValue( "grundZellenHoehe" )

    def set_grundZellenBreite( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "grundZellenBreite", valstr )
    def get_grundZellenBreite( self ) :
        self.getParamValue( "grundZellenBreite" )

    def set_NumPoints( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "NumPoints", valstr )
    def get_NumPoints( self ) :
        self.getParamValue( "NumPoints" )

    def set_Noppen_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_1", valstr )
    def get_Noppen_1( self ) :
        self.getParamValue( "Noppen_1" )

    def set_Noppen_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_2", valstr )
    def get_Noppen_2( self ) :
        self.getParamValue( "Noppen_2" )

    def set_Noppen_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_3", valstr )
    def get_Noppen_3( self ) :
        self.getParamValue( "Noppen_3" )

    def set_Noppen_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_4", valstr )
    def get_Noppen_4( self ) :
        self.getParamValue( "Noppen_4" )

    def set_Noppen_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_5", valstr )
    def get_Noppen_5( self ) :
        self.getParamValue( "Noppen_5" )

    def set_Noppen_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_6", valstr )
    def get_Noppen_6( self ) :
        self.getParamValue( "Noppen_6" )

    def set_Noppen_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_7", valstr )
    def get_Noppen_7( self ) :
        self.getParamValue( "Noppen_7" )

    def set_Noppen_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_8", valstr )
    def get_Noppen_8( self ) :
        self.getParamValue( "Noppen_8" )

    def set_Noppen_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_9", valstr )
    def get_Noppen_9( self ) :
        self.getParamValue( "Noppen_9" )

    def set_Noppen_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_10", valstr )
    def get_Noppen_10( self ) :
        self.getParamValue( "Noppen_10" )

    def set_Noppen_11( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_11", valstr )
    def get_Noppen_11( self ) :
        self.getParamValue( "Noppen_11" )

    def set_Noppen_12( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_12", valstr )
    def get_Noppen_12( self ) :
        self.getParamValue( "Noppen_12" )

    def set_Noppen_13( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_13", valstr )
    def get_Noppen_13( self ) :
        self.getParamValue( "Noppen_13" )

    def set_Noppen_14( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_14", valstr )
    def get_Noppen_14( self ) :
        self.getParamValue( "Noppen_14" )

    def set_Noppen_15( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_15", valstr )
    def get_Noppen_15( self ) :
        self.getParamValue( "Noppen_15" )

    def set_Noppen_16( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_16", valstr )
    def get_Noppen_16( self ) :
        self.getParamValue( "Noppen_16" )

    def set_Noppen_17( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_17", valstr )
    def get_Noppen_17( self ) :
        self.getParamValue( "Noppen_17" )

    def set_Noppen_18( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_18", valstr )
    def get_Noppen_18( self ) :
        self.getParamValue( "Noppen_18" )

    def set_Noppen_19( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_19", valstr )
    def get_Noppen_19( self ) :
        self.getParamValue( "Noppen_19" )

    def set_Noppen_20( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_20", valstr )
    def get_Noppen_20( self ) :
        self.getParamValue( "Noppen_20" )

    def set_Noppen_21( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_21", valstr )
    def get_Noppen_21( self ) :
        self.getParamValue( "Noppen_21" )

    def set_Noppen_22( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_22", valstr )
    def get_Noppen_22( self ) :
        self.getParamValue( "Noppen_22" )

    def set_Noppen_23( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_23", valstr )
    def get_Noppen_23( self ) :
        self.getParamValue( "Noppen_23" )

    def set_Noppen_24( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_24", valstr )
    def get_Noppen_24( self ) :
        self.getParamValue( "Noppen_24" )

    def set_Noppen_25( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_25", valstr )
    def get_Noppen_25( self ) :
        self.getParamValue( "Noppen_25" )

    def set_Noppen_26( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_26", valstr )
    def get_Noppen_26( self ) :
        self.getParamValue( "Noppen_26" )

    def set_Noppen_27( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_27", valstr )
    def get_Noppen_27( self ) :
        self.getParamValue( "Noppen_27" )

    def set_Noppen_28( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_28", valstr )
    def get_Noppen_28( self ) :
        self.getParamValue( "Noppen_28" )

    def set_Noppen_29( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_29", valstr )
    def get_Noppen_29( self ) :
        self.getParamValue( "Noppen_29" )

    def set_Noppen_30( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_30", valstr )
    def get_Noppen_30( self ) :
        self.getParamValue( "Noppen_30" )

    def set_Noppen_31( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_31", valstr )
    def get_Noppen_31( self ) :
        self.getParamValue( "Noppen_31" )

    def set_Noppen_32( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_32", valstr )
    def get_Noppen_32( self ) :
        self.getParamValue( "Noppen_32" )

    def set_Noppen_33( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_33", valstr )
    def get_Noppen_33( self ) :
        self.getParamValue( "Noppen_33" )

    def set_Noppen_34( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_34", valstr )
    def get_Noppen_34( self ) :
        self.getParamValue( "Noppen_34" )

    def set_Noppen_35( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_35", valstr )
    def get_Noppen_35( self ) :
        self.getParamValue( "Noppen_35" )

    def set_Noppen_36( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_36", valstr )
    def get_Noppen_36( self ) :
        self.getParamValue( "Noppen_36" )

    def set_Noppen_37( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_37", valstr )
    def get_Noppen_37( self ) :
        self.getParamValue( "Noppen_37" )

    def set_Noppen_38( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_38", valstr )
    def get_Noppen_38( self ) :
        self.getParamValue( "Noppen_38" )

    def set_Noppen_39( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_39", valstr )
    def get_Noppen_39( self ) :
        self.getParamValue( "Noppen_39" )

    def set_Noppen_40( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_40", valstr )
    def get_Noppen_40( self ) :
        self.getParamValue( "Noppen_40" )

    def set_Noppen_41( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_41", valstr )
    def get_Noppen_41( self ) :
        self.getParamValue( "Noppen_41" )

    def set_Noppen_42( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_42", valstr )
    def get_Noppen_42( self ) :
        self.getParamValue( "Noppen_42" )

    def set_Noppen_43( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_43", valstr )
    def get_Noppen_43( self ) :
        self.getParamValue( "Noppen_43" )

    def set_Noppen_44( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_44", valstr )
    def get_Noppen_44( self ) :
        self.getParamValue( "Noppen_44" )

    def set_Noppen_45( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_45", valstr )
    def get_Noppen_45( self ) :
        self.getParamValue( "Noppen_45" )

    def set_Noppen_46( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_46", valstr )
    def get_Noppen_46( self ) :
        self.getParamValue( "Noppen_46" )

    def set_Noppen_47( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_47", valstr )
    def get_Noppen_47( self ) :
        self.getParamValue( "Noppen_47" )

    def set_Noppen_48( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_48", valstr )
    def get_Noppen_48( self ) :
        self.getParamValue( "Noppen_48" )

    def set_Noppen_49( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_49", valstr )
    def get_Noppen_49( self ) :
        self.getParamValue( "Noppen_49" )

    def set_Noppen_50( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Noppen_50", valstr )
    def get_Noppen_50( self ) :
        self.getParamValue( "Noppen_50" )

    def set_Winkel( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "Winkel", valstr )
    def get_Winkel( self ) :
        self.getParamValue( "Winkel" )

    def set_KnobDistance( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "KnobDistance", valstr )
    def get_KnobDistance( self ) :
        self.getParamValue( "KnobDistance" )

    def set_DanzahlReplikationenX( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "DanzahlReplikationenX", valstr )
    def get_DanzahlReplikationenX( self ) :
        self.getParamValue( "DanzahlReplikationenX" )

    def set_DanzahlReplikationenY( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "DanzahlReplikationenY", valstr )
    def get_DanzahlReplikationenY( self ) :
        self.getParamValue( "DanzahlReplikationenY" )

    def set_startEmbossing( self, x ) :
        valstr = x 
        self.setParamValue( "startEmbossing", valstr )
    def get_startEmbossing( self ) :
        self.getParamValue( "startEmbossing" )

    def set_DataBaseStrategy( self, x ) :
        valstr = x 
        self.setParamValue( "DataBaseStrategy", valstr )
    def get_DataBaseStrategy( self ) :
        self.getParamValue( "DataBaseStrategy" )

    def set_tissueTyp( self, x ) :
        valstr = x 
        self.setParamValue( "tissueTyp", valstr )
    def get_tissueTyp( self ) :
        self.getParamValue( "tissueTyp" )

    def set_gummiHaerte( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "gummiHaerte", valstr )
    def get_gummiHaerte( self ) :
        self.getParamValue( "gummiHaerte" )

    def set_anpressDruck( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "anpressDruck", valstr )
    def get_anpressDruck( self ) :
        self.getParamValue( "anpressDruck" )

    def set_anzahlReplikationenX( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "anzahlReplikationenX", valstr )
    def get_anzahlReplikationenX( self ) :
        self.getParamValue( "anzahlReplikationenX" )

    def set_anzahlReplikationenY( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "anzahlReplikationenY", valstr )
    def get_anzahlReplikationenY( self ) :
        self.getParamValue( "anzahlReplikationenY" )

    def set_presentationMode( self, x ) :
        valstr = x 
        self.setParamValue( "presentationMode", valstr )
    def get_presentationMode( self ) :
        self.getParamValue( "presentationMode" )

    def set_barrelDiameter( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "barrelDiameter", valstr )
    def get_barrelDiameter( self ) :
        self.getParamValue( "barrelDiameter" )

    def set_thicknessInterpolation( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "thicknessInterpolation", valstr )
    def get_thicknessInterpolation( self ) :
        self.getParamValue( "thicknessInterpolation" )

    def set_NumberOfSheets( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "NumberOfSheets", valstr )
    def get_NumberOfSheets( self ) :
        self.getParamValue( "NumberOfSheets" )

    def set_Displacement( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "Displacement", valstr )
    def get_Displacement( self ) :
        self.getParamValue( "Displacement" )

    def set_NumOutPoints( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "NumOutPoints", valstr )
    def get_NumOutPoints( self ) :
        self.getParamValue( "NumOutPoints" )

    def set_Solution( self, x ) :
        valstr = x 
        self.setParamValue( "Solution", valstr )
    def get_Solution( self ) :
        self.getParamValue( "Solution" )

    def set_DOF_Solution( self, x ) :
        valstr = x 
        self.setParamValue( "DOF_Solution", valstr )
    def get_DOF_Solution( self ) :
        self.getParamValue( "DOF_Solution" )

    def set_Derived_Solution( self, x ) :
        valstr = x 
        self.setParamValue( "Derived_Solution", valstr )
    def get_Derived_Solution( self ) :
        self.getParamValue( "Derived_Solution" )

    def set_SolidShellComponents( self, x ) :
        valstr = x 
        self.setParamValue( "SolidShellComponents", valstr )
    def get_SolidShellComponents( self ) :
        self.getParamValue( "SolidShellComponents" )

    def set_TopBottom( self, x ) :
        valstr = x 
        self.setParamValue( "TopBottom", valstr )
    def get_TopBottom( self ) :
        self.getParamValue( "TopBottom" )

    def set_anzahlLinien( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "anzahlLinien", valstr )
    def get_anzahlLinien( self ) :
        self.getParamValue( "anzahlLinien" )

    def set_anzahlPunkteProLinie( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "anzahlPunkteProLinie", valstr )
    def get_anzahlPunkteProLinie( self ) :
        self.getParamValue( "anzahlPunkteProLinie" )

    def set_versatz( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "versatz", valstr )
    def get_versatz( self ) :
        self.getParamValue( "versatz" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/SCA/Design
#
class  Design(CoviseModule):
#==================================
    name_ =  "Design"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "DesignParam" ,"coDoText", "IN")
        self.addPort( "Knob" ,"coDoPolygons", "IN")

        # OUT ports
        self.addPort( "Grundzelle" ,"coDoPolygons", "OUT")
        self.addPort( "NoppenPositionen" ,"coDoPoints", "OUT")
        self.addPort( "NoppenColors" ,"coDoFloat", "OUT")
        self.addPort( "ShowGrundzelle" ,"coDoPolygons", "OUT")
        self.addPort( "ShowKnobs" ,"coDoPolygons", "OUT")
        self.addPort( "ShowNoppenColors" ,"coDoFloat", "OUT")
        self.addPort( "ShowKnobProfiles" ,"coDoLines", "OUT")
        self.addPort( "ShowPhysKnobProfiles" ,"coDoLines", "OUT")
        self.addPort( "cutX" ,"coDoText", "OUT")
        self.addPort( "cutY" ,"coDoText", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "tolerance", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_tolerance( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "tolerance", valstr )
    def get_tolerance( self ) :
        self.getParamValue( "tolerance" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/SCA/Embossing
#
class  Embossing(CoviseModule):
#==================================
    name_ =  "Embossing"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "PraegeParam" ,"coDoText", "IN")
        self.addPort( "Domain" ,"coDoPolygons", "IN")
        self.addPort( "NoppenPoints" ,"coDoPoints", "IN")
        self.addPort( "NoppenColors" ,"coDoFloat", "IN")
        self.addPort( "WaitForLSDyna" ,"coDoText", "IN")

        # OUT ports
        self.addPort( "VernetzteGrundZelle" ,"coDoPolygons", "OUT")
        self.addPort( "permitTraction" ,"coDoText", "OUT")
        self.addPort( "Image" ,"coDoText", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/SCA/EmbossingSimulation
#
class  EmbossingSimulation(CoviseModule):
#==================================
    name_ =  "EmbossingSimulation"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "PraegeParam" ,"coDoText", "IN")
        self.addPort( "NoppenColors" ,"coDoFloat", "IN")

        # OUT ports
        self.addPort( "SimulationOutcome" ,"coDoText", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "ndivMet", "IntSlider", "IMM")
        self.addParam( "ndivPap", "IntSlider", "IMM")

    #     2. create parameter set members
    def set_ndivMet( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "ndivMet", valstr )
    def get_ndivMet( self ) :
        self.getParamValue( "ndivMet" )

    def set_ndivPap( self, x, y, z ) :
        valstr =  "%d" % x + " %d" % y + " %d" % z 
        self.setParamValue( "ndivPap", valstr )
    def get_ndivPap( self ) :
        self.getParamValue( "ndivPap" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/SCA/KnobShape
#
class  KnobShape(CoviseModule):
#==================================
    name_ =  "KnobShape"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "KnobParam" ,"coDoText", "IN")

        # OUT ports
        self.addPort( "TheKnob" ,"coDoPolygons", "OUT")
        self.addPort( "TheNormals" ,"coDoVec3|DO_Unstructured_V3D_Normals", "OUT")
        self.addPort( "TheSameKnob" ,"coDoPolygons", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "AbrasionDiv", "IntScalar", "IMM")
        self.addParam( "RoundingDiv", "IntScalar", "IMM")
        self.addParam( "Tolerance", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_AbrasionDiv( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "AbrasionDiv", valstr )
    def get_AbrasionDiv( self ) :
        self.getParamValue( "AbrasionDiv" )

    def set_RoundingDiv( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "RoundingDiv", valstr )
    def get_RoundingDiv( self ) :
        self.getParamValue( "RoundingDiv" )

    def set_Tolerance( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "Tolerance", valstr )
    def get_Tolerance( self ) :
        self.getParamValue( "Tolerance" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/SCA/MergeAndNormals
#
class  MergeAndNormals(CoviseModule):
#==================================
    name_ =  "MergeAndNormals"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "InGeometry" ,"coDoPolygons|coDoLines", "IN")
        self.addPort( "InNormals" ,"coDoVec3", "IN")
        self.addPort( "Text" ,"coDoText", "IN")

        # OUT ports
        self.addPort( "OutGeometry" ,"coDoPolygons|coDoLines", "OUT")
        self.addPort( "OutNormals" ,"coDoVec3|DO_Unstructured_V3D_Normals", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/SCA/PolyToCyl
#
class  PolyToCyl(CoviseModule):
#==================================
    name_ =  "PolyToCyl"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "poly_in" ,"Set_Lines|Set_Polygons", "IN")
        self.addPort( "box_in" ,"coDoLines", "IN")

        # OUT ports
        self.addPort( "poly_out" ,"Set_Lines|Set_Polygons", "OUT")
        self.addPort( "surf_out" ,"Set_Polygons", "OUT")
        self.addPort( "inlet" ,"Set_Polygons", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "create_torus", "Boolean", "IMM")
        self.addParam( "barrelDiameter", "FloatScalar", "IMM")
        self.addParam( "factor", "IntScalar", "IMM")
        self.addParam( "use_factor", "Boolean", "IMM")

    #     2. create parameter set members
    def set_create_torus( self, x ) :
        valstr = x 
        self.setParamValue( "create_torus", valstr )
    def get_create_torus( self ) :
        self.getParamValue( "create_torus" )

    def set_barrelDiameter( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "barrelDiameter", valstr )
    def get_barrelDiameter( self ) :
        self.getParamValue( "barrelDiameter" )

    def set_factor( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "factor", valstr )
    def get_factor( self ) :
        self.getParamValue( "factor" )

    def set_use_factor( self, x ) :
        valstr = x 
        self.setParamValue( "use_factor", valstr )
    def get_use_factor( self ) :
        self.getParamValue( "use_factor" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/SCA/Traction
#
class  Traction(CoviseModule):
#==================================
    name_ =  "Traction"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "zug_param" ,"coDoText", "IN")
        self.addPort( "mssgFromEmbossing" ,"coDoText", "IN")

        # OUT ports
        self.addPort( "file_name" ,"coDoText", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Simulation/StarCD
#
class  StarCD(CoviseModule):
#==================================
    name_ =  "StarCD"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {'region': {'Select inlet region': 1, 'Region 14': 16, 'Region 15': 17, 'Region 12': 14, 'Region 13': 15, 'Region 10': 12, 'Region 11': 13, 'Region 4': 6, 'Region 5': 7, 'Region 6': 8, 'Region 7': 9, 'Region 0': 2, 'Region 1': 3, 'Region 2': 4, 'Region 3': 5, 'Region 8': 10, 'Region 9': 11}, 'Startup': {'no label': 1}, 'out_4': {'V-Mag': 3, '---': 1, 'Void': 17, 'Volume': 18, 'Scalar 4': 22, 'Scalar 10': 28, 'Scalar 5': 23, 'TE': 8, 'Scalar 8': 26, 'Scalar 9': 27, 'Dens': 12, 'ED': 9, 'Scalar 6': 24, 'Scalar 7': 25, 'Scalar 1': 19, 'Scalar 2': 20, 'Scalar 3': 21, 'Flux': 16, 'Tvis': 10, 'U': 4, 'T': 11, 'W': 6, 'V': 5, 'Velocity': 2, 'CP': 14, 'LamVis': 13, 'P': 7, 'Conductivity': 15}, 'out_5': {'V-Mag': 3, '---': 1, 'Void': 17, 'Volume': 18, 'Scalar 4': 22, 'Scalar 10': 28, 'Scalar 5': 23, 'TE': 8, 'Scalar 8': 26, 'Scalar 9': 27, 'Dens': 12, 'ED': 9, 'Scalar 6': 24, 'Scalar 7': 25, 'Scalar 1': 19, 'Scalar 2': 20, 'Scalar 3': 21, 'Flux': 16, 'Tvis': 10, 'U': 4, 'T': 11, 'W': 6, 'V': 5, 'Velocity': 2, 'CP': 14, 'LamVis': 13, 'P': 7, 'Conductivity': 15}, 'out_0': {'V-Mag': 3, '---': 1, 'Void': 17, 'Volume': 18, 'Scalar 4': 22, 'Scalar 10': 28, 'Scalar 5': 23, 'TE': 8, 'Scalar 8': 26, 'Scalar 9': 27, 'Dens': 12, 'ED': 9, 'Scalar 6': 24, 'Scalar 7': 25, 'Scalar 1': 19, 'Scalar 2': 20, 'Scalar 3': 21, 'Flux': 16, 'Tvis': 10, 'U': 4, 'T': 11, 'W': 6, 'V': 5, 'Velocity': 2, 'CP': 14, 'LamVis': 13, 'P': 7, 'Conductivity': 15}, 'out_1': {'V-Mag': 3, '---': 1, 'Void': 17, 'Volume': 18, 'Scalar 4': 22, 'Scalar 10': 28, 'Scalar 5': 23, 'TE': 8, 'Scalar 8': 26, 'Scalar 9': 27, 'Dens': 12, 'ED': 9, 'Scalar 6': 24, 'Scalar 7': 25, 'Scalar 1': 19, 'Scalar 2': 20, 'Scalar 3': 21, 'Flux': 16, 'Tvis': 10, 'U': 4, 'T': 11, 'W': 6, 'V': 5, 'Velocity': 2, 'CP': 14, 'LamVis': 13, 'P': 7, 'Conductivity': 15}, 'out_2': {'V-Mag': 3, '---': 1, 'Void': 17, 'Volume': 18, 'Scalar 4': 22, 'Scalar 10': 28, 'Scalar 5': 23, 'TE': 8, 'Scalar 8': 26, 'Scalar 9': 27, 'Dens': 12, 'ED': 9, 'Scalar 6': 24, 'Scalar 7': 25, 'Scalar 1': 19, 'Scalar 2': 20, 'Scalar 3': 21, 'Flux': 16, 'Tvis': 10, 'U': 4, 'T': 11, 'W': 6, 'V': 5, 'Velocity': 2, 'CP': 14, 'LamVis': 13, 'P': 7, 'Conductivity': 15}, 'out_3': {'V-Mag': 3, '---': 1, 'Void': 17, 'Volume': 18, 'Scalar 4': 22, 'Scalar 10': 28, 'Scalar 5': 23, 'TE': 8, 'Scalar 8': 26, 'Scalar 9': 27, 'Dens': 12, 'ED': 9, 'Scalar 6': 24, 'Scalar 7': 25, 'Scalar 1': 19, 'Scalar 2': 20, 'Scalar 3': 21, 'Flux': 16, 'Tvis': 10, 'U': 4, 'T': 11, 'W': 6, 'V': 5, 'Velocity': 2, 'CP': 14, 'LamVis': 13, 'P': 7, 'Conductivity': 15}, 'output': {'Hide output selectors': 2, 'Show output selectors': 1}}

        # IN ports
        self.addPort( "configObj" ,"Text", "IN")
        self.addPort( "scriptPara" ,"Text", "IN")

        # OUT ports
        self.addPort( "mesh" ,"UnstructuredGrid", "OUT")
        self.addPort( "data_0" ,"Float|Vec3", "OUT")
        self.addPort( "data_1" ,"Float|Vec3", "OUT")
        self.addPort( "data_2" ,"Float|Vec3", "OUT")
        self.addPort( "data_3" ,"Float|Vec3", "OUT")
        self.addPort( "data_4" ,"Float|Vec3", "OUT")
        self.addPort( "data_5" ,"Float|Vec3", "OUT")
        self.addPort( "residual" ,"StepData|Float", "OUT")
        self.addPort( "feedback" ,"Polygons", "OUT")

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "Startup", "Choice", "IMM")
        self.addParam( "output", "Choice", "IMM")
        self.addParam( "out_0", "Choice", "IMM")
        self.addParam( "out_1", "Choice", "IMM")
        self.addParam( "out_2", "Choice", "IMM")
        self.addParam( "out_3", "Choice", "IMM")
        self.addParam( "out_4", "Choice", "IMM")
        self.addParam( "out_5", "Choice", "IMM")
        self.addParam( "setup", "Browser", "IMM")
        self.addParam( "setup___filter", "BrowserFilter", "IMM")
        self.addParam( "step", "IntScalar", "IMM")
        self.addParam( "freeRun", "Boolean", "IMM")
        self.addParam( "run_Simulation", "Boolean", "IMM")
        self.addParam( "quit_Simulation", "Boolean", "IMM")
        self.addParam( "numProc", "IntScalar", "IMM")
        self.addParam( "region", "Choice", "IMM")
        self.addParam( "local0", "FloatVector", "IMM")
        self.addParam( "vel0", "FloatVector", "IMM")
        self.addParam( "vmag0", "FloatSlider", "IMM")
        self.addParam( "t__0", "FloatSlider", "IMM")
        self.addParam( "den0", "FloatSlider", "IMM")
        self.addParam( "p__0", "FloatSlider", "IMM")
        self.addParam( "k__0", "FloatSlider", "IMM")
        self.addParam( "eps0", "FloatSlider", "IMM")
        self.addParam( "tInt0", "FloatSlider", "IMM")
        self.addParam( "tLen0", "FloatSlider", "IMM")
        self.addParam( "scal0_1", "FloatSlider", "IMM")
        self.addParam( "scal0_2", "FloatSlider", "IMM")
        self.addParam( "scal0_3", "FloatSlider", "IMM")
        self.addParam( "scal0_4", "FloatSlider", "IMM")
        self.addParam( "scal0_5", "FloatSlider", "IMM")
        self.addParam( "scal0_6", "FloatSlider", "IMM")
        self.addParam( "scal0_7", "FloatSlider", "IMM")
        self.addParam( "scal0_8", "FloatSlider", "IMM")
        self.addParam( "scal0_9", "FloatSlider", "IMM")
        self.addParam( "scal0_10", "FloatSlider", "IMM")
        self.addParam( "user0_1", "FloatSlider", "IMM")
        self.addParam( "user0_2", "FloatSlider", "IMM")
        self.addParam( "user0_3", "FloatSlider", "IMM")
        self.addParam( "user0_4", "FloatSlider", "IMM")
        self.addParam( "user0_5", "FloatSlider", "IMM")
        self.addParam( "user0_6", "FloatSlider", "IMM")
        self.addParam( "user0_7", "FloatSlider", "IMM")
        self.addParam( "user0_8", "FloatSlider", "IMM")
        self.addParam( "user0_9", "FloatSlider", "IMM")
        self.addParam( "user0_10", "FloatSlider", "IMM")
        self.addParam( "local1", "FloatVector", "IMM")
        self.addParam( "vel1", "FloatVector", "IMM")
        self.addParam( "vmag1", "FloatSlider", "IMM")
        self.addParam( "t__1", "FloatSlider", "IMM")
        self.addParam( "den1", "FloatSlider", "IMM")
        self.addParam( "p__1", "FloatSlider", "IMM")
        self.addParam( "k__1", "FloatSlider", "IMM")
        self.addParam( "eps1", "FloatSlider", "IMM")
        self.addParam( "tInt1", "FloatSlider", "IMM")
        self.addParam( "tLen1", "FloatSlider", "IMM")
        self.addParam( "scal1_1", "FloatSlider", "IMM")
        self.addParam( "scal1_2", "FloatSlider", "IMM")
        self.addParam( "scal1_3", "FloatSlider", "IMM")
        self.addParam( "scal1_4", "FloatSlider", "IMM")
        self.addParam( "scal1_5", "FloatSlider", "IMM")
        self.addParam( "scal1_6", "FloatSlider", "IMM")
        self.addParam( "scal1_7", "FloatSlider", "IMM")
        self.addParam( "scal1_8", "FloatSlider", "IMM")
        self.addParam( "scal1_9", "FloatSlider", "IMM")
        self.addParam( "scal1_10", "FloatSlider", "IMM")
        self.addParam( "user1_1", "FloatSlider", "IMM")
        self.addParam( "user1_2", "FloatSlider", "IMM")
        self.addParam( "user1_3", "FloatSlider", "IMM")
        self.addParam( "user1_4", "FloatSlider", "IMM")
        self.addParam( "user1_5", "FloatSlider", "IMM")
        self.addParam( "user1_6", "FloatSlider", "IMM")
        self.addParam( "user1_7", "FloatSlider", "IMM")
        self.addParam( "user1_8", "FloatSlider", "IMM")
        self.addParam( "user1_9", "FloatSlider", "IMM")
        self.addParam( "user1_10", "FloatSlider", "IMM")
        self.addParam( "local2", "FloatVector", "IMM")
        self.addParam( "vel2", "FloatVector", "IMM")
        self.addParam( "vmag2", "FloatSlider", "IMM")
        self.addParam( "t__2", "FloatSlider", "IMM")
        self.addParam( "den2", "FloatSlider", "IMM")
        self.addParam( "p__2", "FloatSlider", "IMM")
        self.addParam( "k__2", "FloatSlider", "IMM")
        self.addParam( "eps2", "FloatSlider", "IMM")
        self.addParam( "tInt2", "FloatSlider", "IMM")
        self.addParam( "tLen2", "FloatSlider", "IMM")
        self.addParam( "scal2_1", "FloatSlider", "IMM")
        self.addParam( "scal2_2", "FloatSlider", "IMM")
        self.addParam( "scal2_3", "FloatSlider", "IMM")
        self.addParam( "scal2_4", "FloatSlider", "IMM")
        self.addParam( "scal2_5", "FloatSlider", "IMM")
        self.addParam( "scal2_6", "FloatSlider", "IMM")
        self.addParam( "scal2_7", "FloatSlider", "IMM")
        self.addParam( "scal2_8", "FloatSlider", "IMM")
        self.addParam( "scal2_9", "FloatSlider", "IMM")
        self.addParam( "scal2_10", "FloatSlider", "IMM")
        self.addParam( "user2_1", "FloatSlider", "IMM")
        self.addParam( "user2_2", "FloatSlider", "IMM")
        self.addParam( "user2_3", "FloatSlider", "IMM")
        self.addParam( "user2_4", "FloatSlider", "IMM")
        self.addParam( "user2_5", "FloatSlider", "IMM")
        self.addParam( "user2_6", "FloatSlider", "IMM")
        self.addParam( "user2_7", "FloatSlider", "IMM")
        self.addParam( "user2_8", "FloatSlider", "IMM")
        self.addParam( "user2_9", "FloatSlider", "IMM")
        self.addParam( "user2_10", "FloatSlider", "IMM")
        self.addParam( "local3", "FloatVector", "IMM")
        self.addParam( "vel3", "FloatVector", "IMM")
        self.addParam( "vmag3", "FloatSlider", "IMM")
        self.addParam( "t__3", "FloatSlider", "IMM")
        self.addParam( "den3", "FloatSlider", "IMM")
        self.addParam( "p__3", "FloatSlider", "IMM")
        self.addParam( "k__3", "FloatSlider", "IMM")
        self.addParam( "eps3", "FloatSlider", "IMM")
        self.addParam( "tInt3", "FloatSlider", "IMM")
        self.addParam( "tLen3", "FloatSlider", "IMM")
        self.addParam( "scal3_1", "FloatSlider", "IMM")
        self.addParam( "scal3_2", "FloatSlider", "IMM")
        self.addParam( "scal3_3", "FloatSlider", "IMM")
        self.addParam( "scal3_4", "FloatSlider", "IMM")
        self.addParam( "scal3_5", "FloatSlider", "IMM")
        self.addParam( "scal3_6", "FloatSlider", "IMM")
        self.addParam( "scal3_7", "FloatSlider", "IMM")
        self.addParam( "scal3_8", "FloatSlider", "IMM")
        self.addParam( "scal3_9", "FloatSlider", "IMM")
        self.addParam( "scal3_10", "FloatSlider", "IMM")
        self.addParam( "user3_1", "FloatSlider", "IMM")
        self.addParam( "user3_2", "FloatSlider", "IMM")
        self.addParam( "user3_3", "FloatSlider", "IMM")
        self.addParam( "user3_4", "FloatSlider", "IMM")
        self.addParam( "user3_5", "FloatSlider", "IMM")
        self.addParam( "user3_6", "FloatSlider", "IMM")
        self.addParam( "user3_7", "FloatSlider", "IMM")
        self.addParam( "user3_8", "FloatSlider", "IMM")
        self.addParam( "user3_9", "FloatSlider", "IMM")
        self.addParam( "user3_10", "FloatSlider", "IMM")
        self.addParam( "local4", "FloatVector", "IMM")
        self.addParam( "vel4", "FloatVector", "IMM")
        self.addParam( "vmag4", "FloatSlider", "IMM")
        self.addParam( "t__4", "FloatSlider", "IMM")
        self.addParam( "den4", "FloatSlider", "IMM")
        self.addParam( "p__4", "FloatSlider", "IMM")
        self.addParam( "k__4", "FloatSlider", "IMM")
        self.addParam( "eps4", "FloatSlider", "IMM")
        self.addParam( "tInt4", "FloatSlider", "IMM")
        self.addParam( "tLen4", "FloatSlider", "IMM")
        self.addParam( "scal4_1", "FloatSlider", "IMM")
        self.addParam( "scal4_2", "FloatSlider", "IMM")
        self.addParam( "scal4_3", "FloatSlider", "IMM")
        self.addParam( "scal4_4", "FloatSlider", "IMM")
        self.addParam( "scal4_5", "FloatSlider", "IMM")
        self.addParam( "scal4_6", "FloatSlider", "IMM")
        self.addParam( "scal4_7", "FloatSlider", "IMM")
        self.addParam( "scal4_8", "FloatSlider", "IMM")
        self.addParam( "scal4_9", "FloatSlider", "IMM")
        self.addParam( "scal4_10", "FloatSlider", "IMM")
        self.addParam( "user4_1", "FloatSlider", "IMM")
        self.addParam( "user4_2", "FloatSlider", "IMM")
        self.addParam( "user4_3", "FloatSlider", "IMM")
        self.addParam( "user4_4", "FloatSlider", "IMM")
        self.addParam( "user4_5", "FloatSlider", "IMM")
        self.addParam( "user4_6", "FloatSlider", "IMM")
        self.addParam( "user4_7", "FloatSlider", "IMM")
        self.addParam( "user4_8", "FloatSlider", "IMM")
        self.addParam( "user4_9", "FloatSlider", "IMM")
        self.addParam( "user4_10", "FloatSlider", "IMM")
        self.addParam( "local5", "FloatVector", "IMM")
        self.addParam( "vel5", "FloatVector", "IMM")
        self.addParam( "vmag5", "FloatSlider", "IMM")
        self.addParam( "t__5", "FloatSlider", "IMM")
        self.addParam( "den5", "FloatSlider", "IMM")
        self.addParam( "p__5", "FloatSlider", "IMM")
        self.addParam( "k__5", "FloatSlider", "IMM")
        self.addParam( "eps5", "FloatSlider", "IMM")
        self.addParam( "tInt5", "FloatSlider", "IMM")
        self.addParam( "tLen5", "FloatSlider", "IMM")
        self.addParam( "scal5_1", "FloatSlider", "IMM")
        self.addParam( "scal5_2", "FloatSlider", "IMM")
        self.addParam( "scal5_3", "FloatSlider", "IMM")
        self.addParam( "scal5_4", "FloatSlider", "IMM")
        self.addParam( "scal5_5", "FloatSlider", "IMM")
        self.addParam( "scal5_6", "FloatSlider", "IMM")
        self.addParam( "scal5_7", "FloatSlider", "IMM")
        self.addParam( "scal5_8", "FloatSlider", "IMM")
        self.addParam( "scal5_9", "FloatSlider", "IMM")
        self.addParam( "scal5_10", "FloatSlider", "IMM")
        self.addParam( "user5_1", "FloatSlider", "IMM")
        self.addParam( "user5_2", "FloatSlider", "IMM")
        self.addParam( "user5_3", "FloatSlider", "IMM")
        self.addParam( "user5_4", "FloatSlider", "IMM")
        self.addParam( "user5_5", "FloatSlider", "IMM")
        self.addParam( "user5_6", "FloatSlider", "IMM")
        self.addParam( "user5_7", "FloatSlider", "IMM")
        self.addParam( "user5_8", "FloatSlider", "IMM")
        self.addParam( "user5_9", "FloatSlider", "IMM")
        self.addParam( "user5_10", "FloatSlider", "IMM")
        self.addParam( "local6", "FloatVector", "IMM")
        self.addParam( "vel6", "FloatVector", "IMM")
        self.addParam( "vmag6", "FloatSlider", "IMM")
        self.addParam( "t__6", "FloatSlider", "IMM")
        self.addParam( "den6", "FloatSlider", "IMM")
        self.addParam( "p__6", "FloatSlider", "IMM")
        self.addParam( "k__6", "FloatSlider", "IMM")
        self.addParam( "eps6", "FloatSlider", "IMM")
        self.addParam( "tInt6", "FloatSlider", "IMM")
        self.addParam( "tLen6", "FloatSlider", "IMM")
        self.addParam( "scal6_1", "FloatSlider", "IMM")
        self.addParam( "scal6_2", "FloatSlider", "IMM")
        self.addParam( "scal6_3", "FloatSlider", "IMM")
        self.addParam( "scal6_4", "FloatSlider", "IMM")
        self.addParam( "scal6_5", "FloatSlider", "IMM")
        self.addParam( "scal6_6", "FloatSlider", "IMM")
        self.addParam( "scal6_7", "FloatSlider", "IMM")
        self.addParam( "scal6_8", "FloatSlider", "IMM")
        self.addParam( "scal6_9", "FloatSlider", "IMM")
        self.addParam( "scal6_10", "FloatSlider", "IMM")
        self.addParam( "user6_1", "FloatSlider", "IMM")
        self.addParam( "user6_2", "FloatSlider", "IMM")
        self.addParam( "user6_3", "FloatSlider", "IMM")
        self.addParam( "user6_4", "FloatSlider", "IMM")
        self.addParam( "user6_5", "FloatSlider", "IMM")
        self.addParam( "user6_6", "FloatSlider", "IMM")
        self.addParam( "user6_7", "FloatSlider", "IMM")
        self.addParam( "user6_8", "FloatSlider", "IMM")
        self.addParam( "user6_9", "FloatSlider", "IMM")
        self.addParam( "user6_10", "FloatSlider", "IMM")
        self.addParam( "local7", "FloatVector", "IMM")
        self.addParam( "vel7", "FloatVector", "IMM")
        self.addParam( "vmag7", "FloatSlider", "IMM")
        self.addParam( "t__7", "FloatSlider", "IMM")
        self.addParam( "den7", "FloatSlider", "IMM")
        self.addParam( "p__7", "FloatSlider", "IMM")
        self.addParam( "k__7", "FloatSlider", "IMM")
        self.addParam( "eps7", "FloatSlider", "IMM")
        self.addParam( "tInt7", "FloatSlider", "IMM")
        self.addParam( "tLen7", "FloatSlider", "IMM")
        self.addParam( "scal7_1", "FloatSlider", "IMM")
        self.addParam( "scal7_2", "FloatSlider", "IMM")
        self.addParam( "scal7_3", "FloatSlider", "IMM")
        self.addParam( "scal7_4", "FloatSlider", "IMM")
        self.addParam( "scal7_5", "FloatSlider", "IMM")
        self.addParam( "scal7_6", "FloatSlider", "IMM")
        self.addParam( "scal7_7", "FloatSlider", "IMM")
        self.addParam( "scal7_8", "FloatSlider", "IMM")
        self.addParam( "scal7_9", "FloatSlider", "IMM")
        self.addParam( "scal7_10", "FloatSlider", "IMM")
        self.addParam( "user7_1", "FloatSlider", "IMM")
        self.addParam( "user7_2", "FloatSlider", "IMM")
        self.addParam( "user7_3", "FloatSlider", "IMM")
        self.addParam( "user7_4", "FloatSlider", "IMM")
        self.addParam( "user7_5", "FloatSlider", "IMM")
        self.addParam( "user7_6", "FloatSlider", "IMM")
        self.addParam( "user7_7", "FloatSlider", "IMM")
        self.addParam( "user7_8", "FloatSlider", "IMM")
        self.addParam( "user7_9", "FloatSlider", "IMM")
        self.addParam( "user7_10", "FloatSlider", "IMM")
        self.addParam( "local8", "FloatVector", "IMM")
        self.addParam( "vel8", "FloatVector", "IMM")
        self.addParam( "vmag8", "FloatSlider", "IMM")
        self.addParam( "t__8", "FloatSlider", "IMM")
        self.addParam( "den8", "FloatSlider", "IMM")
        self.addParam( "p__8", "FloatSlider", "IMM")
        self.addParam( "k__8", "FloatSlider", "IMM")
        self.addParam( "eps8", "FloatSlider", "IMM")
        self.addParam( "tInt8", "FloatSlider", "IMM")
        self.addParam( "tLen8", "FloatSlider", "IMM")
        self.addParam( "scal8_1", "FloatSlider", "IMM")
        self.addParam( "scal8_2", "FloatSlider", "IMM")
        self.addParam( "scal8_3", "FloatSlider", "IMM")
        self.addParam( "scal8_4", "FloatSlider", "IMM")
        self.addParam( "scal8_5", "FloatSlider", "IMM")
        self.addParam( "scal8_6", "FloatSlider", "IMM")
        self.addParam( "scal8_7", "FloatSlider", "IMM")
        self.addParam( "scal8_8", "FloatSlider", "IMM")
        self.addParam( "scal8_9", "FloatSlider", "IMM")
        self.addParam( "scal8_10", "FloatSlider", "IMM")
        self.addParam( "user8_1", "FloatSlider", "IMM")
        self.addParam( "user8_2", "FloatSlider", "IMM")
        self.addParam( "user8_3", "FloatSlider", "IMM")
        self.addParam( "user8_4", "FloatSlider", "IMM")
        self.addParam( "user8_5", "FloatSlider", "IMM")
        self.addParam( "user8_6", "FloatSlider", "IMM")
        self.addParam( "user8_7", "FloatSlider", "IMM")
        self.addParam( "user8_8", "FloatSlider", "IMM")
        self.addParam( "user8_9", "FloatSlider", "IMM")
        self.addParam( "user8_10", "FloatSlider", "IMM")
        self.addParam( "local9", "FloatVector", "IMM")
        self.addParam( "vel9", "FloatVector", "IMM")
        self.addParam( "vmag9", "FloatSlider", "IMM")
        self.addParam( "t__9", "FloatSlider", "IMM")
        self.addParam( "den9", "FloatSlider", "IMM")
        self.addParam( "p__9", "FloatSlider", "IMM")
        self.addParam( "k__9", "FloatSlider", "IMM")
        self.addParam( "eps9", "FloatSlider", "IMM")
        self.addParam( "tInt9", "FloatSlider", "IMM")
        self.addParam( "tLen9", "FloatSlider", "IMM")
        self.addParam( "scal9_1", "FloatSlider", "IMM")
        self.addParam( "scal9_2", "FloatSlider", "IMM")
        self.addParam( "scal9_3", "FloatSlider", "IMM")
        self.addParam( "scal9_4", "FloatSlider", "IMM")
        self.addParam( "scal9_5", "FloatSlider", "IMM")
        self.addParam( "scal9_6", "FloatSlider", "IMM")
        self.addParam( "scal9_7", "FloatSlider", "IMM")
        self.addParam( "scal9_8", "FloatSlider", "IMM")
        self.addParam( "scal9_9", "FloatSlider", "IMM")
        self.addParam( "scal9_10", "FloatSlider", "IMM")
        self.addParam( "user9_1", "FloatSlider", "IMM")
        self.addParam( "user9_2", "FloatSlider", "IMM")
        self.addParam( "user9_3", "FloatSlider", "IMM")
        self.addParam( "user9_4", "FloatSlider", "IMM")
        self.addParam( "user9_5", "FloatSlider", "IMM")
        self.addParam( "user9_6", "FloatSlider", "IMM")
        self.addParam( "user9_7", "FloatSlider", "IMM")
        self.addParam( "user9_8", "FloatSlider", "IMM")
        self.addParam( "user9_9", "FloatSlider", "IMM")
        self.addParam( "user9_10", "FloatSlider", "IMM")
        self.addParam( "local10", "FloatVector", "IMM")
        self.addParam( "vel10", "FloatVector", "IMM")
        self.addParam( "vmag10", "FloatSlider", "IMM")
        self.addParam( "t__10", "FloatSlider", "IMM")
        self.addParam( "den10", "FloatSlider", "IMM")
        self.addParam( "p__10", "FloatSlider", "IMM")
        self.addParam( "k__10", "FloatSlider", "IMM")
        self.addParam( "eps10", "FloatSlider", "IMM")
        self.addParam( "tInt10", "FloatSlider", "IMM")
        self.addParam( "tLen10", "FloatSlider", "IMM")
        self.addParam( "scal10_1", "FloatSlider", "IMM")
        self.addParam( "scal10_2", "FloatSlider", "IMM")
        self.addParam( "scal10_3", "FloatSlider", "IMM")
        self.addParam( "scal10_4", "FloatSlider", "IMM")
        self.addParam( "scal10_5", "FloatSlider", "IMM")
        self.addParam( "scal10_6", "FloatSlider", "IMM")
        self.addParam( "scal10_7", "FloatSlider", "IMM")
        self.addParam( "scal10_8", "FloatSlider", "IMM")
        self.addParam( "scal10_9", "FloatSlider", "IMM")
        self.addParam( "scal10_10", "FloatSlider", "IMM")
        self.addParam( "user10_1", "FloatSlider", "IMM")
        self.addParam( "user10_2", "FloatSlider", "IMM")
        self.addParam( "user10_3", "FloatSlider", "IMM")
        self.addParam( "user10_4", "FloatSlider", "IMM")
        self.addParam( "user10_5", "FloatSlider", "IMM")
        self.addParam( "user10_6", "FloatSlider", "IMM")
        self.addParam( "user10_7", "FloatSlider", "IMM")
        self.addParam( "user10_8", "FloatSlider", "IMM")
        self.addParam( "user10_9", "FloatSlider", "IMM")
        self.addParam( "user10_10", "FloatSlider", "IMM")
        self.addParam( "local11", "FloatVector", "IMM")
        self.addParam( "vel11", "FloatVector", "IMM")
        self.addParam( "vmag11", "FloatSlider", "IMM")
        self.addParam( "t__11", "FloatSlider", "IMM")
        self.addParam( "den11", "FloatSlider", "IMM")
        self.addParam( "p__11", "FloatSlider", "IMM")
        self.addParam( "k__11", "FloatSlider", "IMM")
        self.addParam( "eps11", "FloatSlider", "IMM")
        self.addParam( "tInt11", "FloatSlider", "IMM")
        self.addParam( "tLen11", "FloatSlider", "IMM")
        self.addParam( "scal11_1", "FloatSlider", "IMM")
        self.addParam( "scal11_2", "FloatSlider", "IMM")
        self.addParam( "scal11_3", "FloatSlider", "IMM")
        self.addParam( "scal11_4", "FloatSlider", "IMM")
        self.addParam( "scal11_5", "FloatSlider", "IMM")
        self.addParam( "scal11_6", "FloatSlider", "IMM")
        self.addParam( "scal11_7", "FloatSlider", "IMM")
        self.addParam( "scal11_8", "FloatSlider", "IMM")
        self.addParam( "scal11_9", "FloatSlider", "IMM")
        self.addParam( "scal11_10", "FloatSlider", "IMM")
        self.addParam( "user11_1", "FloatSlider", "IMM")
        self.addParam( "user11_2", "FloatSlider", "IMM")
        self.addParam( "user11_3", "FloatSlider", "IMM")
        self.addParam( "user11_4", "FloatSlider", "IMM")
        self.addParam( "user11_5", "FloatSlider", "IMM")
        self.addParam( "user11_6", "FloatSlider", "IMM")
        self.addParam( "user11_7", "FloatSlider", "IMM")
        self.addParam( "user11_8", "FloatSlider", "IMM")
        self.addParam( "user11_9", "FloatSlider", "IMM")
        self.addParam( "user11_10", "FloatSlider", "IMM")
        self.addParam( "local12", "FloatVector", "IMM")
        self.addParam( "vel12", "FloatVector", "IMM")
        self.addParam( "vmag12", "FloatSlider", "IMM")
        self.addParam( "t__12", "FloatSlider", "IMM")
        self.addParam( "den12", "FloatSlider", "IMM")
        self.addParam( "p__12", "FloatSlider", "IMM")
        self.addParam( "k__12", "FloatSlider", "IMM")
        self.addParam( "eps12", "FloatSlider", "IMM")
        self.addParam( "tInt12", "FloatSlider", "IMM")
        self.addParam( "tLen12", "FloatSlider", "IMM")
        self.addParam( "scal12_1", "FloatSlider", "IMM")
        self.addParam( "scal12_2", "FloatSlider", "IMM")
        self.addParam( "scal12_3", "FloatSlider", "IMM")
        self.addParam( "scal12_4", "FloatSlider", "IMM")
        self.addParam( "scal12_5", "FloatSlider", "IMM")
        self.addParam( "scal12_6", "FloatSlider", "IMM")
        self.addParam( "scal12_7", "FloatSlider", "IMM")
        self.addParam( "scal12_8", "FloatSlider", "IMM")
        self.addParam( "scal12_9", "FloatSlider", "IMM")
        self.addParam( "scal12_10", "FloatSlider", "IMM")
        self.addParam( "user12_1", "FloatSlider", "IMM")
        self.addParam( "user12_2", "FloatSlider", "IMM")
        self.addParam( "user12_3", "FloatSlider", "IMM")
        self.addParam( "user12_4", "FloatSlider", "IMM")
        self.addParam( "user12_5", "FloatSlider", "IMM")
        self.addParam( "user12_6", "FloatSlider", "IMM")
        self.addParam( "user12_7", "FloatSlider", "IMM")
        self.addParam( "user12_8", "FloatSlider", "IMM")
        self.addParam( "user12_9", "FloatSlider", "IMM")
        self.addParam( "user12_10", "FloatSlider", "IMM")
        self.addParam( "local13", "FloatVector", "IMM")
        self.addParam( "vel13", "FloatVector", "IMM")
        self.addParam( "vmag13", "FloatSlider", "IMM")
        self.addParam( "t__13", "FloatSlider", "IMM")
        self.addParam( "den13", "FloatSlider", "IMM")
        self.addParam( "p__13", "FloatSlider", "IMM")
        self.addParam( "k__13", "FloatSlider", "IMM")
        self.addParam( "eps13", "FloatSlider", "IMM")
        self.addParam( "tInt13", "FloatSlider", "IMM")
        self.addParam( "tLen13", "FloatSlider", "IMM")
        self.addParam( "scal13_1", "FloatSlider", "IMM")
        self.addParam( "scal13_2", "FloatSlider", "IMM")
        self.addParam( "scal13_3", "FloatSlider", "IMM")
        self.addParam( "scal13_4", "FloatSlider", "IMM")
        self.addParam( "scal13_5", "FloatSlider", "IMM")
        self.addParam( "scal13_6", "FloatSlider", "IMM")
        self.addParam( "scal13_7", "FloatSlider", "IMM")
        self.addParam( "scal13_8", "FloatSlider", "IMM")
        self.addParam( "scal13_9", "FloatSlider", "IMM")
        self.addParam( "scal13_10", "FloatSlider", "IMM")
        self.addParam( "user13_1", "FloatSlider", "IMM")
        self.addParam( "user13_2", "FloatSlider", "IMM")
        self.addParam( "user13_3", "FloatSlider", "IMM")
        self.addParam( "user13_4", "FloatSlider", "IMM")
        self.addParam( "user13_5", "FloatSlider", "IMM")
        self.addParam( "user13_6", "FloatSlider", "IMM")
        self.addParam( "user13_7", "FloatSlider", "IMM")
        self.addParam( "user13_8", "FloatSlider", "IMM")
        self.addParam( "user13_9", "FloatSlider", "IMM")
        self.addParam( "user13_10", "FloatSlider", "IMM")
        self.addParam( "local14", "FloatVector", "IMM")
        self.addParam( "vel14", "FloatVector", "IMM")
        self.addParam( "vmag14", "FloatSlider", "IMM")
        self.addParam( "t__14", "FloatSlider", "IMM")
        self.addParam( "den14", "FloatSlider", "IMM")
        self.addParam( "p__14", "FloatSlider", "IMM")
        self.addParam( "k__14", "FloatSlider", "IMM")
        self.addParam( "eps14", "FloatSlider", "IMM")
        self.addParam( "tInt14", "FloatSlider", "IMM")
        self.addParam( "tLen14", "FloatSlider", "IMM")
        self.addParam( "scal14_1", "FloatSlider", "IMM")
        self.addParam( "scal14_2", "FloatSlider", "IMM")
        self.addParam( "scal14_3", "FloatSlider", "IMM")
        self.addParam( "scal14_4", "FloatSlider", "IMM")
        self.addParam( "scal14_5", "FloatSlider", "IMM")
        self.addParam( "scal14_6", "FloatSlider", "IMM")
        self.addParam( "scal14_7", "FloatSlider", "IMM")
        self.addParam( "scal14_8", "FloatSlider", "IMM")
        self.addParam( "scal14_9", "FloatSlider", "IMM")
        self.addParam( "scal14_10", "FloatSlider", "IMM")
        self.addParam( "user14_1", "FloatSlider", "IMM")
        self.addParam( "user14_2", "FloatSlider", "IMM")
        self.addParam( "user14_3", "FloatSlider", "IMM")
        self.addParam( "user14_4", "FloatSlider", "IMM")
        self.addParam( "user14_5", "FloatSlider", "IMM")
        self.addParam( "user14_6", "FloatSlider", "IMM")
        self.addParam( "user14_7", "FloatSlider", "IMM")
        self.addParam( "user14_8", "FloatSlider", "IMM")
        self.addParam( "user14_9", "FloatSlider", "IMM")
        self.addParam( "user14_10", "FloatSlider", "IMM")
        self.addParam( "local15", "FloatVector", "IMM")
        self.addParam( "vel15", "FloatVector", "IMM")
        self.addParam( "vmag15", "FloatSlider", "IMM")
        self.addParam( "t__15", "FloatSlider", "IMM")
        self.addParam( "den15", "FloatSlider", "IMM")
        self.addParam( "p__15", "FloatSlider", "IMM")
        self.addParam( "k__15", "FloatSlider", "IMM")
        self.addParam( "eps15", "FloatSlider", "IMM")
        self.addParam( "tInt15", "FloatSlider", "IMM")
        self.addParam( "tLen15", "FloatSlider", "IMM")
        self.addParam( "scal15_1", "FloatSlider", "IMM")
        self.addParam( "scal15_2", "FloatSlider", "IMM")
        self.addParam( "scal15_3", "FloatSlider", "IMM")
        self.addParam( "scal15_4", "FloatSlider", "IMM")
        self.addParam( "scal15_5", "FloatSlider", "IMM")
        self.addParam( "scal15_6", "FloatSlider", "IMM")
        self.addParam( "scal15_7", "FloatSlider", "IMM")
        self.addParam( "scal15_8", "FloatSlider", "IMM")
        self.addParam( "scal15_9", "FloatSlider", "IMM")
        self.addParam( "scal15_10", "FloatSlider", "IMM")
        self.addParam( "user15_1", "FloatSlider", "IMM")
        self.addParam( "user15_2", "FloatSlider", "IMM")
        self.addParam( "user15_3", "FloatSlider", "IMM")
        self.addParam( "user15_4", "FloatSlider", "IMM")
        self.addParam( "user15_5", "FloatSlider", "IMM")
        self.addParam( "user15_6", "FloatSlider", "IMM")
        self.addParam( "user15_7", "FloatSlider", "IMM")
        self.addParam( "user15_8", "FloatSlider", "IMM")
        self.addParam( "user15_9", "FloatSlider", "IMM")
        self.addParam( "user15_10", "FloatSlider", "IMM")

    #     2. create parameter set members
    def set_Startup( self, x ) :
        valstr = x 
        self.setParamValue( "Startup", valstr )
    def get_Startup( self ) :
        self.getParamValue( "Startup" )

    def set_output( self, x ) :
        valstr = x 
        self.setParamValue( "output", valstr )
    def get_output( self ) :
        self.getParamValue( "output" )

    def set_out_0( self, x ) :
        valstr = x 
        self.setParamValue( "out_0", valstr )
    def get_out_0( self ) :
        self.getParamValue( "out_0" )

    def set_out_1( self, x ) :
        valstr = x 
        self.setParamValue( "out_1", valstr )
    def get_out_1( self ) :
        self.getParamValue( "out_1" )

    def set_out_2( self, x ) :
        valstr = x 
        self.setParamValue( "out_2", valstr )
    def get_out_2( self ) :
        self.getParamValue( "out_2" )

    def set_out_3( self, x ) :
        valstr = x 
        self.setParamValue( "out_3", valstr )
    def get_out_3( self ) :
        self.getParamValue( "out_3" )

    def set_out_4( self, x ) :
        valstr = x 
        self.setParamValue( "out_4", valstr )
    def get_out_4( self ) :
        self.getParamValue( "out_4" )

    def set_out_5( self, x ) :
        valstr = x 
        self.setParamValue( "out_5", valstr )
    def get_out_5( self ) :
        self.getParamValue( "out_5" )

    def set_setup( self, x ) :
        valstr = x 
        self.setParamValue( "setup", valstr )
    def get_setup( self ) :
        self.getParamValue( "setup" )

    def set_setup___filter( self, x ) :
        valstr =  x 
        self.setParamValue( "setup___filter", valstr )
    def get_setup___filter( self ) :
        self.getParamValue( "setup___filter" )

    def set_step( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "step", valstr )
    def get_step( self ) :
        self.getParamValue( "step" )

    def set_freeRun( self, x ) :
        valstr = x 
        self.setParamValue( "freeRun", valstr )
    def get_freeRun( self ) :
        self.getParamValue( "freeRun" )

    def set_run_Simulation( self, x ) :
        valstr = x 
        self.setParamValue( "run_Simulation", valstr )
    def get_run_Simulation( self ) :
        self.getParamValue( "run_Simulation" )

    def set_quit_Simulation( self, x ) :
        valstr = x 
        self.setParamValue( "quit_Simulation", valstr )
    def get_quit_Simulation( self ) :
        self.getParamValue( "quit_Simulation" )

    def set_numProc( self, x ) :
        valstr =  "%d" % x 
        self.setParamValue( "numProc", valstr )
    def get_numProc( self ) :
        self.getParamValue( "numProc" )

    def set_region( self, x ) :
        valstr = x 
        self.setParamValue( "region", valstr )
    def get_region( self ) :
        self.getParamValue( "region" )

    def set_local0( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local0", valstr )
    def get_local0( self ) :
        self.getParamValue( "local0" )

    def set_vel0( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel0", valstr )
    def get_vel0( self ) :
        self.getParamValue( "vel0" )

    def set_vmag0( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag0", valstr )
    def get_vmag0( self ) :
        self.getParamValue( "vmag0" )

    def set_t__0( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__0", valstr )
    def get_t__0( self ) :
        self.getParamValue( "t__0" )

    def set_den0( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den0", valstr )
    def get_den0( self ) :
        self.getParamValue( "den0" )

    def set_p__0( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__0", valstr )
    def get_p__0( self ) :
        self.getParamValue( "p__0" )

    def set_k__0( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__0", valstr )
    def get_k__0( self ) :
        self.getParamValue( "k__0" )

    def set_eps0( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps0", valstr )
    def get_eps0( self ) :
        self.getParamValue( "eps0" )

    def set_tInt0( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt0", valstr )
    def get_tInt0( self ) :
        self.getParamValue( "tInt0" )

    def set_tLen0( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen0", valstr )
    def get_tLen0( self ) :
        self.getParamValue( "tLen0" )

    def set_scal0_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal0_1", valstr )
    def get_scal0_1( self ) :
        self.getParamValue( "scal0_1" )

    def set_scal0_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal0_2", valstr )
    def get_scal0_2( self ) :
        self.getParamValue( "scal0_2" )

    def set_scal0_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal0_3", valstr )
    def get_scal0_3( self ) :
        self.getParamValue( "scal0_3" )

    def set_scal0_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal0_4", valstr )
    def get_scal0_4( self ) :
        self.getParamValue( "scal0_4" )

    def set_scal0_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal0_5", valstr )
    def get_scal0_5( self ) :
        self.getParamValue( "scal0_5" )

    def set_scal0_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal0_6", valstr )
    def get_scal0_6( self ) :
        self.getParamValue( "scal0_6" )

    def set_scal0_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal0_7", valstr )
    def get_scal0_7( self ) :
        self.getParamValue( "scal0_7" )

    def set_scal0_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal0_8", valstr )
    def get_scal0_8( self ) :
        self.getParamValue( "scal0_8" )

    def set_scal0_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal0_9", valstr )
    def get_scal0_9( self ) :
        self.getParamValue( "scal0_9" )

    def set_scal0_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal0_10", valstr )
    def get_scal0_10( self ) :
        self.getParamValue( "scal0_10" )

    def set_user0_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user0_1", valstr )
    def get_user0_1( self ) :
        self.getParamValue( "user0_1" )

    def set_user0_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user0_2", valstr )
    def get_user0_2( self ) :
        self.getParamValue( "user0_2" )

    def set_user0_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user0_3", valstr )
    def get_user0_3( self ) :
        self.getParamValue( "user0_3" )

    def set_user0_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user0_4", valstr )
    def get_user0_4( self ) :
        self.getParamValue( "user0_4" )

    def set_user0_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user0_5", valstr )
    def get_user0_5( self ) :
        self.getParamValue( "user0_5" )

    def set_user0_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user0_6", valstr )
    def get_user0_6( self ) :
        self.getParamValue( "user0_6" )

    def set_user0_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user0_7", valstr )
    def get_user0_7( self ) :
        self.getParamValue( "user0_7" )

    def set_user0_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user0_8", valstr )
    def get_user0_8( self ) :
        self.getParamValue( "user0_8" )

    def set_user0_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user0_9", valstr )
    def get_user0_9( self ) :
        self.getParamValue( "user0_9" )

    def set_user0_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user0_10", valstr )
    def get_user0_10( self ) :
        self.getParamValue( "user0_10" )

    def set_local1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local1", valstr )
    def get_local1( self ) :
        self.getParamValue( "local1" )

    def set_vel1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel1", valstr )
    def get_vel1( self ) :
        self.getParamValue( "vel1" )

    def set_vmag1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag1", valstr )
    def get_vmag1( self ) :
        self.getParamValue( "vmag1" )

    def set_t__1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__1", valstr )
    def get_t__1( self ) :
        self.getParamValue( "t__1" )

    def set_den1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den1", valstr )
    def get_den1( self ) :
        self.getParamValue( "den1" )

    def set_p__1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__1", valstr )
    def get_p__1( self ) :
        self.getParamValue( "p__1" )

    def set_k__1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__1", valstr )
    def get_k__1( self ) :
        self.getParamValue( "k__1" )

    def set_eps1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps1", valstr )
    def get_eps1( self ) :
        self.getParamValue( "eps1" )

    def set_tInt1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt1", valstr )
    def get_tInt1( self ) :
        self.getParamValue( "tInt1" )

    def set_tLen1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen1", valstr )
    def get_tLen1( self ) :
        self.getParamValue( "tLen1" )

    def set_scal1_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal1_1", valstr )
    def get_scal1_1( self ) :
        self.getParamValue( "scal1_1" )

    def set_scal1_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal1_2", valstr )
    def get_scal1_2( self ) :
        self.getParamValue( "scal1_2" )

    def set_scal1_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal1_3", valstr )
    def get_scal1_3( self ) :
        self.getParamValue( "scal1_3" )

    def set_scal1_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal1_4", valstr )
    def get_scal1_4( self ) :
        self.getParamValue( "scal1_4" )

    def set_scal1_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal1_5", valstr )
    def get_scal1_5( self ) :
        self.getParamValue( "scal1_5" )

    def set_scal1_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal1_6", valstr )
    def get_scal1_6( self ) :
        self.getParamValue( "scal1_6" )

    def set_scal1_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal1_7", valstr )
    def get_scal1_7( self ) :
        self.getParamValue( "scal1_7" )

    def set_scal1_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal1_8", valstr )
    def get_scal1_8( self ) :
        self.getParamValue( "scal1_8" )

    def set_scal1_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal1_9", valstr )
    def get_scal1_9( self ) :
        self.getParamValue( "scal1_9" )

    def set_scal1_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal1_10", valstr )
    def get_scal1_10( self ) :
        self.getParamValue( "scal1_10" )

    def set_user1_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user1_1", valstr )
    def get_user1_1( self ) :
        self.getParamValue( "user1_1" )

    def set_user1_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user1_2", valstr )
    def get_user1_2( self ) :
        self.getParamValue( "user1_2" )

    def set_user1_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user1_3", valstr )
    def get_user1_3( self ) :
        self.getParamValue( "user1_3" )

    def set_user1_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user1_4", valstr )
    def get_user1_4( self ) :
        self.getParamValue( "user1_4" )

    def set_user1_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user1_5", valstr )
    def get_user1_5( self ) :
        self.getParamValue( "user1_5" )

    def set_user1_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user1_6", valstr )
    def get_user1_6( self ) :
        self.getParamValue( "user1_6" )

    def set_user1_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user1_7", valstr )
    def get_user1_7( self ) :
        self.getParamValue( "user1_7" )

    def set_user1_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user1_8", valstr )
    def get_user1_8( self ) :
        self.getParamValue( "user1_8" )

    def set_user1_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user1_9", valstr )
    def get_user1_9( self ) :
        self.getParamValue( "user1_9" )

    def set_user1_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user1_10", valstr )
    def get_user1_10( self ) :
        self.getParamValue( "user1_10" )

    def set_local2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local2", valstr )
    def get_local2( self ) :
        self.getParamValue( "local2" )

    def set_vel2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel2", valstr )
    def get_vel2( self ) :
        self.getParamValue( "vel2" )

    def set_vmag2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag2", valstr )
    def get_vmag2( self ) :
        self.getParamValue( "vmag2" )

    def set_t__2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__2", valstr )
    def get_t__2( self ) :
        self.getParamValue( "t__2" )

    def set_den2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den2", valstr )
    def get_den2( self ) :
        self.getParamValue( "den2" )

    def set_p__2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__2", valstr )
    def get_p__2( self ) :
        self.getParamValue( "p__2" )

    def set_k__2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__2", valstr )
    def get_k__2( self ) :
        self.getParamValue( "k__2" )

    def set_eps2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps2", valstr )
    def get_eps2( self ) :
        self.getParamValue( "eps2" )

    def set_tInt2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt2", valstr )
    def get_tInt2( self ) :
        self.getParamValue( "tInt2" )

    def set_tLen2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen2", valstr )
    def get_tLen2( self ) :
        self.getParamValue( "tLen2" )

    def set_scal2_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal2_1", valstr )
    def get_scal2_1( self ) :
        self.getParamValue( "scal2_1" )

    def set_scal2_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal2_2", valstr )
    def get_scal2_2( self ) :
        self.getParamValue( "scal2_2" )

    def set_scal2_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal2_3", valstr )
    def get_scal2_3( self ) :
        self.getParamValue( "scal2_3" )

    def set_scal2_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal2_4", valstr )
    def get_scal2_4( self ) :
        self.getParamValue( "scal2_4" )

    def set_scal2_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal2_5", valstr )
    def get_scal2_5( self ) :
        self.getParamValue( "scal2_5" )

    def set_scal2_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal2_6", valstr )
    def get_scal2_6( self ) :
        self.getParamValue( "scal2_6" )

    def set_scal2_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal2_7", valstr )
    def get_scal2_7( self ) :
        self.getParamValue( "scal2_7" )

    def set_scal2_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal2_8", valstr )
    def get_scal2_8( self ) :
        self.getParamValue( "scal2_8" )

    def set_scal2_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal2_9", valstr )
    def get_scal2_9( self ) :
        self.getParamValue( "scal2_9" )

    def set_scal2_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal2_10", valstr )
    def get_scal2_10( self ) :
        self.getParamValue( "scal2_10" )

    def set_user2_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user2_1", valstr )
    def get_user2_1( self ) :
        self.getParamValue( "user2_1" )

    def set_user2_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user2_2", valstr )
    def get_user2_2( self ) :
        self.getParamValue( "user2_2" )

    def set_user2_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user2_3", valstr )
    def get_user2_3( self ) :
        self.getParamValue( "user2_3" )

    def set_user2_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user2_4", valstr )
    def get_user2_4( self ) :
        self.getParamValue( "user2_4" )

    def set_user2_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user2_5", valstr )
    def get_user2_5( self ) :
        self.getParamValue( "user2_5" )

    def set_user2_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user2_6", valstr )
    def get_user2_6( self ) :
        self.getParamValue( "user2_6" )

    def set_user2_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user2_7", valstr )
    def get_user2_7( self ) :
        self.getParamValue( "user2_7" )

    def set_user2_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user2_8", valstr )
    def get_user2_8( self ) :
        self.getParamValue( "user2_8" )

    def set_user2_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user2_9", valstr )
    def get_user2_9( self ) :
        self.getParamValue( "user2_9" )

    def set_user2_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user2_10", valstr )
    def get_user2_10( self ) :
        self.getParamValue( "user2_10" )

    def set_local3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local3", valstr )
    def get_local3( self ) :
        self.getParamValue( "local3" )

    def set_vel3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel3", valstr )
    def get_vel3( self ) :
        self.getParamValue( "vel3" )

    def set_vmag3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag3", valstr )
    def get_vmag3( self ) :
        self.getParamValue( "vmag3" )

    def set_t__3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__3", valstr )
    def get_t__3( self ) :
        self.getParamValue( "t__3" )

    def set_den3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den3", valstr )
    def get_den3( self ) :
        self.getParamValue( "den3" )

    def set_p__3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__3", valstr )
    def get_p__3( self ) :
        self.getParamValue( "p__3" )

    def set_k__3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__3", valstr )
    def get_k__3( self ) :
        self.getParamValue( "k__3" )

    def set_eps3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps3", valstr )
    def get_eps3( self ) :
        self.getParamValue( "eps3" )

    def set_tInt3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt3", valstr )
    def get_tInt3( self ) :
        self.getParamValue( "tInt3" )

    def set_tLen3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen3", valstr )
    def get_tLen3( self ) :
        self.getParamValue( "tLen3" )

    def set_scal3_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal3_1", valstr )
    def get_scal3_1( self ) :
        self.getParamValue( "scal3_1" )

    def set_scal3_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal3_2", valstr )
    def get_scal3_2( self ) :
        self.getParamValue( "scal3_2" )

    def set_scal3_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal3_3", valstr )
    def get_scal3_3( self ) :
        self.getParamValue( "scal3_3" )

    def set_scal3_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal3_4", valstr )
    def get_scal3_4( self ) :
        self.getParamValue( "scal3_4" )

    def set_scal3_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal3_5", valstr )
    def get_scal3_5( self ) :
        self.getParamValue( "scal3_5" )

    def set_scal3_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal3_6", valstr )
    def get_scal3_6( self ) :
        self.getParamValue( "scal3_6" )

    def set_scal3_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal3_7", valstr )
    def get_scal3_7( self ) :
        self.getParamValue( "scal3_7" )

    def set_scal3_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal3_8", valstr )
    def get_scal3_8( self ) :
        self.getParamValue( "scal3_8" )

    def set_scal3_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal3_9", valstr )
    def get_scal3_9( self ) :
        self.getParamValue( "scal3_9" )

    def set_scal3_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal3_10", valstr )
    def get_scal3_10( self ) :
        self.getParamValue( "scal3_10" )

    def set_user3_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user3_1", valstr )
    def get_user3_1( self ) :
        self.getParamValue( "user3_1" )

    def set_user3_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user3_2", valstr )
    def get_user3_2( self ) :
        self.getParamValue( "user3_2" )

    def set_user3_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user3_3", valstr )
    def get_user3_3( self ) :
        self.getParamValue( "user3_3" )

    def set_user3_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user3_4", valstr )
    def get_user3_4( self ) :
        self.getParamValue( "user3_4" )

    def set_user3_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user3_5", valstr )
    def get_user3_5( self ) :
        self.getParamValue( "user3_5" )

    def set_user3_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user3_6", valstr )
    def get_user3_6( self ) :
        self.getParamValue( "user3_6" )

    def set_user3_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user3_7", valstr )
    def get_user3_7( self ) :
        self.getParamValue( "user3_7" )

    def set_user3_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user3_8", valstr )
    def get_user3_8( self ) :
        self.getParamValue( "user3_8" )

    def set_user3_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user3_9", valstr )
    def get_user3_9( self ) :
        self.getParamValue( "user3_9" )

    def set_user3_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user3_10", valstr )
    def get_user3_10( self ) :
        self.getParamValue( "user3_10" )

    def set_local4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local4", valstr )
    def get_local4( self ) :
        self.getParamValue( "local4" )

    def set_vel4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel4", valstr )
    def get_vel4( self ) :
        self.getParamValue( "vel4" )

    def set_vmag4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag4", valstr )
    def get_vmag4( self ) :
        self.getParamValue( "vmag4" )

    def set_t__4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__4", valstr )
    def get_t__4( self ) :
        self.getParamValue( "t__4" )

    def set_den4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den4", valstr )
    def get_den4( self ) :
        self.getParamValue( "den4" )

    def set_p__4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__4", valstr )
    def get_p__4( self ) :
        self.getParamValue( "p__4" )

    def set_k__4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__4", valstr )
    def get_k__4( self ) :
        self.getParamValue( "k__4" )

    def set_eps4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps4", valstr )
    def get_eps4( self ) :
        self.getParamValue( "eps4" )

    def set_tInt4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt4", valstr )
    def get_tInt4( self ) :
        self.getParamValue( "tInt4" )

    def set_tLen4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen4", valstr )
    def get_tLen4( self ) :
        self.getParamValue( "tLen4" )

    def set_scal4_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal4_1", valstr )
    def get_scal4_1( self ) :
        self.getParamValue( "scal4_1" )

    def set_scal4_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal4_2", valstr )
    def get_scal4_2( self ) :
        self.getParamValue( "scal4_2" )

    def set_scal4_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal4_3", valstr )
    def get_scal4_3( self ) :
        self.getParamValue( "scal4_3" )

    def set_scal4_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal4_4", valstr )
    def get_scal4_4( self ) :
        self.getParamValue( "scal4_4" )

    def set_scal4_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal4_5", valstr )
    def get_scal4_5( self ) :
        self.getParamValue( "scal4_5" )

    def set_scal4_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal4_6", valstr )
    def get_scal4_6( self ) :
        self.getParamValue( "scal4_6" )

    def set_scal4_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal4_7", valstr )
    def get_scal4_7( self ) :
        self.getParamValue( "scal4_7" )

    def set_scal4_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal4_8", valstr )
    def get_scal4_8( self ) :
        self.getParamValue( "scal4_8" )

    def set_scal4_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal4_9", valstr )
    def get_scal4_9( self ) :
        self.getParamValue( "scal4_9" )

    def set_scal4_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal4_10", valstr )
    def get_scal4_10( self ) :
        self.getParamValue( "scal4_10" )

    def set_user4_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user4_1", valstr )
    def get_user4_1( self ) :
        self.getParamValue( "user4_1" )

    def set_user4_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user4_2", valstr )
    def get_user4_2( self ) :
        self.getParamValue( "user4_2" )

    def set_user4_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user4_3", valstr )
    def get_user4_3( self ) :
        self.getParamValue( "user4_3" )

    def set_user4_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user4_4", valstr )
    def get_user4_4( self ) :
        self.getParamValue( "user4_4" )

    def set_user4_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user4_5", valstr )
    def get_user4_5( self ) :
        self.getParamValue( "user4_5" )

    def set_user4_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user4_6", valstr )
    def get_user4_6( self ) :
        self.getParamValue( "user4_6" )

    def set_user4_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user4_7", valstr )
    def get_user4_7( self ) :
        self.getParamValue( "user4_7" )

    def set_user4_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user4_8", valstr )
    def get_user4_8( self ) :
        self.getParamValue( "user4_8" )

    def set_user4_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user4_9", valstr )
    def get_user4_9( self ) :
        self.getParamValue( "user4_9" )

    def set_user4_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user4_10", valstr )
    def get_user4_10( self ) :
        self.getParamValue( "user4_10" )

    def set_local5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local5", valstr )
    def get_local5( self ) :
        self.getParamValue( "local5" )

    def set_vel5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel5", valstr )
    def get_vel5( self ) :
        self.getParamValue( "vel5" )

    def set_vmag5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag5", valstr )
    def get_vmag5( self ) :
        self.getParamValue( "vmag5" )

    def set_t__5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__5", valstr )
    def get_t__5( self ) :
        self.getParamValue( "t__5" )

    def set_den5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den5", valstr )
    def get_den5( self ) :
        self.getParamValue( "den5" )

    def set_p__5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__5", valstr )
    def get_p__5( self ) :
        self.getParamValue( "p__5" )

    def set_k__5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__5", valstr )
    def get_k__5( self ) :
        self.getParamValue( "k__5" )

    def set_eps5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps5", valstr )
    def get_eps5( self ) :
        self.getParamValue( "eps5" )

    def set_tInt5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt5", valstr )
    def get_tInt5( self ) :
        self.getParamValue( "tInt5" )

    def set_tLen5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen5", valstr )
    def get_tLen5( self ) :
        self.getParamValue( "tLen5" )

    def set_scal5_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal5_1", valstr )
    def get_scal5_1( self ) :
        self.getParamValue( "scal5_1" )

    def set_scal5_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal5_2", valstr )
    def get_scal5_2( self ) :
        self.getParamValue( "scal5_2" )

    def set_scal5_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal5_3", valstr )
    def get_scal5_3( self ) :
        self.getParamValue( "scal5_3" )

    def set_scal5_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal5_4", valstr )
    def get_scal5_4( self ) :
        self.getParamValue( "scal5_4" )

    def set_scal5_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal5_5", valstr )
    def get_scal5_5( self ) :
        self.getParamValue( "scal5_5" )

    def set_scal5_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal5_6", valstr )
    def get_scal5_6( self ) :
        self.getParamValue( "scal5_6" )

    def set_scal5_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal5_7", valstr )
    def get_scal5_7( self ) :
        self.getParamValue( "scal5_7" )

    def set_scal5_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal5_8", valstr )
    def get_scal5_8( self ) :
        self.getParamValue( "scal5_8" )

    def set_scal5_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal5_9", valstr )
    def get_scal5_9( self ) :
        self.getParamValue( "scal5_9" )

    def set_scal5_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal5_10", valstr )
    def get_scal5_10( self ) :
        self.getParamValue( "scal5_10" )

    def set_user5_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user5_1", valstr )
    def get_user5_1( self ) :
        self.getParamValue( "user5_1" )

    def set_user5_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user5_2", valstr )
    def get_user5_2( self ) :
        self.getParamValue( "user5_2" )

    def set_user5_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user5_3", valstr )
    def get_user5_3( self ) :
        self.getParamValue( "user5_3" )

    def set_user5_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user5_4", valstr )
    def get_user5_4( self ) :
        self.getParamValue( "user5_4" )

    def set_user5_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user5_5", valstr )
    def get_user5_5( self ) :
        self.getParamValue( "user5_5" )

    def set_user5_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user5_6", valstr )
    def get_user5_6( self ) :
        self.getParamValue( "user5_6" )

    def set_user5_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user5_7", valstr )
    def get_user5_7( self ) :
        self.getParamValue( "user5_7" )

    def set_user5_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user5_8", valstr )
    def get_user5_8( self ) :
        self.getParamValue( "user5_8" )

    def set_user5_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user5_9", valstr )
    def get_user5_9( self ) :
        self.getParamValue( "user5_9" )

    def set_user5_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user5_10", valstr )
    def get_user5_10( self ) :
        self.getParamValue( "user5_10" )

    def set_local6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local6", valstr )
    def get_local6( self ) :
        self.getParamValue( "local6" )

    def set_vel6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel6", valstr )
    def get_vel6( self ) :
        self.getParamValue( "vel6" )

    def set_vmag6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag6", valstr )
    def get_vmag6( self ) :
        self.getParamValue( "vmag6" )

    def set_t__6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__6", valstr )
    def get_t__6( self ) :
        self.getParamValue( "t__6" )

    def set_den6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den6", valstr )
    def get_den6( self ) :
        self.getParamValue( "den6" )

    def set_p__6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__6", valstr )
    def get_p__6( self ) :
        self.getParamValue( "p__6" )

    def set_k__6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__6", valstr )
    def get_k__6( self ) :
        self.getParamValue( "k__6" )

    def set_eps6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps6", valstr )
    def get_eps6( self ) :
        self.getParamValue( "eps6" )

    def set_tInt6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt6", valstr )
    def get_tInt6( self ) :
        self.getParamValue( "tInt6" )

    def set_tLen6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen6", valstr )
    def get_tLen6( self ) :
        self.getParamValue( "tLen6" )

    def set_scal6_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal6_1", valstr )
    def get_scal6_1( self ) :
        self.getParamValue( "scal6_1" )

    def set_scal6_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal6_2", valstr )
    def get_scal6_2( self ) :
        self.getParamValue( "scal6_2" )

    def set_scal6_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal6_3", valstr )
    def get_scal6_3( self ) :
        self.getParamValue( "scal6_3" )

    def set_scal6_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal6_4", valstr )
    def get_scal6_4( self ) :
        self.getParamValue( "scal6_4" )

    def set_scal6_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal6_5", valstr )
    def get_scal6_5( self ) :
        self.getParamValue( "scal6_5" )

    def set_scal6_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal6_6", valstr )
    def get_scal6_6( self ) :
        self.getParamValue( "scal6_6" )

    def set_scal6_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal6_7", valstr )
    def get_scal6_7( self ) :
        self.getParamValue( "scal6_7" )

    def set_scal6_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal6_8", valstr )
    def get_scal6_8( self ) :
        self.getParamValue( "scal6_8" )

    def set_scal6_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal6_9", valstr )
    def get_scal6_9( self ) :
        self.getParamValue( "scal6_9" )

    def set_scal6_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal6_10", valstr )
    def get_scal6_10( self ) :
        self.getParamValue( "scal6_10" )

    def set_user6_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user6_1", valstr )
    def get_user6_1( self ) :
        self.getParamValue( "user6_1" )

    def set_user6_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user6_2", valstr )
    def get_user6_2( self ) :
        self.getParamValue( "user6_2" )

    def set_user6_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user6_3", valstr )
    def get_user6_3( self ) :
        self.getParamValue( "user6_3" )

    def set_user6_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user6_4", valstr )
    def get_user6_4( self ) :
        self.getParamValue( "user6_4" )

    def set_user6_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user6_5", valstr )
    def get_user6_5( self ) :
        self.getParamValue( "user6_5" )

    def set_user6_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user6_6", valstr )
    def get_user6_6( self ) :
        self.getParamValue( "user6_6" )

    def set_user6_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user6_7", valstr )
    def get_user6_7( self ) :
        self.getParamValue( "user6_7" )

    def set_user6_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user6_8", valstr )
    def get_user6_8( self ) :
        self.getParamValue( "user6_8" )

    def set_user6_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user6_9", valstr )
    def get_user6_9( self ) :
        self.getParamValue( "user6_9" )

    def set_user6_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user6_10", valstr )
    def get_user6_10( self ) :
        self.getParamValue( "user6_10" )

    def set_local7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local7", valstr )
    def get_local7( self ) :
        self.getParamValue( "local7" )

    def set_vel7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel7", valstr )
    def get_vel7( self ) :
        self.getParamValue( "vel7" )

    def set_vmag7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag7", valstr )
    def get_vmag7( self ) :
        self.getParamValue( "vmag7" )

    def set_t__7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__7", valstr )
    def get_t__7( self ) :
        self.getParamValue( "t__7" )

    def set_den7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den7", valstr )
    def get_den7( self ) :
        self.getParamValue( "den7" )

    def set_p__7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__7", valstr )
    def get_p__7( self ) :
        self.getParamValue( "p__7" )

    def set_k__7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__7", valstr )
    def get_k__7( self ) :
        self.getParamValue( "k__7" )

    def set_eps7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps7", valstr )
    def get_eps7( self ) :
        self.getParamValue( "eps7" )

    def set_tInt7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt7", valstr )
    def get_tInt7( self ) :
        self.getParamValue( "tInt7" )

    def set_tLen7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen7", valstr )
    def get_tLen7( self ) :
        self.getParamValue( "tLen7" )

    def set_scal7_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal7_1", valstr )
    def get_scal7_1( self ) :
        self.getParamValue( "scal7_1" )

    def set_scal7_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal7_2", valstr )
    def get_scal7_2( self ) :
        self.getParamValue( "scal7_2" )

    def set_scal7_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal7_3", valstr )
    def get_scal7_3( self ) :
        self.getParamValue( "scal7_3" )

    def set_scal7_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal7_4", valstr )
    def get_scal7_4( self ) :
        self.getParamValue( "scal7_4" )

    def set_scal7_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal7_5", valstr )
    def get_scal7_5( self ) :
        self.getParamValue( "scal7_5" )

    def set_scal7_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal7_6", valstr )
    def get_scal7_6( self ) :
        self.getParamValue( "scal7_6" )

    def set_scal7_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal7_7", valstr )
    def get_scal7_7( self ) :
        self.getParamValue( "scal7_7" )

    def set_scal7_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal7_8", valstr )
    def get_scal7_8( self ) :
        self.getParamValue( "scal7_8" )

    def set_scal7_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal7_9", valstr )
    def get_scal7_9( self ) :
        self.getParamValue( "scal7_9" )

    def set_scal7_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal7_10", valstr )
    def get_scal7_10( self ) :
        self.getParamValue( "scal7_10" )

    def set_user7_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user7_1", valstr )
    def get_user7_1( self ) :
        self.getParamValue( "user7_1" )

    def set_user7_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user7_2", valstr )
    def get_user7_2( self ) :
        self.getParamValue( "user7_2" )

    def set_user7_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user7_3", valstr )
    def get_user7_3( self ) :
        self.getParamValue( "user7_3" )

    def set_user7_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user7_4", valstr )
    def get_user7_4( self ) :
        self.getParamValue( "user7_4" )

    def set_user7_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user7_5", valstr )
    def get_user7_5( self ) :
        self.getParamValue( "user7_5" )

    def set_user7_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user7_6", valstr )
    def get_user7_6( self ) :
        self.getParamValue( "user7_6" )

    def set_user7_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user7_7", valstr )
    def get_user7_7( self ) :
        self.getParamValue( "user7_7" )

    def set_user7_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user7_8", valstr )
    def get_user7_8( self ) :
        self.getParamValue( "user7_8" )

    def set_user7_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user7_9", valstr )
    def get_user7_9( self ) :
        self.getParamValue( "user7_9" )

    def set_user7_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user7_10", valstr )
    def get_user7_10( self ) :
        self.getParamValue( "user7_10" )

    def set_local8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local8", valstr )
    def get_local8( self ) :
        self.getParamValue( "local8" )

    def set_vel8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel8", valstr )
    def get_vel8( self ) :
        self.getParamValue( "vel8" )

    def set_vmag8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag8", valstr )
    def get_vmag8( self ) :
        self.getParamValue( "vmag8" )

    def set_t__8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__8", valstr )
    def get_t__8( self ) :
        self.getParamValue( "t__8" )

    def set_den8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den8", valstr )
    def get_den8( self ) :
        self.getParamValue( "den8" )

    def set_p__8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__8", valstr )
    def get_p__8( self ) :
        self.getParamValue( "p__8" )

    def set_k__8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__8", valstr )
    def get_k__8( self ) :
        self.getParamValue( "k__8" )

    def set_eps8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps8", valstr )
    def get_eps8( self ) :
        self.getParamValue( "eps8" )

    def set_tInt8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt8", valstr )
    def get_tInt8( self ) :
        self.getParamValue( "tInt8" )

    def set_tLen8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen8", valstr )
    def get_tLen8( self ) :
        self.getParamValue( "tLen8" )

    def set_scal8_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal8_1", valstr )
    def get_scal8_1( self ) :
        self.getParamValue( "scal8_1" )

    def set_scal8_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal8_2", valstr )
    def get_scal8_2( self ) :
        self.getParamValue( "scal8_2" )

    def set_scal8_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal8_3", valstr )
    def get_scal8_3( self ) :
        self.getParamValue( "scal8_3" )

    def set_scal8_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal8_4", valstr )
    def get_scal8_4( self ) :
        self.getParamValue( "scal8_4" )

    def set_scal8_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal8_5", valstr )
    def get_scal8_5( self ) :
        self.getParamValue( "scal8_5" )

    def set_scal8_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal8_6", valstr )
    def get_scal8_6( self ) :
        self.getParamValue( "scal8_6" )

    def set_scal8_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal8_7", valstr )
    def get_scal8_7( self ) :
        self.getParamValue( "scal8_7" )

    def set_scal8_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal8_8", valstr )
    def get_scal8_8( self ) :
        self.getParamValue( "scal8_8" )

    def set_scal8_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal8_9", valstr )
    def get_scal8_9( self ) :
        self.getParamValue( "scal8_9" )

    def set_scal8_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal8_10", valstr )
    def get_scal8_10( self ) :
        self.getParamValue( "scal8_10" )

    def set_user8_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user8_1", valstr )
    def get_user8_1( self ) :
        self.getParamValue( "user8_1" )

    def set_user8_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user8_2", valstr )
    def get_user8_2( self ) :
        self.getParamValue( "user8_2" )

    def set_user8_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user8_3", valstr )
    def get_user8_3( self ) :
        self.getParamValue( "user8_3" )

    def set_user8_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user8_4", valstr )
    def get_user8_4( self ) :
        self.getParamValue( "user8_4" )

    def set_user8_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user8_5", valstr )
    def get_user8_5( self ) :
        self.getParamValue( "user8_5" )

    def set_user8_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user8_6", valstr )
    def get_user8_6( self ) :
        self.getParamValue( "user8_6" )

    def set_user8_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user8_7", valstr )
    def get_user8_7( self ) :
        self.getParamValue( "user8_7" )

    def set_user8_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user8_8", valstr )
    def get_user8_8( self ) :
        self.getParamValue( "user8_8" )

    def set_user8_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user8_9", valstr )
    def get_user8_9( self ) :
        self.getParamValue( "user8_9" )

    def set_user8_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user8_10", valstr )
    def get_user8_10( self ) :
        self.getParamValue( "user8_10" )

    def set_local9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local9", valstr )
    def get_local9( self ) :
        self.getParamValue( "local9" )

    def set_vel9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel9", valstr )
    def get_vel9( self ) :
        self.getParamValue( "vel9" )

    def set_vmag9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag9", valstr )
    def get_vmag9( self ) :
        self.getParamValue( "vmag9" )

    def set_t__9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__9", valstr )
    def get_t__9( self ) :
        self.getParamValue( "t__9" )

    def set_den9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den9", valstr )
    def get_den9( self ) :
        self.getParamValue( "den9" )

    def set_p__9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__9", valstr )
    def get_p__9( self ) :
        self.getParamValue( "p__9" )

    def set_k__9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__9", valstr )
    def get_k__9( self ) :
        self.getParamValue( "k__9" )

    def set_eps9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps9", valstr )
    def get_eps9( self ) :
        self.getParamValue( "eps9" )

    def set_tInt9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt9", valstr )
    def get_tInt9( self ) :
        self.getParamValue( "tInt9" )

    def set_tLen9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen9", valstr )
    def get_tLen9( self ) :
        self.getParamValue( "tLen9" )

    def set_scal9_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal9_1", valstr )
    def get_scal9_1( self ) :
        self.getParamValue( "scal9_1" )

    def set_scal9_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal9_2", valstr )
    def get_scal9_2( self ) :
        self.getParamValue( "scal9_2" )

    def set_scal9_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal9_3", valstr )
    def get_scal9_3( self ) :
        self.getParamValue( "scal9_3" )

    def set_scal9_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal9_4", valstr )
    def get_scal9_4( self ) :
        self.getParamValue( "scal9_4" )

    def set_scal9_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal9_5", valstr )
    def get_scal9_5( self ) :
        self.getParamValue( "scal9_5" )

    def set_scal9_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal9_6", valstr )
    def get_scal9_6( self ) :
        self.getParamValue( "scal9_6" )

    def set_scal9_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal9_7", valstr )
    def get_scal9_7( self ) :
        self.getParamValue( "scal9_7" )

    def set_scal9_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal9_8", valstr )
    def get_scal9_8( self ) :
        self.getParamValue( "scal9_8" )

    def set_scal9_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal9_9", valstr )
    def get_scal9_9( self ) :
        self.getParamValue( "scal9_9" )

    def set_scal9_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal9_10", valstr )
    def get_scal9_10( self ) :
        self.getParamValue( "scal9_10" )

    def set_user9_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user9_1", valstr )
    def get_user9_1( self ) :
        self.getParamValue( "user9_1" )

    def set_user9_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user9_2", valstr )
    def get_user9_2( self ) :
        self.getParamValue( "user9_2" )

    def set_user9_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user9_3", valstr )
    def get_user9_3( self ) :
        self.getParamValue( "user9_3" )

    def set_user9_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user9_4", valstr )
    def get_user9_4( self ) :
        self.getParamValue( "user9_4" )

    def set_user9_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user9_5", valstr )
    def get_user9_5( self ) :
        self.getParamValue( "user9_5" )

    def set_user9_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user9_6", valstr )
    def get_user9_6( self ) :
        self.getParamValue( "user9_6" )

    def set_user9_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user9_7", valstr )
    def get_user9_7( self ) :
        self.getParamValue( "user9_7" )

    def set_user9_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user9_8", valstr )
    def get_user9_8( self ) :
        self.getParamValue( "user9_8" )

    def set_user9_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user9_9", valstr )
    def get_user9_9( self ) :
        self.getParamValue( "user9_9" )

    def set_user9_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user9_10", valstr )
    def get_user9_10( self ) :
        self.getParamValue( "user9_10" )

    def set_local10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local10", valstr )
    def get_local10( self ) :
        self.getParamValue( "local10" )

    def set_vel10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel10", valstr )
    def get_vel10( self ) :
        self.getParamValue( "vel10" )

    def set_vmag10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag10", valstr )
    def get_vmag10( self ) :
        self.getParamValue( "vmag10" )

    def set_t__10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__10", valstr )
    def get_t__10( self ) :
        self.getParamValue( "t__10" )

    def set_den10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den10", valstr )
    def get_den10( self ) :
        self.getParamValue( "den10" )

    def set_p__10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__10", valstr )
    def get_p__10( self ) :
        self.getParamValue( "p__10" )

    def set_k__10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__10", valstr )
    def get_k__10( self ) :
        self.getParamValue( "k__10" )

    def set_eps10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps10", valstr )
    def get_eps10( self ) :
        self.getParamValue( "eps10" )

    def set_tInt10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt10", valstr )
    def get_tInt10( self ) :
        self.getParamValue( "tInt10" )

    def set_tLen10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen10", valstr )
    def get_tLen10( self ) :
        self.getParamValue( "tLen10" )

    def set_scal10_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal10_1", valstr )
    def get_scal10_1( self ) :
        self.getParamValue( "scal10_1" )

    def set_scal10_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal10_2", valstr )
    def get_scal10_2( self ) :
        self.getParamValue( "scal10_2" )

    def set_scal10_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal10_3", valstr )
    def get_scal10_3( self ) :
        self.getParamValue( "scal10_3" )

    def set_scal10_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal10_4", valstr )
    def get_scal10_4( self ) :
        self.getParamValue( "scal10_4" )

    def set_scal10_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal10_5", valstr )
    def get_scal10_5( self ) :
        self.getParamValue( "scal10_5" )

    def set_scal10_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal10_6", valstr )
    def get_scal10_6( self ) :
        self.getParamValue( "scal10_6" )

    def set_scal10_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal10_7", valstr )
    def get_scal10_7( self ) :
        self.getParamValue( "scal10_7" )

    def set_scal10_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal10_8", valstr )
    def get_scal10_8( self ) :
        self.getParamValue( "scal10_8" )

    def set_scal10_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal10_9", valstr )
    def get_scal10_9( self ) :
        self.getParamValue( "scal10_9" )

    def set_scal10_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal10_10", valstr )
    def get_scal10_10( self ) :
        self.getParamValue( "scal10_10" )

    def set_user10_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user10_1", valstr )
    def get_user10_1( self ) :
        self.getParamValue( "user10_1" )

    def set_user10_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user10_2", valstr )
    def get_user10_2( self ) :
        self.getParamValue( "user10_2" )

    def set_user10_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user10_3", valstr )
    def get_user10_3( self ) :
        self.getParamValue( "user10_3" )

    def set_user10_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user10_4", valstr )
    def get_user10_4( self ) :
        self.getParamValue( "user10_4" )

    def set_user10_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user10_5", valstr )
    def get_user10_5( self ) :
        self.getParamValue( "user10_5" )

    def set_user10_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user10_6", valstr )
    def get_user10_6( self ) :
        self.getParamValue( "user10_6" )

    def set_user10_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user10_7", valstr )
    def get_user10_7( self ) :
        self.getParamValue( "user10_7" )

    def set_user10_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user10_8", valstr )
    def get_user10_8( self ) :
        self.getParamValue( "user10_8" )

    def set_user10_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user10_9", valstr )
    def get_user10_9( self ) :
        self.getParamValue( "user10_9" )

    def set_user10_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user10_10", valstr )
    def get_user10_10( self ) :
        self.getParamValue( "user10_10" )

    def set_local11( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local11", valstr )
    def get_local11( self ) :
        self.getParamValue( "local11" )

    def set_vel11( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel11", valstr )
    def get_vel11( self ) :
        self.getParamValue( "vel11" )

    def set_vmag11( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag11", valstr )
    def get_vmag11( self ) :
        self.getParamValue( "vmag11" )

    def set_t__11( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__11", valstr )
    def get_t__11( self ) :
        self.getParamValue( "t__11" )

    def set_den11( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den11", valstr )
    def get_den11( self ) :
        self.getParamValue( "den11" )

    def set_p__11( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__11", valstr )
    def get_p__11( self ) :
        self.getParamValue( "p__11" )

    def set_k__11( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__11", valstr )
    def get_k__11( self ) :
        self.getParamValue( "k__11" )

    def set_eps11( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps11", valstr )
    def get_eps11( self ) :
        self.getParamValue( "eps11" )

    def set_tInt11( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt11", valstr )
    def get_tInt11( self ) :
        self.getParamValue( "tInt11" )

    def set_tLen11( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen11", valstr )
    def get_tLen11( self ) :
        self.getParamValue( "tLen11" )

    def set_scal11_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal11_1", valstr )
    def get_scal11_1( self ) :
        self.getParamValue( "scal11_1" )

    def set_scal11_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal11_2", valstr )
    def get_scal11_2( self ) :
        self.getParamValue( "scal11_2" )

    def set_scal11_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal11_3", valstr )
    def get_scal11_3( self ) :
        self.getParamValue( "scal11_3" )

    def set_scal11_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal11_4", valstr )
    def get_scal11_4( self ) :
        self.getParamValue( "scal11_4" )

    def set_scal11_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal11_5", valstr )
    def get_scal11_5( self ) :
        self.getParamValue( "scal11_5" )

    def set_scal11_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal11_6", valstr )
    def get_scal11_6( self ) :
        self.getParamValue( "scal11_6" )

    def set_scal11_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal11_7", valstr )
    def get_scal11_7( self ) :
        self.getParamValue( "scal11_7" )

    def set_scal11_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal11_8", valstr )
    def get_scal11_8( self ) :
        self.getParamValue( "scal11_8" )

    def set_scal11_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal11_9", valstr )
    def get_scal11_9( self ) :
        self.getParamValue( "scal11_9" )

    def set_scal11_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal11_10", valstr )
    def get_scal11_10( self ) :
        self.getParamValue( "scal11_10" )

    def set_user11_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user11_1", valstr )
    def get_user11_1( self ) :
        self.getParamValue( "user11_1" )

    def set_user11_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user11_2", valstr )
    def get_user11_2( self ) :
        self.getParamValue( "user11_2" )

    def set_user11_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user11_3", valstr )
    def get_user11_3( self ) :
        self.getParamValue( "user11_3" )

    def set_user11_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user11_4", valstr )
    def get_user11_4( self ) :
        self.getParamValue( "user11_4" )

    def set_user11_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user11_5", valstr )
    def get_user11_5( self ) :
        self.getParamValue( "user11_5" )

    def set_user11_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user11_6", valstr )
    def get_user11_6( self ) :
        self.getParamValue( "user11_6" )

    def set_user11_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user11_7", valstr )
    def get_user11_7( self ) :
        self.getParamValue( "user11_7" )

    def set_user11_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user11_8", valstr )
    def get_user11_8( self ) :
        self.getParamValue( "user11_8" )

    def set_user11_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user11_9", valstr )
    def get_user11_9( self ) :
        self.getParamValue( "user11_9" )

    def set_user11_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user11_10", valstr )
    def get_user11_10( self ) :
        self.getParamValue( "user11_10" )

    def set_local12( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local12", valstr )
    def get_local12( self ) :
        self.getParamValue( "local12" )

    def set_vel12( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel12", valstr )
    def get_vel12( self ) :
        self.getParamValue( "vel12" )

    def set_vmag12( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag12", valstr )
    def get_vmag12( self ) :
        self.getParamValue( "vmag12" )

    def set_t__12( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__12", valstr )
    def get_t__12( self ) :
        self.getParamValue( "t__12" )

    def set_den12( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den12", valstr )
    def get_den12( self ) :
        self.getParamValue( "den12" )

    def set_p__12( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__12", valstr )
    def get_p__12( self ) :
        self.getParamValue( "p__12" )

    def set_k__12( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__12", valstr )
    def get_k__12( self ) :
        self.getParamValue( "k__12" )

    def set_eps12( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps12", valstr )
    def get_eps12( self ) :
        self.getParamValue( "eps12" )

    def set_tInt12( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt12", valstr )
    def get_tInt12( self ) :
        self.getParamValue( "tInt12" )

    def set_tLen12( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen12", valstr )
    def get_tLen12( self ) :
        self.getParamValue( "tLen12" )

    def set_scal12_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal12_1", valstr )
    def get_scal12_1( self ) :
        self.getParamValue( "scal12_1" )

    def set_scal12_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal12_2", valstr )
    def get_scal12_2( self ) :
        self.getParamValue( "scal12_2" )

    def set_scal12_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal12_3", valstr )
    def get_scal12_3( self ) :
        self.getParamValue( "scal12_3" )

    def set_scal12_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal12_4", valstr )
    def get_scal12_4( self ) :
        self.getParamValue( "scal12_4" )

    def set_scal12_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal12_5", valstr )
    def get_scal12_5( self ) :
        self.getParamValue( "scal12_5" )

    def set_scal12_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal12_6", valstr )
    def get_scal12_6( self ) :
        self.getParamValue( "scal12_6" )

    def set_scal12_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal12_7", valstr )
    def get_scal12_7( self ) :
        self.getParamValue( "scal12_7" )

    def set_scal12_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal12_8", valstr )
    def get_scal12_8( self ) :
        self.getParamValue( "scal12_8" )

    def set_scal12_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal12_9", valstr )
    def get_scal12_9( self ) :
        self.getParamValue( "scal12_9" )

    def set_scal12_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal12_10", valstr )
    def get_scal12_10( self ) :
        self.getParamValue( "scal12_10" )

    def set_user12_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user12_1", valstr )
    def get_user12_1( self ) :
        self.getParamValue( "user12_1" )

    def set_user12_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user12_2", valstr )
    def get_user12_2( self ) :
        self.getParamValue( "user12_2" )

    def set_user12_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user12_3", valstr )
    def get_user12_3( self ) :
        self.getParamValue( "user12_3" )

    def set_user12_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user12_4", valstr )
    def get_user12_4( self ) :
        self.getParamValue( "user12_4" )

    def set_user12_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user12_5", valstr )
    def get_user12_5( self ) :
        self.getParamValue( "user12_5" )

    def set_user12_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user12_6", valstr )
    def get_user12_6( self ) :
        self.getParamValue( "user12_6" )

    def set_user12_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user12_7", valstr )
    def get_user12_7( self ) :
        self.getParamValue( "user12_7" )

    def set_user12_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user12_8", valstr )
    def get_user12_8( self ) :
        self.getParamValue( "user12_8" )

    def set_user12_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user12_9", valstr )
    def get_user12_9( self ) :
        self.getParamValue( "user12_9" )

    def set_user12_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user12_10", valstr )
    def get_user12_10( self ) :
        self.getParamValue( "user12_10" )

    def set_local13( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local13", valstr )
    def get_local13( self ) :
        self.getParamValue( "local13" )

    def set_vel13( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel13", valstr )
    def get_vel13( self ) :
        self.getParamValue( "vel13" )

    def set_vmag13( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag13", valstr )
    def get_vmag13( self ) :
        self.getParamValue( "vmag13" )

    def set_t__13( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__13", valstr )
    def get_t__13( self ) :
        self.getParamValue( "t__13" )

    def set_den13( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den13", valstr )
    def get_den13( self ) :
        self.getParamValue( "den13" )

    def set_p__13( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__13", valstr )
    def get_p__13( self ) :
        self.getParamValue( "p__13" )

    def set_k__13( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__13", valstr )
    def get_k__13( self ) :
        self.getParamValue( "k__13" )

    def set_eps13( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps13", valstr )
    def get_eps13( self ) :
        self.getParamValue( "eps13" )

    def set_tInt13( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt13", valstr )
    def get_tInt13( self ) :
        self.getParamValue( "tInt13" )

    def set_tLen13( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen13", valstr )
    def get_tLen13( self ) :
        self.getParamValue( "tLen13" )

    def set_scal13_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal13_1", valstr )
    def get_scal13_1( self ) :
        self.getParamValue( "scal13_1" )

    def set_scal13_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal13_2", valstr )
    def get_scal13_2( self ) :
        self.getParamValue( "scal13_2" )

    def set_scal13_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal13_3", valstr )
    def get_scal13_3( self ) :
        self.getParamValue( "scal13_3" )

    def set_scal13_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal13_4", valstr )
    def get_scal13_4( self ) :
        self.getParamValue( "scal13_4" )

    def set_scal13_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal13_5", valstr )
    def get_scal13_5( self ) :
        self.getParamValue( "scal13_5" )

    def set_scal13_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal13_6", valstr )
    def get_scal13_6( self ) :
        self.getParamValue( "scal13_6" )

    def set_scal13_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal13_7", valstr )
    def get_scal13_7( self ) :
        self.getParamValue( "scal13_7" )

    def set_scal13_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal13_8", valstr )
    def get_scal13_8( self ) :
        self.getParamValue( "scal13_8" )

    def set_scal13_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal13_9", valstr )
    def get_scal13_9( self ) :
        self.getParamValue( "scal13_9" )

    def set_scal13_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal13_10", valstr )
    def get_scal13_10( self ) :
        self.getParamValue( "scal13_10" )

    def set_user13_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user13_1", valstr )
    def get_user13_1( self ) :
        self.getParamValue( "user13_1" )

    def set_user13_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user13_2", valstr )
    def get_user13_2( self ) :
        self.getParamValue( "user13_2" )

    def set_user13_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user13_3", valstr )
    def get_user13_3( self ) :
        self.getParamValue( "user13_3" )

    def set_user13_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user13_4", valstr )
    def get_user13_4( self ) :
        self.getParamValue( "user13_4" )

    def set_user13_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user13_5", valstr )
    def get_user13_5( self ) :
        self.getParamValue( "user13_5" )

    def set_user13_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user13_6", valstr )
    def get_user13_6( self ) :
        self.getParamValue( "user13_6" )

    def set_user13_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user13_7", valstr )
    def get_user13_7( self ) :
        self.getParamValue( "user13_7" )

    def set_user13_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user13_8", valstr )
    def get_user13_8( self ) :
        self.getParamValue( "user13_8" )

    def set_user13_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user13_9", valstr )
    def get_user13_9( self ) :
        self.getParamValue( "user13_9" )

    def set_user13_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user13_10", valstr )
    def get_user13_10( self ) :
        self.getParamValue( "user13_10" )

    def set_local14( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local14", valstr )
    def get_local14( self ) :
        self.getParamValue( "local14" )

    def set_vel14( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel14", valstr )
    def get_vel14( self ) :
        self.getParamValue( "vel14" )

    def set_vmag14( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag14", valstr )
    def get_vmag14( self ) :
        self.getParamValue( "vmag14" )

    def set_t__14( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__14", valstr )
    def get_t__14( self ) :
        self.getParamValue( "t__14" )

    def set_den14( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den14", valstr )
    def get_den14( self ) :
        self.getParamValue( "den14" )

    def set_p__14( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__14", valstr )
    def get_p__14( self ) :
        self.getParamValue( "p__14" )

    def set_k__14( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__14", valstr )
    def get_k__14( self ) :
        self.getParamValue( "k__14" )

    def set_eps14( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps14", valstr )
    def get_eps14( self ) :
        self.getParamValue( "eps14" )

    def set_tInt14( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt14", valstr )
    def get_tInt14( self ) :
        self.getParamValue( "tInt14" )

    def set_tLen14( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen14", valstr )
    def get_tLen14( self ) :
        self.getParamValue( "tLen14" )

    def set_scal14_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal14_1", valstr )
    def get_scal14_1( self ) :
        self.getParamValue( "scal14_1" )

    def set_scal14_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal14_2", valstr )
    def get_scal14_2( self ) :
        self.getParamValue( "scal14_2" )

    def set_scal14_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal14_3", valstr )
    def get_scal14_3( self ) :
        self.getParamValue( "scal14_3" )

    def set_scal14_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal14_4", valstr )
    def get_scal14_4( self ) :
        self.getParamValue( "scal14_4" )

    def set_scal14_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal14_5", valstr )
    def get_scal14_5( self ) :
        self.getParamValue( "scal14_5" )

    def set_scal14_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal14_6", valstr )
    def get_scal14_6( self ) :
        self.getParamValue( "scal14_6" )

    def set_scal14_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal14_7", valstr )
    def get_scal14_7( self ) :
        self.getParamValue( "scal14_7" )

    def set_scal14_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal14_8", valstr )
    def get_scal14_8( self ) :
        self.getParamValue( "scal14_8" )

    def set_scal14_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal14_9", valstr )
    def get_scal14_9( self ) :
        self.getParamValue( "scal14_9" )

    def set_scal14_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal14_10", valstr )
    def get_scal14_10( self ) :
        self.getParamValue( "scal14_10" )

    def set_user14_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user14_1", valstr )
    def get_user14_1( self ) :
        self.getParamValue( "user14_1" )

    def set_user14_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user14_2", valstr )
    def get_user14_2( self ) :
        self.getParamValue( "user14_2" )

    def set_user14_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user14_3", valstr )
    def get_user14_3( self ) :
        self.getParamValue( "user14_3" )

    def set_user14_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user14_4", valstr )
    def get_user14_4( self ) :
        self.getParamValue( "user14_4" )

    def set_user14_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user14_5", valstr )
    def get_user14_5( self ) :
        self.getParamValue( "user14_5" )

    def set_user14_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user14_6", valstr )
    def get_user14_6( self ) :
        self.getParamValue( "user14_6" )

    def set_user14_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user14_7", valstr )
    def get_user14_7( self ) :
        self.getParamValue( "user14_7" )

    def set_user14_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user14_8", valstr )
    def get_user14_8( self ) :
        self.getParamValue( "user14_8" )

    def set_user14_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user14_9", valstr )
    def get_user14_9( self ) :
        self.getParamValue( "user14_9" )

    def set_user14_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user14_10", valstr )
    def get_user14_10( self ) :
        self.getParamValue( "user14_10" )

    def set_local15( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "local15", valstr )
    def get_local15( self ) :
        self.getParamValue( "local15" )

    def set_vel15( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vel15", valstr )
    def get_vel15( self ) :
        self.getParamValue( "vel15" )

    def set_vmag15( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "vmag15", valstr )
    def get_vmag15( self ) :
        self.getParamValue( "vmag15" )

    def set_t__15( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "t__15", valstr )
    def get_t__15( self ) :
        self.getParamValue( "t__15" )

    def set_den15( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "den15", valstr )
    def get_den15( self ) :
        self.getParamValue( "den15" )

    def set_p__15( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "p__15", valstr )
    def get_p__15( self ) :
        self.getParamValue( "p__15" )

    def set_k__15( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "k__15", valstr )
    def get_k__15( self ) :
        self.getParamValue( "k__15" )

    def set_eps15( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "eps15", valstr )
    def get_eps15( self ) :
        self.getParamValue( "eps15" )

    def set_tInt15( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tInt15", valstr )
    def get_tInt15( self ) :
        self.getParamValue( "tInt15" )

    def set_tLen15( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "tLen15", valstr )
    def get_tLen15( self ) :
        self.getParamValue( "tLen15" )

    def set_scal15_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal15_1", valstr )
    def get_scal15_1( self ) :
        self.getParamValue( "scal15_1" )

    def set_scal15_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal15_2", valstr )
    def get_scal15_2( self ) :
        self.getParamValue( "scal15_2" )

    def set_scal15_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal15_3", valstr )
    def get_scal15_3( self ) :
        self.getParamValue( "scal15_3" )

    def set_scal15_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal15_4", valstr )
    def get_scal15_4( self ) :
        self.getParamValue( "scal15_4" )

    def set_scal15_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal15_5", valstr )
    def get_scal15_5( self ) :
        self.getParamValue( "scal15_5" )

    def set_scal15_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal15_6", valstr )
    def get_scal15_6( self ) :
        self.getParamValue( "scal15_6" )

    def set_scal15_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal15_7", valstr )
    def get_scal15_7( self ) :
        self.getParamValue( "scal15_7" )

    def set_scal15_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal15_8", valstr )
    def get_scal15_8( self ) :
        self.getParamValue( "scal15_8" )

    def set_scal15_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal15_9", valstr )
    def get_scal15_9( self ) :
        self.getParamValue( "scal15_9" )

    def set_scal15_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scal15_10", valstr )
    def get_scal15_10( self ) :
        self.getParamValue( "scal15_10" )

    def set_user15_1( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user15_1", valstr )
    def get_user15_1( self ) :
        self.getParamValue( "user15_1" )

    def set_user15_2( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user15_2", valstr )
    def get_user15_2( self ) :
        self.getParamValue( "user15_2" )

    def set_user15_3( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user15_3", valstr )
    def get_user15_3( self ) :
        self.getParamValue( "user15_3" )

    def set_user15_4( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user15_4", valstr )
    def get_user15_4( self ) :
        self.getParamValue( "user15_4" )

    def set_user15_5( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user15_5", valstr )
    def get_user15_5( self ) :
        self.getParamValue( "user15_5" )

    def set_user15_6( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user15_6", valstr )
    def get_user15_6( self ) :
        self.getParamValue( "user15_6" )

    def set_user15_7( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user15_7", valstr )
    def get_user15_7( self ) :
        self.getParamValue( "user15_7" )

    def set_user15_8( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user15_8", valstr )
    def get_user15_8( self ) :
        self.getParamValue( "user15_8" )

    def set_user15_9( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user15_9", valstr )
    def get_user15_9( self ) :
        self.getParamValue( "user15_9" )

    def set_user15_10( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "user15_10", valstr )
    def get_user15_10( self ) :
        self.getParamValue( "user15_10" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Renderer/OpenCOVER
#
class  OpenCOVER(CoviseModule):
#==================================
    name_ =  "OpenCOVER"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "RenderData" ,"Geometry|UnstructuredGrid|Points|StructuredGrid|Polygons|TriangleStrips|Lines|Spheres", "IN")

        # OUT ports

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "Viewpoints", "Browser", "START")

    #     2. create parameter set members
    def set_Viewpoints( self, x ) :
        valstr = x 
        self.setParamValue( "Viewpoints", valstr )
    def get_Viewpoints( self ) :
        self.getParamValue( "Viewpoints" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Renderer/Plot
#
class  Plot(CoviseModule):
#==================================
    name_ =  "Plot"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "RenderData" ,"Vec2|RectilinearGrid", "IN")

        # OUT ports

        # parameter handling
        #     1. register paramters to covise module stub

    #     2. create parameter set members
#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Renderer/VRMLRenderer
#
class  VRMLRenderer(CoviseModule):
#==================================
    name_ =  "VRMLRenderer"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "RenderData" ,"Geometry|UnstructuredGrid|RectilinearGrid|StructuredGrid|Polygons|TriangleStrips|Lines|Points|Spheres", "IN")

        # OUT ports

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "Filename", "Browser", "IMM")
        self.addParam( "translate", "FloatVector", "IMM")
        self.addParam( "scale", "FloatVector", "IMM")
        self.addParam( "axis_of_rotation", "FloatVector", "IMM")
        self.addParam( "angle_of_rotation", "FloatScalar", "IMM")

    #     2. create parameter set members
    def set_Filename( self, x ) :
        valstr = x 
        self.setParamValue( "Filename", valstr )
    def get_Filename( self ) :
        self.getParamValue( "Filename" )

    def set_translate( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "translate", valstr )
    def get_translate( self ) :
        self.getParamValue( "translate" )

    def set_scale( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "scale", valstr )
    def get_scale( self ) :
        self.getParamValue( "scale" )

    def set_axis_of_rotation( self, x, y, z ) :
        valstr =  "%f" % x + " %f" % y + " %f" % z 
        self.setParamValue( "axis_of_rotation", valstr )
    def get_axis_of_rotation( self ) :
        self.getParamValue( "axis_of_rotation" )

    def set_angle_of_rotation( self, x ) :
        valstr =  "%f" % x 
        self.setParamValue( "angle_of_rotation", valstr )
    def get_angle_of_rotation( self ) :
        self.getParamValue( "angle_of_rotation" )

#
# PYTHON module stub made from: 
#              /work/sk_te/trunk/covise/drake/bin/Renderer/Renderer
#
class  Renderer(CoviseModule):
#==================================
    name_ =  "Renderer"

    def __init__(self):
        self.ports = []
        self.params_ = []
        self.host_=globalHostInfo.getName()
        self.choiceDict_ = {}

        # IN ports
        self.addPort( "RenderData" ,"Geometry|Points|CellGrid|Text_Iv|UnstructuredGrid|RectilinearGrid|StructuredGrid|Polygons|TriangleStrips|Lines", "IN")

        # OUT ports

        # parameter handling
        #     1. register paramters to covise module stub
        self.addParam( "AnnotationString", "String", "IMM")

    #     2. create parameter set members
    def set_AnnotationString( self, x ) :
        valstr = x 
        self.setParamValue( "AnnotationString", valstr )
    def get_AnnotationString( self ) :
        self.getParamValue( "AnnotationString" )

